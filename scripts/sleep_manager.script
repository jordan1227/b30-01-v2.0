-- -----------------------------
--  DreamMod v0.2 by Ab@dDon ---
-- -----------------------------
sleeping              = false
sleep_blowout         = true
magic_sleep           = false
sleep_in_sleeping_bag = 1

--local start_satiety   = 0
local sleep_timer     = misc.game_timer( "sleep_timer" )
local sleep_time      = 0 -- reference value
local f_sleep         = true
local snd, drunk_song = nil, 1
local zevota_flag     = 0
local zevota_sound    = {
    "characters_voice\\human_06\\newbie\\states\\idle\\idle_34",
    "characters_voice\\human_03\\stalker\\states\\idle\\idle_33"
}

function get_sleepiness( default )
    default = default or 0
    return ( nlc_vars.gg_need_sleep or default )
end

function change_sleepiness( value, add )
    if add then value = value + get_sleepiness() end
    local diff = value - get_sleepiness( 108 )
    if value >= 0 then
        nlc_vars.gg_need_sleep = value
    else
        nlc_vars.gg_need_sleep = 0
    end
    test_for_need_sleep()
    if diff > 0.1 then
        wprintf(
            "[~T]. #DBG: change_sleepiness diff =~C0D %.3f~C07 from:\n~C0A %s~C07",
            diff, lua_traceback( '   ' )
        )
    end
    return diff
end

function add_sleepiness( value )
    change_sleepiness( value, true )
end

function reduce_need_sleep( time )
    nlc_vars.gg_need_sleep_nrg = 0
    nlc_vars.block_sleep_menu  = 0
    add_sleepiness( -time * 50 )
end

function test_for_need_sleep()  -- хочет ли спать ГГ?
    if f_sleep then f_sleep = false return end
    if sleep_manager.is_sleep_active() == false then
        test_sleep_pp()
    end
end

function test_sleep_pp()    -- зевота, иконки и постэффекты при разных уровнях сонливости
    if sleep_manager.is_sleep_active() then return end
    local points = get_sleepiness( 50 )
    if points > 250 then
        sleep_manager.main( 8 + ( nlc_vars.gg_need_sleep_nrg or 0 ) )
        if sak.cats_near() then return db.actor:kill( db.actor ) end
    elseif points > 244 then
        zevota()
        level.add_pp_effector( "black.ppe", 105, false )
        if zevota_flag ~= 3 then zevota_flag = 3 end
    elseif points > 190 then
        if zevota_flag ~= 2 then
            zevota()
            level.add_pp_effector( "black.ppe", 105, false )
            zevota_flag = 2
        end
    elseif points > 185 then
        if zevota_flag ~= 1 then
            zevota()
            zevota_flag = 1
        end
    elseif points <= 180 then
        if zevota_flag ~= 0 then zevota_flag = 0 end
    end
    if     points > 230 then test.update_sleep_icon( 4 )
    elseif points > 210 then test.update_sleep_icon( 3 )
    elseif points > 190 then test.update_sleep_icon( 2 )
    elseif points > 170 then test.update_sleep_icon( 1 )
    else   test.update_sleep_icon( 0 )
    end
end

function zevota()
    local snd_obj
    local sound = zevota_sound[ lua_random( #zevota_sound ) ]
    snd_obj = xr_sound.get_safe_sound_object( sound )
    snd_obj:play_no_feedback( db.actor, sound_object.s2d, 0, vector(), 1.0 )
end

function block_sleep_menu()
    nlc_vars.block_sleep_menu = 0
end

function clear_need_sleep_nrg( info )    -- ежедневная очистка количества выпитых энергетиков
    if info == "time_morning" or info == "time_evening" then
        nlc_vars.gg_need_sleep_nrg = 0
    end
end

function test_for_need_sleep_nrg()       -- шаманства при принятии энергетика
    local need_sleep = get_sleepiness( 50 )
    timers.start_timer( "block_sleep_menu", 0, 0, 30, "sleep_manager.block_sleep_menu()" )
    nlc_vars.block_sleep_menu = 1
    if need_sleep < 170 then return end
    local n = nlc_vars.gg_need_sleep_nrg or 0
    if n < 3 then
        nlc_vars.gg_need_sleep_nrg = n + 1
        add_sleepiness( -40 + n * 10 )
    end
end

function test_for_need_sleep_vodka()     -- поём песни при выпитой водке. Перенести нах отсюда.
    if not db.actor:is_talking() then
        drunk_song = lua_random( 1, 3 )
        for i = 1, 4 do
            if lua_random() > 0.8 then
                timers.start_timer(
                    "hop_hei" .. i, 16 * i,
                    "sleep_manager.hop_hei_lalalei()"
                )
            end
        end
    end
end

function hop_hei_lalalei()              -- поём песни при выпитой водке. Перенести нах отсюда.
    if is_sleep_active() then return end
    local actor = db.actor
    if snd and snd:playing() then snd:stop() end
    snd = xr_sound.get_safe_sound_object( "scripts\\vodk_" .. drunk_song )
    snd:play_at_pos( actor, vector(), 0, sound_object.s2d )
    if lua_random() < 0.3 then
        local active_item = actor:active_item()
        if active_item and active_item:section() ~= "bolt" then
            actor:drop_item( active_item )
        end
    end
end

function sleep_one_hour()    sleep_manager.main( 1 ) end
function sleep_three_hours() sleep_manager.main( 3 ) end
function sleep_nine_hours()  sleep_manager.main( 9 ) end

function sleep_unlim( scale )
    local sleep_time = ( 1 - db.actor.health ) * 6
    sleep_manager.main( sleep_time )
end

function sleep_minutes() -- сколько проспал гг.
    return sleep_timer:elapsed( false ) / 60.0
end

function main( scale )   -- подготовка к starter
    if snd and snd:playing() then snd:stop() end
    for i = 1, 4 do
        if timers.check_timer( "hop_hei" .. i ) then timers.stop_timer( "hop_hei" .. i ) end
    end
    scale = tonumber( scale )
    local diff = level.get_game_difficulty()
    if magic_sleep then
        params.satiety_v_add( 200 / scale, 1 )
    else
        params.satiety_v_add( ( 1 + ( 2 * scale / sleep_in_sleeping_bag ) ), 1 )
        --params.satiety_v_add( 0.9 + diff * 0.1, 1 ) -- скорость пассивного нарастания голода
    end
    params.health_v_add(                            -- скорость восстановления здоровья во сне
        balance.health.restore_w_sleep - diff * 0.1,
        sak.level_difficulty[ level.name() ]
    )
    sleeping = true
    reduce_need_sleep( 0 )
    local sleep_ltx = ini_file( "scripts\\actorsleep.ltx" )
    schemes[ "ar_sleep" ] = "ar_sleep"
    ar_sleep.set_scheme( db.actor, sleep_ltx, "ar_sleep", logic )
    db.actor:stop_talk()
    level.disable_input()
    sleep_manager.starter( scale )
end

sleep_manager.main = main

function sleep_hits()   -- хз что это, ниоткуда не вызывается
    wprintf( "[~T/~B]. #DBG: sleep_hits executed from:~C0A %s~C07", lua_traceback( ' ' ) )
    sleep_blowout = false
    magic_sleep   = true
    -- wprintf("[~T/~B]. #DBG: scheduling wakeup for few seconds...")
    schedule.add( "stop_sleep", "sleep_manager.stopper()", 4000 )
    sleep_manager.main( 107 )
end

function sleep_pesh()   -- сон в пещере
    wprintf( " sleep_grot executed from:~C0A %s~C07", lua_traceback( ' ' ) )
    sleep_blowout = false
    magic_sleep   = true
    schedule.add( "stop_sleep", "sleep_manager.stopper()", 1000 )
    sleep_manager.main( 58 )
end

slip_hits = sleep_hits  -- псевдоанглийские псевдонимы
slip_pesh = sleep_pesh  -- нигде не используются...

function reset_tf()     -- манипуляции с тайм-фактором игры
    local tfv = system_ini():r_float( "alife", "time_factor" )
    if level.name() == "aver" then tfv = tfv * 5 end
    if tfv ~= level.get_time_factor() then
    level.set_time_factor( tfv )
    wprintf(
        "[~T/~B]. #DBG: time factor restored to~C0D %f~C07 from:\n~C0A %s~C07",
        tfv, lua_traceback( "" )
    )
    end
end

function restore_coef() -- установка коэф. высыпаемости от предметов в слотах
    local act  = db.actor
    local coef = 1
    -- вещи в слотах мешают выспаться быстрее
    if act:item_in_slot( 1 )             then coef = coef * 0.93 end  -- левый слот
    if act:item_in_slot( 2 )             then coef = coef * 0.93 end  -- правый слот
    if act:item_in_slot( 6 )             then coef = coef * 0.90 end  -- броня
    if get_shadow_inv():update_storage() then coef = coef * 0.90 end  -- рюкзак
    if sleep_in_sleeping_bag == 1        then coef = coef * 0.83 end  -- сон без спальника
    if nlc_vars.rad_disease              then coef = coef * 0.83 end  -- ГГ заболел
    return coef
end

function relaxation( treshold ) -- убирание сонливости во время сна
    -- время самого долгого сна: 10 часов. = 600 минут
    -- надо сбить единиц сонливости: 240-~300
    treshold   = treshold or 1.0
    local time = sleep_minutes()
    local sub  = ( time - sleep_time ) / 2
    if time > 0 then
        wprintf("[~T]. #DBG(relaxation): time =~C0D %d~C07, sub =~C0D %d~C07", time, sub)
    else
        sleep_timer:dump()
    end
    if sub < treshold then return get_sleepiness() end
    sleep_time       = time
    local coef       = restore_coef()
    local sleepiness = math.max( 0, get_sleepiness() - sub * coef )
    params.tiredness_add()
    wprintf(
        "[~T/~B].~C0B #DBG: sleep_time =~C0D %d~C0B, decreasing sleepiness~C0D %.1f~C0B with value~C0D %.1f~C0B, coef =~C0D %.3f~C07",
        time, sleepiness, sub, coef
    )
    change_sleepiness( sleepiness )
    return sleepiness
end

function test_enough_sleep()  -- пора ли просыпаться?
    if not sleeping then return end
    local time = sleep_minutes()
    if
        time >= 13 * 60
        or (
            get_sleepiness() > 0 and relaxation( 1 ) <= 0
        )
    then
        -- сны смотрим под самое восстановление сил
        schedule.add( "show_dream", "sleep_manager.show_dream()", 20 )
    end
    if get_sleepiness() <= 0 then
        reset_tf()
        schedule.add( "stop_sleep", "sleep_manager.stopper()", 1000 )
    end
end

function starter( scale )  -- старт сна ГГ
    if scale > 1000 then scale = 1000 end
    wprintf( "[~T]. #DBG: sleep_manager.starter executed from:\n~C0A %s~C07", lua_traceback( "  " ) )
    if
        lua_random() < ( 0.04 * scale )              -- рандом < 0.04*кол-во часов
        -- and ( balance.config.name ~= "light" )    -- на лайте не обворовывают во сне
        and get_shadow_inv():update_storage()        -- не скинут рюкзак
    then
        sak.sleep_robbing()                          -- обворовывание
    end
    --local rf = lua_random() - 0.5
    -- за 10 секунд желательно проспать до 600 минут
    -- в одну секунду получается 20 минут, порядка 1 минуты за кадр
    local factor = 2500 * scale
    --local diff   = level.get_game_difficulty()
    game.start_tutorial( "time_scaling" )
    if magic_sleep then
        wprintf( "[~T]. #DBG: magic sleep activated with scale~C0D %f~C07", scale )
    else
        AddRegularTask( "test_enough_sleep", sleep_manager.test_enough_sleep, sleep_manager, 0, 20 )
        vergas_watch.g_watch:on_sleep_start()
    end
    level.add_pp_effector( "teleport.ppe", 2006, false )
    level.add_pp_effector( "black_q.ppe",  1234, true  )
    level.set_time_factor( factor )
    sleep_timer:elapsed( true )
    sleep_timer:save()
    wprintf(
        "[~T/~B]. #DBG: actor before sleep, sleepiness =~C0D %.1f~C07, health =~C0D %.4f~C07, satiety =~C0D %.7f~C07",
        get_sleepiness(), db.actor.health, params.actor_satiety_health()
    )
end

function dreamer()  -- функция вызывается из ui_movies.xml
    -- wprintf("[~T/~B].~CF0 #DBG: dreamer called from:~C0A\n %s~C07", lua_traceback("", 1))
end

function show_dream()    -- показать сон инвалиду
    reset_tf()
    if sak.cats_near() then
        sleep_manager.stopper()
        return
    end
    level.remove_pp_effector( 1234 )
    if sleep_manager.is_sleep_active() then
        -- local dream = dream.sleep_video_name_callback()
        -- if dream ~= "" then
        --     game.start_tutorial( dream )
        -- else
            game.start_tutorial( "without_dream" )
        -- end
    end
end

function stopper()    -- конец сна, просыпание
    RemoveRegularTask( "test_enough_sleep" )
    if not is_sleep_active() then
        wprintf( "[~T].~C0C #ERROR:~C07 sleep stopper executed, but actor not sleeping" )
        return
    end
    magic_sleep = false
    relaxation( 0.01 )
    reset_tf()
    level.remove_pp_effector( 1234 )
    ar_sleep.disable_scheme()
    local elapsed = sleep_minutes() / 60.0  -- сколько прошло часов, во время сна
    if not db.actor:alive() then
        --
    else
        level.add_cam_effector( "camera_effects\\prison_1.anm", 25, false, "" )
        level.add_cam_effector( "camera_effects\\hit_back_left.anm", 26, false, "" )
        level.add_pp_effector( "yantar_underground_psi.ppe", 2007, false )
        level.add_pp_effector( "total_recall.ppe", 2008, false )
        local snd_obj = xr_sound.get_safe_sound_object(
            [[characters_voice\human_01\stalker\states\breath\breath_2]]
        )
        snd_obj:play_no_feedback( db.actor, sound_object.s2d, 0, vector(), 15.0 )
        if sleeping_bag.set_flag_sleep( 1 ) then
            vergas_lib.s_play( [[device\sleeping_bag\sleep_bag_up]] )
            sleeping_bag.set_flag_sleep( 2 )
        end
        wprintf(
            "[~T]. #DBG: sleep_hours =~C0D %.3f~C07, sleepiness =~C0D %.1f~C07 ",
            elapsed, get_sleepiness()
        )
        wprintf(
            "  actor health on awake =~C0D %.4f~C07, satiety=~C0D %.7f ~C07",
            db.actor.health, params.actor_satiety_health()
        )
    end
    level.enable_input()
    amk_mod.weather_manager()

    -- портим рюкзак: 1ч сна = 1% состояния
    if amk_mod.sleeping_bag_id ~= nil then
        local bag_obj = level.object_by_id(amk_mod.sleeping_bag_id)
        if bag_obj then
            local bag_cond     = params.get_condition( bag_obj, 0.9999 )
            local bag_new_cond = bag_cond - ( elapsed / 100 )
            if bag_new_cond > 0 then
                params.upd_condition( bag_obj, bag_new_cond )
            else
                misc.release_obj( bag_obj )
                sak.send_tip(
                    "Теперь только выкинуть",
                    "Спальный мешок совсем прохудился.",
                    5, 15, "g_g", "sak", "red"
                )
            end
            log2( "----------------------  SLEEPING BAG CHANGE CONDITION: %s  ->  %s  -----------------------", bag_cond, bag_new_cond )
        end
        amk_mod.sleeping_bag_id = nil
    end

    if ( amk_vars.blowout or 0 ) == 0 then
        savemgmt.on_wakeup()
        local name, delay = timers.check_timer( "blow_shift" )
        if not name then amk_mod.start_blow_timer() end
    end
    schedule.add( "restore_bio", "sleep_manager.end_sleeping()", 300 )
    get_shadow_inv():after_sleep()
    if
        elapsed > 5
        and sleep_in_sleeping_bag == 2
    then
        wprintf( "@-----------------  LONG SLEEP DETECTED  ----------------@" )
        params.health_add( 0.05 * elapsed )
        schedule.add( "try_rad_disease_heal", "test.try_rad_disease_heal()", 2000 )
    end

    sleep_in_sleeping_bag = 1
    sak_dialog.start_time( "start_antichit_time" )
    test.eternal_start()
end

sleep_manager.stopper = stopper

function end_sleeping()
    sleeping      = false
    sleep_blowout = true
    sak.reset_actor_bio()
    test_sleep_pp()
end

function hp_corrector( fr )
    if fr ~= 0 then
        hp = fr / 6 + db.actor.health
        if hp > 1 then hp = 1 end
        return
    elseif db.actor.health > hp then
        db.actor.health = hp - db.actor.health
    end
end

function is_sleep_active()
    local id = db.actor:id()
    local as = db.storage[ id ].active_scheme
    if sleeping or as == "ar_sleep" then return true end
    return false
end

function slip_mayat()  --вызывается из mike.script
    level.add_pp_effector( "red_teleport.ppe", 1525, false )
    level.add_cam_effector( "camera_effects\\dream_1.anm", 28, false, "" )
    level.add_cam_effector( "camera_effects\\prison_1.anm", 29, false, "" )
    local sound_obj_l = xr_sound.get_safe_sound_object( [[characters_voice\scenario\yantar\dream_talk_l]] )
    local sound_obj_r = xr_sound.get_safe_sound_object( [[characters_voice\scenario\yantar\dream_talk_r]] )
    local snd_obj     = xr_sound.get_safe_sound_object( [[device\pda\accent_1]] )
    snd_obj:play_no_feedback( db.actor, sound_object.s2d, 0, vector(), 1.0 )
    sound_obj_l:play_no_feedback( db.actor, sound_object.s2d, 0, vector():set( -1, 0, 1 ), 1.0 )
    sound_obj_r:play_no_feedback( db.actor, sound_object.s2d, 0, vector():set(  1, 0, 1 ), 1.0 )
    local i = nlc_vars.klyk_once
    if i == nil or i ~= 1 then
        db.actor:give_info_portion( "klyk_remember" )
        sak.info_klyk_remember()
        nlc_vars.klyk_once = 1
    end
end