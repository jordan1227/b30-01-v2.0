-----------------------------------------------------------------------------------------
-- Dream manager
-----------------------------------------------------------------------------------------
-- Author: Oleg Kreptul (Haron) haronk@ukr.net 2005
-----------------------------------------------------------------------------------------
can_sleep   = false
dream_prob  = -1
type        = "all"
dream_types = { all = 2 }

local def_global_regular_probability = 80
local def_regular_probability        = 2
local def_regular_type               = "normal"

-----------------------------------------------------------------------------------------
class "dream_mgr"
-----------------------------------------------------------------------------------------

function dream_mgr:__init()
    local ini     = ini_file( "misc\\dream.ltx" )
    self.regular  = nil
    self.scenario = {}
    if ini:section_exist( "dreams" ) then
        self.regular_probability = def_global_regular_probability
        if ini:line_exist( "dreams", "regular_probability" ) then
            local rp = ini:r_float( "dreams", "regular_probability" )
            if rp >= 0 or rp <= 100 then self.regular_probability = rp end
        end
        if ini:line_exist( "dreams", "dream_types" ) then
            local rt_str = ini:r_string( "dreams", "dream_types" )
            if rt_str then
                for rt in string.gfind( rt_str, "([%w_]+)" ) do dream_types[ rt ] = 1 end
            end
        end
        if ini:line_exist( "dreams", "regular" ) then
            self.regular = {}
            local rd_str = ini:r_string( "dreams", "regular" )
            if rd_str then
                for rd_sect in string.gfind( rd_str, "([%w_]+)" ) do
                    if ini:section_exist( rd_sect ) then
                        if ini:line_exist( rd_sect, "dream" ) then
                            local dream_path = ini:r_string( rd_sect, "dream" )
                            local prob       = def_regular_probability
                            local tp         = def_regular_type
                            if ini:line_exist( rd_sect, "probability" ) then
                                local p = ini:r_float( rd_sect, "probability" )
                                if p >= 0 then prob = p end
                            end
                            if ini:line_exist( rd_sect, "type" ) then
                                local t = ini:r_float( rd_sect, "type" )
                                if dream_types[ t ] == 1 then tp = t end
                            end
                            self.regular[ rd_sect ] = { dream_path, prob, tp }
                        end
                    end
                end
            end
        end
        if ini:line_exist( "dreams", "scenario" ) then
            self.scenario = {}
            local sd_str  = ini:r_string( "dreams", "scenario" )
            if sd_str then
                for sd_sect in string.gfind( sd_str, "([%w_]+)" ) do
                    if ini:section_exist( sd_sect ) then
                        if ini:line_exist( sd_sect, "dream" ) then
                            local dream_path = ini:r_string( sd_sect, "dream" )
                            if ini:line_exist( sd_sect, "cond" ) then
                                local cond = xr_logic.cfg_get_condlist( ini, sd_sect, "cond", self )
                                local to_regular = nil
                                if ini:line_exist( sd_sect, "to_regular" ) then
                                    local prob         = def_regular_probability
                                    local tp           = def_regular_type
                                    local tr           = ini:r_string( sd_sect, "to_regular" )
                                    local at, to, p, t = string.find( tr, "(%d+),(%w+)" )
                                    p = tonumber( p )
                                    if p then prob = p end
                                    if dream_types[ t ] == 1 then
                                        tp = t
                                    end
                                    to_regular = { prob, tp }
                                end
                                self.scenario[ sd_sect ] = { dream_path, cond, to_regular }
                            end
                        end
                    end
                end
            end
        end
    end
    if xr_build_id >= 5820 then ini:release() end
end

function dream_mgr:name()
    return "dream_mgr"
end

function dream_mgr:get_dream()
    local dream = nil
    for k, v in pairs( self.scenario ) do
        local c = xr_logic.pick_section_from_condlist( db.actor, self, v[ 2 ].condlist )
        if c == "true" or c == "" then
            dream = k
            break
        end
    end
    if not dream then
        local rval = lua_random( 100 )
        local rp = self.regular_probability
        if dream_prob >= 0 then rp = dream_prob end
        if rval < rp and dream_types[type] then
            local prob_power = 0
            for k, v in pairs( self.regular ) do
                if type == "all" or type == v[ 3 ] then
                    prob_power = prob_power + v[ 2 ]
                end
            end
            if prob_power > 0 then
                local cur_prob = 0
                rval = lua_random( prob_power )
                for k, v in pairs( self.regular ) do
                    if type == "all" or type == v[ 3 ] then
                        if rval < cur_prob + v[ 2 ] then
                            return v[ 1 ]
                        else
                            cur_prob = cur_prob + v[ 2 ]
                        end
                    end
                end
            end
        end
    else
        v = self.scenario[ dream ]
        if v[ 3 ] then
            self.regular[ dream ] = { v[ 1 ], v[ 3 ][ 1 ], v[ 3 ][ 2 ] }
            self.scenario[ dream ] = nil
        end
        return v[ 1 ]
    end
    return ""
end

local dream_manager = dream_mgr()

function can_sleep_callback()
    if can_sleep == true then
        return "can_sleep" -- registered keyword
    else
        return "cant_sleep_not_on_solid_ground"
    end
end

function sleep_video_name_callback()
    return dream_manager:get_dream()
end
