local item_by_community = {}
local item_dependence   = {}
local mul_by_level      = {}
local count_by_level    = {}
local always_keep_item  = {}
local ammo_sections     = {}
local death_ini         = ini_file( "misc\\death_generic.ltx" )

local always_offs_items = {
    "device_torch",
    "device_pda",
    "matches",
    "hand_radio",
    "guitar_a",
    "harmonica_a",
    "binocular_a",
    "wpn_knife",
    "wpn_binoc",
    "bolt",
    "grenade_",
    "ammo_",
    "bandage",
    "medkit",
    "antirad",
    "kolbasa",
    "conserva",
    "vodka",
    "suhpay",
    "repair_",
    "closer_box",
    "closer_inv",
    "energy_drink"
}

function init_drop_settings()
    for _, v in ipairs({
        "stalker", 
        "green", 
        "dolg", 
        "freedom", 
        "bandit", 
        "military", 
        "zombied", 
        "ecolog", 
        "killer", 
        "monolith", 
        "arena_enemy", 
        "actor_dolg" 
    }) do
        item_by_community[ v ] = {}
        if death_ini:section_exist( v ) then
            local n = death_ini:line_count( v )
            local id, value = "", ""
            for i = 0, n - 1 do
                result, id, value = death_ini:r_line( v, i, "", "" )
                if tonumber( value ) >= 0.4 then value = 0.2 end
                item_by_community[ v ][ id ] = 1000 * tonumber( value )
            end
        end
    end

    local n = death_ini:line_count( "item_dependence" )
    local id, value = "", ""
    for i = 0, n - 1 do
        result, id, value = death_ini:r_line( "item_dependence", i, "", "" )
        item_dependence[ id ] = {}
        local vvv = parse_names( value )
        for k, v in pairs( vvv ) do
            item_dependence[ id ][ v ] = true
        end
    end

    local lname = level.name()
    if not death_ini:section_exist( lname ) then lname = "default" end
    local n = death_ini:line_count( lname )
    local id, value = "", ""
    for i = 0, n - 1 do
        result, id, value  = death_ini:r_line( lname, i, "", "" )
        mul_by_level[ id ] = tonumber( value )
    end

    local item_count_section = "item_count_" .. level.get_game_difficulty()
    local n = death_ini:line_count( item_count_section )
    for i = 0, n - 1 do
        result, id, value = death_ini:r_line( item_count_section, i, "", "" )
        local t = parse_nums( value )
        if t[ 1 ] == nil then
            abort(
                "Error on [death_ini] declaration. Section [%s], line [%s]",
                item_count_section, tostring( id )
            )
        end
        local min, max = t[ 1 ], t[ 2 ]
        if max == nil then max = min end
        if mul_by_level[ id ] == nil then mul_by_level[ id ] = 0 end
        min = tonumber( min ) * mul_by_level[ id ]
        max = tonumber( max ) * mul_by_level[ id ]
        count_by_level[ id ] = { min = min, max = max }
    end

    local n = death_ini:line_count( "keep_items" )
    for i = 0, n - 1 do
        result, id, value = death_ini:r_line( "keep_items", i, "", "" )
        if value == "true" then always_keep_item[ id ] = true end
    end

    ammo_sections = {}
    local n = death_ini:line_count( "ammo_sections" )
    local id, value = "", ""
    for i = 0, n - 1 do
        result, id, value   = death_ini:r_line( "ammo_sections", i, "", "" )
        ammo_sections[ id ] = true
    end
end

---------------------------------------------------------------------------------

class "drop_manager"

function drop_manager:__init( npc )
  self.npc = npc
end

local sootv_outfit = {
    [ "stalker_bandit_1"               ] = "bandit_outfit", 
    [ "stalker_bandit_2"               ] = "bandit_outfit", 
    [ "stalker_bandit_3"               ] = "bandit_outfit", 
    [ "stalker_bandit_4"               ] = "bandit_outfit", 
    [ "stalker_bandit_5"               ] = "bandit_outfit", 
    [ "stalker_bandit_6"               ] = "bandit_outfit", 
    [ "stalker_bandit_7"               ] = "bandit_outfit", 
    [ "stalker_bandit_8"               ] = "bandit_gaz_outfit_m1", 
    [ "stalker_bandit_9"               ] = "bandit_outfit", 
    [ "stalker_bandit_drunk"           ] = "outfit_bandit_m1", 
    [ "stalker_bandit_veteran"         ] = "bandit_veteran_outfit",
    [ "stalker_bandit_borov"           ] = "bandit_master_outfit",
    [ "stalker_bandit_master"          ] = "bandit_master_outfit",
    [ "stalker_do_balon_1"             ] = "dolg_outfit",
    [ "stalker_do_balon_2"             ] = "dolg_outfit",
    [ "stalker_do_balon_3"             ] = "dolg_outfit",
    [ "stalker_do_balon_4"             ] = "dolg_outfit",
    [ "stalker_do_balon_5"             ] = "dolg_outfit",
    [ "stalker_do_balon_6"             ] = "dolg_outfit",
    [ "stalker_do_balon_7"             ] = "dolg_outfit",
    [ "stalker_do_balon_8"             ] = "dolg_outfit",
    [ "stalker_do_balon_80"            ] = "dolg_outfit",
    [ "stalker_do_antigas"             ] = "dolg_gaz_outfit_m1",
    [ "stalker_do_komandir"            ] = "outfit_dolg_m1",
    [ "stalker_do_nauchniy"            ] = "dolg_scientific_outfit",
    [ "stalker_ecolog"                 ] = "ecolog_outfit",
    [ "nauchniy_1"                     ] = "ecolog_outfit",
    [ "protect_suit2"                  ] = "ecolog_outfit",
    [ "stalker_ecolog_military"        ] = "protection_outfit",
    [ "stalker_chemical"               ] = "protection_outfit",
    [ "nauchniy_0"                     ] = "protection_outfit",
    [ "protect_suit1"                  ] = "protection_outfit",
    [ "stalker_ki_head_1"              ] = "outfit_killer_m1",
    [ "stalker_ki_head_2"              ] = "killer_outfit",
    [ "stalker_ki_head_5"              ] = "killer_outfit",
    [ "stalker_ki_antigas"             ] = "killer_gaz_outfit_m1",
    [ "stalker_ki_mask"                ] = "killer_gaz_outfit_m1",
    [ "stalker_ki_informator"          ] = "killer_gaz_outfit_m1",
    [ "stalker_ki_nauchniy"            ] = "merc_scientific_outfit",
    [ "stalker_militari_1"             ] = "military_outfit",
    [ "stalker_militari_antigas_1"     ] = "military_outfit",
    [ "stalker_militari_2"             ] = "militaryspec_outfit",
    [ "stalker_militari_antigas_2"     ] = "militaryspec_outfit",
    [ "stalker_military"               ] = "military_outfit",
    [ "stalker_military_green"         ] = "military_outfit",
    [ "stalker_military_black"         ] = "militaryspec_outfit",
    [ "soldier_bandana"                ] = "outfit_soldier_m1",
    [ "soldier_bandana_1"              ] = "outfit_soldier_m1",
    [ "soldier_bandana_2"              ] = "outfit_soldier_m1",
    [ "soldier_bandana_3"              ] = "outfit_soldier_m1",
    [ "soldier_bandana_4"              ] = "outfit_soldier_m1",
    [ "soldier_bandana_5"              ] = "outfit_soldier_m1",
    [ "soldier_bandana_6"              ] = "outfit_soldier_m1",
    [ "soldier_beret_1"                ] = "outfit_soldier_m1",
    [ "soldier_beret_2"                ] = "outfit_soldier_m1",
    [ "soldier_beret_3"                ] = "outfit_soldier_m1",
    [ "soldier_beret_4"                ] = "outfit_soldier_m1",
    [ "soldier_beret_5"                ] = "outfit_soldier_m1",
    [ "soldier_mask"                   ] = "outfit_soldier_m1",
    [ "soldier_obichniy"               ] = "outfit_soldier_m1",
    [ "stalker_soldier"                ] = "outfit_soldier_m1",
    [ "soldier_spetsnaz"               ] = "specops_outfit",
    [ "stalker_specops"                ] = "specops_outfit",
    [ "soldier_antigas"                ] = "specops_outfit",
    [ "stalker_neytral_balon_1"        ] = "stalker_outfit",
    [ "stalker_neytral_balon_2"        ] = "stalker_outfit",
    [ "stalker_neytral_balon_3"        ] = "stalker_outfit",
    [ "stalker_neytral_balon_4"        ] = "stalker_outfit",
    [ "stalker_neytral_balon_5"        ] = "stalker_outfit",
    [ "stalker_neytral_balon_6"        ] = "stalker_outfit",
    [ "stalker_neytral_balon_7"        ] = "stalker_outfit",
    [ "stalker_neytral_balon_8"        ] = "stalker_outfit",
    [ "stalker_neytral_hood_1"         ] = "stalker_outfit",
    [ "stalker_neytral_hood_2"         ] = "stalker_outfit",
    [ "stalker_neytral_hood_3"         ] = "stalker_outfit",
    [ "stalker_neytral_hood_4"         ] = "stalker_outfit",
    [ "stalker_neytral_hood_5"         ] = "stalker_outfit",
    [ "stalker_neytral_hood_6"         ] = "stalker_outfit",
    [ "stalker_neytral_hood_7"         ] = "stalker_outfit",
    [ "stalker_neytral_hood_8"         ] = "stalker_outfit",
    [ "stalker_neytral_hood_9"         ] = "neytral_gaz_outfit_m1",
    [ "stalker_neytral_rukzak_1"       ] = "stalker_outfit",
    [ "stalker_neytral_rukzak_2"       ] = "stalker_outfit",
    [ "stalker_neytral_rukzak_3"       ] = "stalker_outfit",
    [ "stalker_neytral_rukzak_4"       ] = "stalker_outfit",
    [ "stalker_neytral_rukzak_5"       ] = "stalker_outfit",
    [ "stalker_neytral_rukzak_6"       ] = "stalker_outfit",
    [ "stalker_neytral_rukzak_7"       ] = "stalker_outfit",
    [ "stalker_neytral_hood_uzor"      ] = "stalker_outfit",
    [ "stalker_neytral_nauchniy"       ] = "scientific_outfit",
    [ "stalker_scien"                  ] = "scientific_outfit",
    [ "stalker_prizrak"                ] = "outfit_stalker_m1",
    [ "stalker_bar_security"           ] = "stalker_guard_outfit",
    [ "green_stalker_1"                ] = "neytral_novice_outfit_m1",
    [ "green_stalker_2"                ] = "novice_outfit",
    [ "green_stalker_3"                ] = "novice_outfit",
    [ "green_stalker_4"                ] = "novice_outfit",
    [ "green_stalker_5"                ] = "neytral_novice_outfit_m1",
    [ "green_stalker_6"                ] = "novice_outfit",
    [ "green_stalker_7"                ] = "novice_outfit",
    [ "green_stalker_8"                ] = "novice_outfit",
    [ "green_stalker_9"                ] = "novice_outfit",
    [ "green_stalker_10"               ] = "neytral_novice_outfit_m1",
    [ "green_stalker_11"               ] = "neytral_novice_outfit_m1",
    [ "green_stalker_antigas"          ] = "neytral_novice_gaz_outfit_m1",
    [ "stalker_novice"                 ] = "novice_outfit",
    [ "stalker_zombie1"                ] = "bandit_outfit",
    [ "stalker_zombie2"                ] = "dolg_outfit",
    [ "zombie_fresh_1"                 ] = "dolg_outfit",
    [ "stalker_zombie3"                ] = "stalker_outfit",
    [ "stalker_zombie6"                ] = "stalker_outfit",
    [ "zombie_fresh_2"                 ] = "stalker_outfit",
    [ "stalker_zombie4"                ] = "killer_outfit",
    [ "stalker_zombie5"                ] = "stalker_guard_outfit",
    [ "stalker_zombie7"                ] = "novice_outfit",
    [ "stalker_zombie8"                ] = "neytral_novice_outfit_m1",
    [ "stalker_zombie_specnaz"         ] = "specops_outfit",
    [ "zombie_fresh_0"                 ] = "svoboda_heavy_outfit",
    [ "zombie_exoskeleton"             ] = "broken_exoskeleton",
    [ "stalker_sv_rukzak_1_1"          ] = "svoboda_light_outfit",
    [ "stalker_sv_rukzak_3"            ] = "svoboda_light_outfit",
    [ "stalker_svoboda_light"          ] = "svoboda_light_outfit",
    [ "stalker_sv_balon_1"             ] = "svoboda_heavy_outfit",
    [ "stalker_sv_rukzak_1"            ] = "svoboda_heavy_outfit",
    [ "stalker_sv_rukzak_2"            ] = "svoboda_heavy_outfit",
    [ "stalker_sv_rukzak_3_1"          ] = "svoboda_heavy_outfit",
    [ "stalker_sv_cook"                ] = "svoboda_heavy_outfit",
    [ "stalker_sv_max"                 ] = "svoboda_heavy_outfit",
    [ "stalker_svoboda_heavy"          ] = "svoboda_heavy_outfit",
    [ "stalker_sv_hood_91"             ] = "svoboda_gaz_outfit_m1",
    [ "stalker_sv_hood_9"              ] = "svoboda_heavy_gaz_outfit_m1",
    [ "stalker_sv_nauchniy"            ] = "freedom_scientific_outfit",
    [ "stalker_sv_leader"              ] = "outfit_svoboda_m1",
    [ "stalker_mo_head1"               ] = "monolit_outfit",
    [ "stalker_mo_head2"               ] = "monolit_outfit",
    [ "stalker_mo_head_1"              ] = "monolit_outfit",
    [ "stalker_monolit"                ] = "monolit_outfit",
    [ "stalker_mo_hood_9"              ] = "monolit_gaz_outfit_m1",
    [ "stalker_mo_nauchniy"            ] = "monolit_scientific_outfit",
    [ "stalker_mo_mask"                ] = "monolit_outfit",
    [ "brod"                           ] = "monolit_gaz_outfit_m1",
    [ "stalker_nebo_2"                 ] = "cs_heavy_outfit",
    [ "stalker_bandit_master_antigas"  ] = "bandit_master_outfit_gas",
    [ "stalker_bandit_veteran_antigas" ] = "bandit_veteran_outfit_gas",
    [ "sher"                           ] = "outfit_soldier_m1",
    [ "shram"                          ] = "bandit_master_outfit",
    [ "bar_informator"                 ] = "bandit_master_outfit",
    [ "stalker_vano"                   ] = "scientific_outfit",
    [ "deg"                            ] = "outfit_soldier_m1",
    [ "kovalsky"                       ] = "outfit_soldier_m1",
    [ "rogovec"                        ] = "outfit_soldier_m1",
    [ "zvez"                           ] = "bandit_veteran_outfit",
    [ "azot"                           ] = "scientific_outfit",
    [ "locman"                         ] = "stalker_outfit",
    [ "gonta"                          ] = "stalker_outfit",
    [ "zveroboy"                       ] = "stalker_outfit",
    [ "gavaec"                         ] = "stalker_outfit",
    [ "garik"                          ] = "stalker_outfit",
    [ "father_valeryan"                ] = "stalker_outfit",
    [ "novikov"                        ] = "cs_light_outfit",
    [ "serafim"                        ] = "militaryspec_outfit",
    [ "gavr"                           ] = "outfit_killer_m1",
    [ "brom"                           ] = "dolg_outfit",
    [ "luber"                          ] = "dolg_outfit",
    [ "stalker_zulus"                  ] = "dolg_scientific_outfit",
    [ "adrenalin"                      ] = "dolg_outfit",
    [ "kicenko"                        ] = "dolg_outfit",
    [ "semenov"                        ] = "protection_outfit",
    [ "nauchniy_mil"                   ] = "ecolog_outfit",
    [ "shurup"                         ] = "svoboda_heavy_outfit",
    [ "tambov"                         ] = "stalker_outfit",
    [ "klyk"                           ] = "stalker_outfit",
    [ "ugrum"                          ] = "svoboda_heavy_outfit",
    [ "mongol"                         ] = "bandit_outfit",
    [ "maxluber"                       ] = "dolg_outfit",
    [ "master"                         ] = "bandit_master_outfit",
    [ "veteran"                        ] = "bandit_veteran_outfit",
    [ "lohmat"                         ] = "dolg_outfit"
}

function drop_manager:create_release_item()
    if self.npc == nil then return end
    local nname = self.npc:name()
    if nname == "esc_exit_bandit_1" or nname == "esc_exit_bandit_2" then return end
    local lname = level.name()
    if
           lname == "l12u_sarcofag"
        or lname == "l12_stancia_new"
        or lname == "l12_stancia_2_new"
        or lname == "l12u_control_monolith"
    then 
        return
    end
    local se_obj = alife():object( self.npc:id() )
    if se_obj == nil then return end
    if se_obj.death_droped == true then return end
    se_obj.death_droped = true
    self.npc:iterate_inventory( keep_item, self.npc )
    local ini = self.npc:spawn_ini()
    if ini and ini:section_exist( "dont_spawn_loot" ) then return end
    local spawn_items = item_by_community[ self.npc:character_community() ]    
    if spawn_items then
        for k, v in pairs( spawn_items ) do
            if check_item_dependence( self.npc, k ) == true then
                local number = math.ceil( lua_random( count_by_level[ k ].min, count_by_level[ k ].max ) )
                create_items( self.npc, k, number, v )
            end
        end
    end
    if
        self.npc:story_id() ~= nil
        and (
                self.npc:story_id() ~= NONE_CL_SID
                and self.npc:story_id() ~= NONE_SID
            )
    then
        return
    else
        local otf
        local sect = nil
        local pk   = get_netpk( se_obj, 1 )
        local t    = pk:get()
        if t ~= nil then
            local vis = t.visual_name
            vis = amk.str_explode( "\\", vis )
            vis = vis[ 3 ]
            if vis then sect = sootv_outfit[ vis ] end
            if sect ~= nil then 
                otf = create_items( self.npc, sect, 1, 150 )
                local cond = ( lua_random( 30, 45 ) ) / 100 
                if otf then
                    wprintf(
                        "{#EDIT_BY_ALLCORE}[%s.script(375)]: Spawn outfit (section = %s, id = %d, condition = %.2f) to npc (name = %s, community = %s, id = %d, story_id = %d) on level (%s)",
                        script_name(), sect, misc.get_object_id( otf ), cond,
                        self.npc:name(), self.npc:character_community(), self.npc:id(),
                        self.npc:story_id() ,level.name()
                    )
                    misc.process_spawn()
                    local _outfit = client_obj( misc.get_object_id( otf ) )
                    if _outfit then
                        _outfit:set_condition( cond )
                        local pk       = get_netpk( _outfit, 1 )
                        local data     = pk:get()
                        data.condition = cond
                        pk:set( data )
                        local code = sprintf(
                            "params.upd_condition(%d,%.2f)",
                            misc.get_object_id( _outfit ), cond
                        )
                        schedule.add(
                            "drop_outfit_condition_" .. misc.get_object_id( _outfit ), code, 200
                        )
                        data, pk = nil, nil               
                    end
                end  
            end
        end
    end
end

local npc_cond = {
    [ "military" ] = 50,
    [ "killer"   ] = 60,
    [ "monolith" ] = 45,
    [ "zombied"  ] = 42,
    [ "stalker"  ] = 60,
    [ "dolg"     ] = 65,
    [ "bandit"   ] = 55,
    [ "ecolog"   ] = 45,
    [ "stranger" ] = 80,
    [ "trader"   ] = 80,
    [ "sniper"   ] = 80,
    [ "green"    ] = 40,
    [ "freedom"  ] = 60
}

function keep_item( npc, item )
    local npc_community = npc:character_community()
    if item == nil or alife():object( item:id() ) == nil then return end
    if npc  == nil then return end
    local nname = npc:name()
    if
           nname == "esc_stalker"
        or nname == "dsc_stalker_corps1_03"
        or nname == "x16_stalker_pseudo_ghost"
    then
        return
    end
    local section = item:section()
    if section == "bolt" then return false end
    if always_keep_item[ section ] == true then return true end
    local item_id = item:id()
    local kond1   = 10 + math.floor( npc:rank() / 50 )
    local kond2   = npc_cond[ npc_community ]
    local item_in_slot
    if kond1 > 40 then kond1 = 40 end
    for i = 1, 2 do
        item_in_slot = npc:item_in_slot( i )
        if item_in_slot ~= nil and item_in_slot:id() == item_id then
            if section == "wpn_gauss_auto" or section == "wpn_gauss" then
                misc.release_obj( item_in_slot:id(), 'death' )
                alife():create(
                    section .. "_model", npc:position(),
                    npc:level_vertex_id(), npc:game_vertex_id()
                )
            else
                if section == "wpn_mp5_m1" then kond1, kond2 = 55, 67 end
                item:unload_magazine()
                item:set_condition( lua_random( kond1, kond2 ) / 100 )
                return true
            end
        end
    end

    item_in_slot = npc:active_item()
    if item_in_slot ~= nil and item_in_slot:id() == item_id then
        if section == "wpn_mp5_m1" then kond1, kond2 = 55, 67 end
        item:set_condition( lua_random( kond1, kond2 ) / 100 )
        return true
    end
    local item_slot_1 = npc:item_in_slot( 1 )
    local item_slot_2 = npc:item_in_slot( 2 )
    if
        str_in_tab( section, always_offs_items )
        or strposx( section, "outfit" )
        or (
                strposx( section, "wpn_" )
                and (
                           ( item_in_slot ~= nil and item_in_slot:id() ~= item_id )
                        or ( item_slot_1  ~= nil and item_slot_1:id()  ~= item_id )
                        or ( item_slot_2  ~= nil and item_slot_2:id()  ~= item_id )
                    )

            )
    then
        alife():release( alife():object( item:id() ), true )
        return true
    end
    if
        string.find( section, "kolbasa" )
        or section == "bread"
        or string.find( section, "^mutant_" )
    then
        item:set_condition( lua_random( 30, 85 ) / 100 )
    end
end

function create_items( npc, section, number, rnd )
    if npc == nil then return end
    local nname = npc:name()
    if
           nname == "esc_stalker"
        or nname == "gar_stalker"
        or nname == "esc_stalker_corpse" 
        or nname == "leshyi"
        or nname == "gar_stalker_0003"
        or nname == "rostok_dead_stalker_01"
        or nname == "rostok_dead_stalker_03"
        or nname == "bar_ecolog_crush_dead"
        or nname == "bar_ecolog_crush_dead_0000"
        or nname == "bar_ecolog_crush_dead_0001"
        or nname == "ecolog_body_1"
        or nname == "ecolog_body_2"
        or nname == "bar_ecolog_crush_dead_0002"
    then
        return
    end
    if ammo_sections[ section ] == true then
        if number > 0 then
            se_respawn.create_ammo(
                section, npc:position(), npc:level_vertex_id(),
                npc:game_vertex_id(), npc:id(), number
            )
        end
    else
        for i = 1, number do
            if lua_random( 1000 ) <= rnd then
                if
                    strposx( section, "af_" )
                    and not str_in_tab(
                        section,
                        { "af_unknown_", "af_dummy_", "_dyn", "_new" }
                    )
                then 
                    local b = lua_random( 1, 4 )
                    section = section .. "_dyn" .. b .. "d"
                end
                if  section ~= "device_pda_npc" then
                    return alife():create(
                        section, npc:position(), npc:level_vertex_id(),
                        npc:game_vertex_id(), npc:id()
                    )
                elseif
                    npc:story_id()
                    and npc:story_id() == NONE_CL_SID
                    or  npc:story_id() == NONE_SID
                then
                    local obj = alife():create(
                        section, npc:position(), npc:level_vertex_id(),
                        npc:game_vertex_id(), npc:id()
                    )
                    if obj then
                        local status_pda = vergas_pda.set_status_pda() or 3
                        vergas_pda.add_tbl_pda(
                            npc:id(), obj.id, status_pda
                        )
                        misc.process_spawn()
                        test.set_pda_condition( obj.id, status_pda )
                    end
                end
            end
        end
    end
end

function check_item_dependence( npc, section )
    if npc == nil then return end
    if item_dependence[ section ] == nil then return true end
    local d_flag = true
    for k, v in pairs( item_dependence[ section ] ) do
        local obj = npc:object( k )
        if obj ~= nil and npc:marked_dropped( obj ) ~= true then
            return true
        end
        d_flag = false
    end
    return d_flag
end