----------------------------------------------------------------------------------------------------
-- Physic objects binding
----------------------------------------------------------------------------------------------------
-- Разработчик: Evgeniy Negrobov(Jon) jon@gsc-game.kiev.ua
-- Доработки: Andrey Fidrya(Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------
function init( obj )
    local ini = obj:spawn_ini()
    if ini and ini:section_exist( "animation" ) then
        -- obj:bind_object(handing_lamp_binder(obj))
        -- abort("object '%s': animation section is deprecated, use logic + impulse combination",obj:name())
        return
    end
    if not ini or not ini:section_exist( "logic" ) then
        if ini and not ini:section_exist( "drop_box" ) then
            if obj:clsid() ~= clsid.projector then return end
        end
    end
    db.storage[ obj:id() ] = {}
    local new_binder = generic_physics_binder( obj )
    obj:bind_object( new_binder )
end

----------------------------------------------------------------------------------------------------
class "generic_physics_binder"( object_binder )
----------------------------------------------------------------------------------------------------

function generic_physics_binder:__init( obj )
    super( obj )
    self.initialized = false
    self.loaded = false
end

function generic_physics_binder:reload( section )
    object_binder.reload( self, section )
end

function generic_physics_binder:reinit()
    object_binder.reinit( self )
    db.storage[ self.object:id() ] = {}
    self.st = db.storage[self.object:id()]
    if self.object.interface and self.object.interface.class_name == "CCar" then
        self.health = self.object:get_car() and self.object:get_car():GetfHealth()
    else
        if self.object.is_live then
            self.health = self.object.health
        else
            self.health = 0
        end
    end
end

function generic_physics_binder:update( delta )
    object_binder.update( self, delta )
    if not self.initialized and db.actor then
        self.initialized = true
        xr_logic.initialize_obj(
			self.object, self.st, self.loaded, db.actor, modules.stype_item
		)
        -- ' Запускаем ассоциированный с объектом партикл.
        local particle = utils.cfg_get_string(
            self.st.ini, self.st.section_logic,	"particle",
			self.object, false,	"",	nil
        )
        if particle ~= nil then
            self.particle = particles_object( particle )
            self.particle:play_at_pos( self.object:position() )
        end
        -- ' Дизаблим ассоциированный с объектом граф
        local graph_point_marker = utils.cfg_get_string(
            self.st.ini, self.st.section_logic, "graph_point_marker",
            self.object, false, "", nil
        )
        if graph_point_marker ~= nil then
            self.disable_graph_point = patrol( graph_point_marker ):game_vertex_id( 0 )
            game_graph():accessible( self.disable_graph_point, false )
            -- printf("GRAPH POINT DISABLED")
        end
    end
    if
		self.st.active_section ~= nil
		or 	(
				self.object:spawn_ini() ~= nil
				and self.object:spawn_ini():section_exist( "drop_box" ) == true
			)
	then
        xr_logic.issue_event( self.object, self.st[ self.st.active_scheme ], "update", delta )
        self.object:set_callback( callback.hit, generic_physics_binder.hit_callback, self )
        self.object:set_callback( callback.death, generic_physics_binder.death_callback, self )
        self.object:set_callback( callback.use_object, generic_physics_binder.use_callback, self )
        -- для бтра hit_callback не вызывается. заткнём эту дырку.
        if self.health and not self.nofixonhit then
            local health = self.object:get_car() and self.object:get_car():GetfHealth()
            if health then
                if self.health - health > 0.00001 then
                    -- amk.mylog("health decrease for "..self.object:name())
                    -- self.health=health                 -- БТР, попробуй-ка неуязвимым стать!
                    -- а может и раскоментировать взад? так как в конфиге иммун поправлен?
                    self:hit_callback(
                        self.object, self.health - health,
						vector():set( 1, 0, 0 ), db.actor, 0
                    )
                    self.nofixonhit = nil
                end
            end
        end
    else
        --		self.callbackset=false
    end
end

function generic_physics_binder:net_spawn( data )
    if not object_binder.net_spawn( self, data ) then return false end
    if self.object:clsid() == clsid.projector then db.add_sl( self.object ) end
    if self.object and self.object:spawn_ini() ~= nil and
        self.object:spawn_ini():section_exist( "drop_box" ) == true then
        self.box_items = xr_box.ph_item_box( self.object )
    end
    amk.on_net_spawn( self.object )
    return true
end

function generic_physics_binder:net_destroy()
    local st = db.storage[ self.object:id() ]
    if st.active_scheme then
        xr_logic.issue_event( self.object, st[ st.active_scheme ], "net_destroy" )
    end
    if self.particle ~= nil then self.particle:stop() end
    db.del_sl( self.object )
    db.storage[ self.object:id() ] = nil
    object_binder.net_destroy( self )
end

function generic_physics_binder:net_save_relevant()
    return true
end

function generic_physics_binder:save( packet )
    object_binder.save( self, packet )
    xr_logic.save_obj( self.object, packet )
end

function generic_physics_binder:load( reader )
    self.loaded = true
    object_binder.load( self, reader )
    xr_logic.load_obj( self.object, reader )
end

function generic_physics_binder:use_callback( obj, who )
    if self.st.active_section then
        xr_logic.issue_event(
			self.object, self.st[ self.st.active_scheme ], "use_callback", obj, who
		)
    end

    local sec = obj:section()
    if sec_confirm( sec ) == true then
        test.remove_box_protection( obj:name() )
        --bind_physic_object.sch_set_counter( obj:id() )
    end

    amk.on_use( obj, who )
end

function generic_physics_binder:hit_callback( obj, amount, local_direction, who, bone_index )
    local actor = db.actor
    amk.on_ph_obj_hit( obj, amount, local_direction, who, bone_index )
    self.nofixonhit = true
    if self.st.ph_on_hit then
        xr_logic.issue_event(
            self.object, self.st.ph_on_hit, "hit_callback",
			obj, amount, local_direction, who, bone_index
        )
    end
    if self.st.active_section then
        xr_logic.issue_event(
            self.object, self.st[ self.st.active_scheme ], "hit_callback",
			obj, amount, local_direction, who, bone_index
        )
    end
    --------------  но из РПГ пусть даже неуязвимый БТР убивается  -------------------
    if obj:clsid() == CLID_VEHICLE_BTR then
        if actor then
            local active_item = actor:active_item()
            if active_item and active_item:section() == "wpn_rpg7" then
                obj:kill( actor )
            else
                obj:get_car():SetfHealth( 1 )
            end
        end
    end
    --------------- повреждение ножа при ковырянии всякого ковыряемого ---------------
    if strposx( obj:section(), "physic_destroyable" ) then
        if who and who:id() == 0 then
            local active_item = db.actor:active_item()
            local active_sect = active_item:section()
            if active_item and strposx( active_sect, "wpn_knife" ) then
                local damage = 0.005
                if active_sect == "wpn_knife_m1" then damage = damage * 0.5 end
                local cond = params.get_condition( active_item, 0.999 )
                if cond > 0.02 then
                    params.add_condition( active_item, -damage )
                    -- local new_cond = params.get_condition( active_item, 0.999 )
                    -- log2( "@----------  DAMAGE TO ACTIVE KNIFE: old_cnd = %s, new_cnd = %s", cond, new_cond )
                else
                    misc.release_obj( active_item )
                    sak.send_tip(
                        "Амба ножику, похоже...", "Да что ж такое!",
						5, 20, "uniq", "sak", "red"
                    )
                end
            end
        end
    end
end

function generic_physics_binder:death_callback( victim, who )
    -- printf("_bp: generic_physics_binder:death_callback: obj='%s'", victim:name())
    if self.st.active_section then
        xr_logic.issue_event(
            self.object, self.st[ self.st.active_scheme ],
			"death_callback", victim, who
		)
    end
    if self.particle ~= nil then self.particle:stop() end
    if self.disable_graph_point ~= nil then
        game_graph():accessible( self.disable_graph_point, true )
    end
    if
		self.object:spawn_ini() ~= nil
		and self.object:spawn_ini():section_exist( "drop_box" ) == true
	then
		self.box_items:spawn_items()
	end
end

function sec_confirm( sec )
    return sec == "inventory_box"
    or sec == "rukzak_inventory_box"
    or sec == "rucksack"
end

