
List of the classes exported to LUA

C++ class entity_memory_object : memory_object {
 property			last_level_time;
 property			level_time;
 property			object_info;
 property			self_info;
    
    function object(const entity_memory_object&);
};

C++ class game_memory_object : memory_object {
 property			last_level_time;
 property			level_time;
 property			object_info;
 property			self_info;
    
    function object(const game_memory_object&);
};

C++ class fcolor {
 property			a                        (number);
 property			b                        (number);
 property			g                        (number);
 property			r                        (number);
    
    fcolor ();
    
    function mul_rgb(number);
    function set(number, number, number, number);
    function set(const fcolor&);
    function set(number);
};

C++ class flags16 {
    flags16 ();
    
    function zero();
    function assign(const flags16&);
    function assign(number);
    function is(flags16*, number);
    function and(number);
    function and(const flags16&, number);
    function equal(flags16*, const flags16&);
    function equal(flags16*, const flags16&, number);
    function test(flags16*, number);
    function is_any(flags16*, number);
    function or(number);
    function or(const flags16&, number);
    function one(flags16*);
    function set(flags16*, number, boolean);
    function invert();
    function invert(const flags16&);
    function invert(number);
    function get();
};

C++ class flags32 {
    flags32 ();
    
    function zero();
    function assign(const flags32&);
    function assign(number);
    function is(flags32*, number);
    function and(number);
    function and(const flags32&, number);
    function equal(flags32*, const flags32&);
    function equal(flags32*, const flags32&, number);
    function test(flags32*, number);
    function is_any(flags32*, number);
    function or(number);
    function or(const flags32&, number);
    function one();
    function set(flags32*, number, boolean);
    function invert();
    function invert(const flags32&);
    function invert(number);
    function get();
};

C++ class matrix {
 property			_14_                     (number);
 property			_24_                     (number);
 property			_34_                     (number);
 property			_44_                     (number);
 property			c                        (vector);
 property			i                        (vector);
 property			j                        (vector);
 property			k                        (vector);
    
    matrix ();
    
    function mk_xform(const struct _quaternion<number>&, const vector&);
    function setRotation(matrix*, SRotation*);
    function set(const matrix&);
    function set(const vector&, const vector&, const vector&, const vector&);
    function getRotation(matrix*);
    function mul_43(const matrix&, const matrix&);
    function identity();
    function setHPB(number, number, number);
    function getXYZ(matrix*);
    function mul(const matrix&, const matrix&);
    function mul(const matrix&, number);
    function mul(number);
    function getHPB(matrix*, number&, number&, number&);
    function setXYZi(number, number, number);
    function setXYZ(number, number, number);
    function transform_tiny(vector&) const;
    function transform_tiny(vector&, const vector&) const;
    function div(const matrix&, number);
    function div(number);
    function transpose();
    function transpose(const matrix&);
};

C++ class Irect {
 property			bottom                   (number);
 property			height                   (number);
 property			left                     (number);
 property			lt                       (Ivector2);
 property			rb                       (Ivector2);
 property			right                    (number);
 property			top                      (number);
 property			width                    (number);
 property			x1                       (number);
 property			x2                       (number);
 property			y1                       (number);
 property			y2                       (number);
    
    Irect ();
    
    function set(number, number, number, number);
};

C++ class Frect {
 property			bottom                   (number);
 property			height                   (number);
 property			left                     (number);
 property			lt                       (Fvector2);
 property			rb                       (Fvector2);
 property			right                    (number);
 property			top                      (number);
 property			width                    (number);
 property			x1                       (number);
 property			x2                       (number);
 property			y1                       (number);
 property			y2                       (number);
    
    Frect ();
    
    function set(number, number, number, number);
};

C++ class Ivector2 {
 property			x                        (number);
 property			y                        (number);
    
    Ivector2 ();
    
    function set(number, number);
    function set(const Ivector2&);
};

C++ class Fvector2 {
 property			x                        (number);
 property			y                        (number);
    
    Fvector2 ();
    
    function set(number, number);
    function set(const Fvector2&);
};

C++ class Ivector {
 property			x                        (number);
 property			y                        (number);
 property			z                        (number);
    
    Ivector ();
    
    function sub(number);
    function sub(const Ivector&);
    function sub(const Ivector&, const Ivector&);
    function sub(const Ivector&, number);
    function mul(number);
    function mul(const Ivector&);
    function mul(const Ivector&, const Ivector&);
    function mul(const Ivector&, number);
    function min(const Ivector&);
    function min(const Ivector&, const Ivector&);
    function set(number, number, number);
    function set(const Ivector&);
    function max(const Ivector&);
    function max(const Ivector&, const Ivector&);
    function div(number);
    function div(const Ivector&);
    function div(const Ivector&, const Ivector&);
    function div(const Ivector&, number);
    function invert();
    function invert(const Ivector&);
    function add(number);
    function add(const Ivector&);
    function add(const Ivector&, const Ivector&);
    function add(const Ivector&, number);
};

C++ class vector {
 property			x                        (number);
 property			y                        (number);
 property			z                        (number);
    
    vector ();
    
    function set_length(number);
    function sub(number);
    function sub(const vector&);
    function sub(const vector&, const vector&);
    function sub(const vector&, number);
    function reflect(const vector&, const vector&);
    function slide(const vector&, const vector&);
    function average(const vector&);
    function average(const vector&, const vector&);
    function normalize_safe();
    function normalize_safe(const vector&);
    function normalize();
    function normalize(const vector&);
    function align();
    function magnitude() const;
    function getP() const;
    function max(const vector&);
    function max(const vector&, const vector&);
    function distance_to_xz(const vector&) const;
    function invert();
    function invert(const vector&);
    function mad(const vector&, number);
    function mad(const vector&, const vector&, number);
    function mad(const vector&, const vector&);
    function mad(const vector&, const vector&, const vector&);
    function clamp(const vector&);
    function clamp(const vector&, vector);
    function inertion(const vector&, number);
    function crossproduct(const vector&, const vector&);
    function set(number, number, number);
    function set(const vector&);
    function abs(const vector&);
    function div(number);
    function div(const vector&);
    function div(const vector&, const vector&);
    function div(const vector&, number);
    function dotproduct(const vector&) const;
    function getH() const;
    function min(const vector&);
    function min(const vector&, const vector&);
    function similar(const vector&, number) const;
    function distance_to(const vector&) const;
    function lerp(const vector&, const vector&, number);
    function distance_to_sqr(const vector&) const;
    function mul(number);
    function mul(const vector&);
    function mul(const vector&, const vector&);
    function mul(const vector&, number);
    function setHP(number, number);
    function add(number);
    function add(const vector&);
    function add(const vector&, const vector&);
    function add(const vector&, number);
};

C++ class spawn_story_ids {
    const INVALID_SPAWN_STORY_ID = -1;
    
};

C++ class story_ids {
    const INVALID_STORY_ID = -1;
    const Invalid = 65535;
    const Sak = 9501;
    const aes_exit_to_pripyat = 6001;
    const aes_explosive_dinamit = 1101;
    const aes_inventory_box_0001 = 88;
    const aes_klyk = 87;
    const aes_spec_hran = 2236;
    const aes_spec_monolith_01 = 7501;
    const aes_spec_monolith_02 = 7502;
    const aes_spec_monolith_03 = 7503;
    const aes_spec_monolith_04 = 7504;
    const aes_spec_monolith_05 = 7505;
    const aes_spec_monolith_06 = 7506;
    const aes_spec_monolith_07 = 7507;
    const aes_spec_monolith_08 = 7508;
    const aes_spec_monolith_09 = 7509;
    const aes_spec_monolith_10 = 7510;
    const aes_spec_monolith_11 = 7511;
    const aes_spec_monolith_12 = 7512;
    const aes_spec_monolith_13 = 7513;
    const aes_spec_monolith_14 = 7514;
    const aes_spec_monolith_15 = 7515;
    const aes_spec_monolith_16 = 7516;
    const aes_spec_monolith_17 = 7517;
    const aes_spec_monolith_18 = 7518;
    const aes_spec_monolith_19 = 7519;
    const aes_spec_monolith_20 = 7520;
    const aes_spec_monolith_21 = 7521;
    const aes_spec_monolith_22 = 7522;
    const aes_spec_monolith_23 = 7523;
    const aes_spec_monolith_24 = 7524;
    const aes_spec_monolith_25 = 7525;
    const aes_spec_monolith_26 = 7526;
    const aes_spec_monolith_27 = 7527;
    const aes_spec_monolith_28 = 7528;
    const aes_spec_monolith_29 = 7529;
    const agr2_bandit_st = 3003;
    const agr_captains_chamber_location = 306;
    const agr_collector_entrance1 = 311;
    const agr_collector_entrance2 = 312;
    const agr_collector_entrance3 = 313;
    const agr_collector_entrance4 = 314;
    const agr_collector_entrance5 = 315;
    const agr_collector_entrance6 = 316;
    const agr_factory_location = 320;
    const agr_factory_skirmish1_location = 303;
    const agr_gunslinger_collector_entrance = 301;
    const agr_helicopter2 = 393;
    const agr_inventory_box = 2011;
    const agr_inventory_box_0000 = 5065;
    const agr_inventory_box_0001 = 5066;
    const agr_inventory_box_0002 = 5067;
    const agr_inventory_box_0003 = 5068;
    const agr_inventory_box_0004 = 5069;
    const agr_inventory_box_0005 = 5070;
    const agr_inventory_box_0006 = 5071;
    const agr_inventory_box_0007 = 5073;
    const agr_inventory_box_0008 = 5075;
    const agr_inventory_box_0009 = 5072;
    const agr_inventory_box_0010 = 5074;
    const agr_inventory_box_0011 = 5076;
    const agr_inventory_box_0012 = 5077;
    const agr_inventory_box_0013 = 5078;
    const agr_inventory_box_0014 = 5079;
    const agr_inventory_box_0015 = 5080;
    const agr_inventory_box_0016 = 5081;
    const agr_inventory_box_0017 = 5083;
    const agr_inventory_box_0018 = 5084;
    const agr_inventory_box_0019 = 5085;
    const agr_inventory_box_0020 = 5086;
    const agr_inventory_box_0021 = 5087;
    const agr_inventory_box_0022 = 5089;
    const agr_inventory_box_0024 = 5088;
    const agr_inventory_box_0025 = 5090;
    const agr_inventory_box_0026 = 5091;
    const agr_inventory_box_0027 = 5092;
    const agr_inventory_box_0028 = 2010;
    const agr_inventory_box_0029 = 9068;
    const agr_inventory_box_sak = 9115;
    const agr_kirpich = 9537;
    const agr_klyk_med_spot1 = 9301;
    const agr_klyk_med_spot2 = 9302;
    const agr_klyk_med_spot3 = 9303;
    const agr_korovan_zone = 9198;
    const agr_krot = 302;
    const agr_muller = 9517;
    const agr_nii_space_restrictor = 321;
    const agr_pda_luber = 9802;
    const agr_quest_case_02 = 300;
    const agr_ratcatcher = 370;
    const agr_spec_hran = 2282;
    const agr_swamp_spot = 304;
    const agr_u_spec_hran = 2283;
    const agr_und_inventory_box = 9122;
    const amk_mini_bar_kulinar = 9509;
    const amk_mini_bar_voron = 9510;
    const art_exchanger = 612;
    const art_exchanger2 = 611;
    const assistant = 9520;
    const assistant2 = 9525;
    const aver_inventory_box_0002 = 2300;
    const aver_klyk = 9816;
    const aver_level_changer_to_av_peshera = 9138;
    const aver_level_changer_to_darkvalley = 9136;
    const aver_level_changer_to_garbage_135 = 9135;
    const aver_metka_01 = 2270;
    const aver_rygyi = 9558;
    const aver_secret_luber_ammunition_name = 9074;
    const aver_spec_hran = 2230;
    const aver_stalker_monolith_01 = 6201;
    const aver_stalker_monolith_02 = 6202;
    const aver_stalker_monolith_03 = 6203;
    const aver_stalker_monolith_glavn = 6204;
    const bar_arena_man = 571;
    const bar_bar_drunk_dolg = 510;
    const bar_bar_guard = 514;
    const bar_bar_guard_2 = 517;
    const bar_bar_lisiy = 607;
    const bar_bar_locator = 570;
    const bar_bar_osvedomitel = 515;
    const bar_bar_visitor_hunter = 504;
    const bar_barman = 500;
    const bar_docent = 9505;
    const bar_dolg_ivancov = 505;
    const bar_dolg_leader = 507;
    const bar_dolg_locator = 572;
    const bar_dolg_petrenko = 506;
    const bar_dolg_regular_5 = 516;
    const bar_ecolog_crush_1 = 520;
    const bar_ecolog_crush_2 = 522;
    const bar_ecolog_crush_3 = 521;
    const bar_ecolog_professor = 503;
    const bar_hran = 9066;
    const bar_inv_box = 573;
    const bar_inventory_box = 523;
    const bar_inventory_box_0000 = 2020;
    const bar_inventory_box_0001 = 2021;
    const bar_inventory_box_0002 = 5435;
    const bar_inventory_box_0003 = 5436;
    const bar_inventory_box_0004 = 5437;
    const bar_inventory_box_0005 = 5438;
    const bar_inventory_box_0006 = 5439;
    const bar_inventory_box_0007 = 5440;
    const bar_inventory_box_0008 = 5441;
    const bar_inventory_box_0009 = 5442;
    const bar_inventory_box_0010 = 5443;
    const bar_inventory_box_0011 = 5444;
    const bar_inventory_box_0012 = 5445;
    const bar_inventory_box_0013 = 5446;
    const bar_inventory_box_0014 = 5447;
    const bar_inventory_box_0015 = 5448;
    const bar_inventory_box_0016 = 5449;
    const bar_inventory_box_0017 = 5450;
    const bar_inventory_box_0018 = 5451;
    const bar_inventory_box_0019 = 5452;
    const bar_inventory_box_0020 = 5453;
    const bar_inventory_box_0021 = 5454;
    const bar_inventory_box_2 = 574;
    const bar_kocherga = 9524;
    const bar_lisaped = 9544;
    const bar_sak_box_0001 = 9142;
    const bar_sak_box_0002 = 31;
    const bar_sak_box_0003 = 9132;
    const bar_spec_hran = 2286;
    const bar_water_tower_zone = 508;
    const bar_zastava_guard_3 = 518;
    const baza_mar_stalker = 1202;
    const borov_inventory_box = 9062;
    const bun_ecolog_body_01 = 4391;
    const bun_exit_to_aes1_131 = 9131;
    const bun_inventory_box1 = 9069;
    const bun_inventory_box2 = 9070;
    const bun_lamp_pribor_01 = 3161;
    const bun_lamp_pribor_02 = 3162;
    const bun_lamp_pult_0 = 3158;
    const bun_lamp_pult_2 = 3159;
    const bun_lamp_secr_01 = 3163;
    const bun_light_0000 = 3102;
    const bun_light_0001 = 3103;
    const bun_light_0002 = 3105;
    const bun_light_0003 = 3107;
    const bun_light_0004 = 3108;
    const bun_light_0005 = 3113;
    const bun_light_0006 = 3114;
    const bun_light_0007 = 3115;
    const bun_light_0008 = 3116;
    const bun_light_0009 = 3117;
    const bun_light_0010 = 3123;
    const bun_light_0011 = 3124;
    const bun_light_0012 = 3125;
    const bun_light_0013 = 3126;
    const bun_light_0014 = 3127;
    const bun_light_0015 = 3132;
    const bun_light_0016 = 3133;
    const bun_light_0017 = 3134;
    const bun_light_0018 = 3136;
    const bun_light_0019 = 3137;
    const bun_light_0020 = 3138;
    const bun_light_0021 = 3140;
    const bun_light_0022 = 3141;
    const bun_light_0023 = 3144;
    const bun_light_0024 = 3145;
    const bun_light_0025 = 3146;
    const bun_light_0026 = 3147;
    const bun_light_0027 = 3149;
    const bun_light_big_glass_0000 = 3151;
    const bun_light_big_glass_0001 = 3152;
    const bun_light_big_glass_0002 = 3153;
    const bun_light_big_glass_0003 = 3154;
    const bun_light_big_glass_0004 = 3155;
    const bun_light_big_glass_0005 = 3156;
    const bun_light_big_glass_0006 = 3157;
    const bun_light_big_glass_0007 = 3150;
    const bun_light_galogen_1_0000 = 3119;
    const bun_light_galogen_1_0001 = 3120;
    const bun_light_galogen_1_0002 = 3121;
    const bun_light_galogen_1_0003 = 3122;
    const bun_light_galogen_1_0004 = 3129;
    const bun_light_galogen_1_0005 = 3130;
    const bun_light_galogen_1_0006 = 3104;
    const bun_light_galogen_1_0007 = 3131;
    const bun_light_galogen_1_0008 = 3142;
    const bun_light_galogen_1_0009 = 3143;
    const bun_light_uglovaya_1_glass_0000 = 3109;
    const bun_light_uglovaya_1_glass_0001 = 3128;
    const bun_light_uglovaya_1_glass_0002 = 3139;
    const bun_light_uglovaya_1_glass_0015 = 3106;
    const bun_lights_alarm_0000 = 3101;
    const bun_lights_white_glass_0000 = 3111;
    const bun_lights_white_glass_0001 = 3112;
    const bun_lights_white_glass_0002 = 3118;
    const bun_lights_white_glass_0003 = 3110;
    const bun_lights_white_glass_0004 = 3135;
    const bun_lights_white_glass_0005 = 3148;
    const bun_primary_switcher_0000 = 3190;
    const bun_pult = 3160;
    const bun_space_restrictor_0002 = 1006;
    const bun_spec_hran = 2234;
    const cit_bandit_leader = 9564;
    const control_monolith_02 = 9811;
    const control_monolith_03 = 9812;
    const dar_dar_document4 = 512;
    const dar_space_restrictor_0001 = 432;
    const dar_stalker0000 = 450;
    const dar_stalker0000_0000 = 451;
    const dc_inventory_box_buldozer = 5877;
    const dc_inventory_box_cherdak_build = 5874;
    const dc_inventory_box_cherdak_dom = 5875;
    const dc_inventory_box_pod_mostom = 5876;
    const dc_inventory_box_rad_yama_truba = 5878;
    const dc_treasure_konteyner_kamysh = 5879;
    const dcity_quvest_inventory_box = 5880;
    const dead_ecolog_03 = 1203;
    const dead_spec_hran = 2232;
    const dead_stalker_prizrak = 86;
    const deadcity_exit_to_generators_194 = 9194;
    const deadcity_exit_to_prip_193 = 9193;
    const diador = 550;
    const doktor1 = 9503;
    const doktor2 = 9529;
    const dolgovazyi = 9504;
    const dsc_diler = 185;
    const dsc_ecolog_glavn = 9567;
    const dsc_exit_to_hospital_255 = 9255;
    const dsc_green_near_dv2 = 24;
    const dsc_inventory_box_01 = 2100;
    const dsc_inventory_box_02 = 2101;
    const dsc_inventory_box_03 = 2102;
    const dsc_inventory_box_04 = 2103;
    const dsc_inventory_box_05 = 2104;
    const dsc_inventory_box_06 = 2105;
    const dsc_inventory_box_07 = 2106;
    const dsc_inventory_box_08 = 2107;
    const dsc_inventory_box_09 = 2108;
    const dsc_inventory_box_10 = 2109;
    const dsc_inventory_box_11 = 2110;
    const dsc_inventory_box_12 = 2111;
    const dsc_inventory_box_13 = 2112;
    const dsc_inventory_box_14 = 2113;
    const dsc_inventory_box_15 = 2114;
    const dsc_inventory_box_16 = 2115;
    const dsc_inventory_box_17 = 2116;
    const dsc_inventory_box_18 = 2117;
    const dsc_inventory_box_19 = 2118;
    const dsc_part_exchanger = 560;
    const dsc_spec_hran = 2240;
    const dsc_stalker_corps1_03 = 561;
    const dsc_stalker_lager_hunter = 9566;
    const dsk_sanek = 9321;
    const dv_box_bes_02 = 9114;
    const dv_sak_box_0001 = 9141;
    const ecolog_body_1 = 463;
    const ecolog_body_2 = 454;
    const esc_anomaly_field1 = 19;
    const esc_bandage = 6511;
    const esc_bandage_0000 = 6512;
    const esc_blokpost_box_01 = 41;
    const esc_blokpost_commander = 60;
    const esc_bread_0003 = 6509;
    const esc_bridge_soldier5 = 32;
    const esc_conserva_0001 = 6501;
    const esc_conserva_0002 = 6502;
    const esc_conserva_0004 = 6510;
    const esc_energy_drink_0002 = 6516;
    const esc_energy_drink_0003 = 6517;
    const esc_energy_drink_0004 = 6507;
    const esc_energy_drink_0005 = 6518;
    const esc_energy_drink_0006 = 6508;
    const esc_energy_drink_0007 = 6519;
    const esc_energy_drink_0008 = 6520;
    const esc_energy_drink_0011 = 6515;
    const esc_exit_bandit_diador = 50;
    const esc_exit_to_darkskape_112 = 9112;
    const esc_exit_to_hos_158 = 9158;
    const esc_fabrika_bandit_space_restrictor = 17;
    const esc_fox = 5;
    const esc_heli = 14;
    const esc_inventory_box = 2000;
    const esc_inventory_box_0000 = 2001;
    const esc_inventory_box_0001 = 2002;
    const esc_inventory_box_0002 = 2003;
    const esc_inventory_box_0004 = 5007;
    const esc_inventory_box_0005 = 5000;
    const esc_inventory_box_0006 = 5001;
    const esc_inventory_box_0007 = 5002;
    const esc_inventory_box_0008 = 5003;
    const esc_inventory_box_0009 = 5004;
    const esc_inventory_box_0010 = 5005;
    const esc_inventory_box_0011 = 5006;
    const esc_inventory_box_0012 = 5008;
    const esc_inventory_box_0013 = 5009;
    const esc_inventory_box_0014 = 5010;
    const esc_inventory_box_0015 = 5012;
    const esc_inventory_box_0016 = 5011;
    const esc_inventory_box_0017 = 5013;
    const esc_inventory_box_0018 = 5014;
    const esc_inventory_box_0019 = 5015;
    const esc_inventory_box_0020 = 5016;
    const esc_inventory_box_0021 = 5017;
    const esc_inventory_box_0022 = 5018;
    const esc_inventory_box_0023 = 5019;
    const esc_inventory_box_0024 = 5020;
    const esc_killer2 = 21;
    const esc_matugalnik = 18;
    const esc_medkit_army = 6514;
    const esc_mill_rest = 28;
    const esc_novice_attacker1 = 9;
    const esc_physic_destroyable_object_0034 = 23;
    const esc_podsumok_01 = 10;
    const esc_provodnik = 92;
    const esc_quest_case_01 = 0;
    const esc_sak_box_0001 = 9140;
    const esc_secret_shustryi = 27;
    const esc_shustryi = 4;
    const esc_sid_guard = 35;
    const esc_sid_guard_sub = 37;
    const esc_soldier_commander_sub = 9521;
    const esc_soldier_repair = 80;
    const esc_spec_hran = 2290;
    const esc_spechran = 5190;
    const esc_stalker_fanat = 22;
    const esc_suicidal_flesh = 29;
    const esc_switcher_01 = 16;
    const esc_tutorial_bandits = 26;
    const esc_tutorial_secret_place = 25;
    const esc_vagon_wounded = 7;
    const esc_vergas = 9543;
    const esc_vodka_0000 = 6505;
    const esc_vodka_0001 = 6506;
    const esc_wolf = 6;
    const escape_trader = 3;
    const exit_to_agroprom_01 = 192;
    const exit_to_aver = 9813;
    const exit_to_bar_01 = 771;
    const exit_to_brainlab_01 = 477;
    const exit_to_darkvalley_01 = 196;
    const exit_to_escape = 417;
    const exit_to_escape_01 = 193;
    const exit_to_for = 9159;
    const exit_to_garbage_01 = 593;
    const exit_to_garbage_02 = 416;
    const exit_to_pripyat_01 = 1007;
    const exit_to_radar_01 = 833;
    const exit_to_rostok_01 = 925;
    const exit_to_stancia = 9814;
    const exit_to_stancia_01 = 832;
    const exit_to_yantar_01 = 608;
    const gar_bandits_lager2 = 111;
    const gar_boars_territory2 = 105;
    const gar_dm_bandit_1 = 101;
    const gar_dm_bandit_2 = 102;
    const gar_dm_bandit_3 = 103;
    const gar_dm_novice = 104;
    const gar_dolg_blokpost_zone_warn = 108;
    const gar_dolg_commander_blokpost = 115;
    const gar_exit_to_hospital_177 = 9177;
    const gar_fake_spot1 = 112;
    const gar_fake_spot10 = 121;
    const gar_fake_spot11 = 122;
    const gar_fake_spot2 = 113;
    const gar_fake_spot3 = 119;
    const gar_fake_spot4 = 116;
    const gar_fake_spot5 = 118;
    const gar_fake_spot6 = 114;
    const gar_fake_spot7 = 117;
    const gar_fake_spot9 = 120;
    const gar_hellcar = 107;
    const gar_hellcar_group_1 = 133;
    const gar_hellcar_group_2 = 134;
    const gar_inventory_box = 5037;
    const gar_inventory_box_0000 = 2005;
    const gar_inventory_box_0001 = 2006;
    const gar_inventory_box_0002 = 2007;
    const gar_inventory_box_0003 = 2008;
    const gar_inventory_box_0004 = 5030;
    const gar_inventory_box_0005 = 5031;
    const gar_inventory_box_0006 = 5032;
    const gar_inventory_box_0007 = 5033;
    const gar_inventory_box_0008 = 5034;
    const gar_inventory_box_0009 = 5035;
    const gar_inventory_box_0010 = 5036;
    const gar_inventory_box_0011 = 5038;
    const gar_inventory_box_0012 = 5039;
    const gar_inventory_box_0013 = 5040;
    const gar_inventory_box_0014 = 5041;
    const gar_inventory_box_0015 = 5042;
    const gar_inventory_box_0016 = 5043;
    const gar_inventory_box_0017 = 5044;
    const gar_inventory_box_0018 = 5045;
    const gar_inventory_box_0019 = 5046;
    const gar_inventory_box_0020 = 5047;
    const gar_inventory_box_0021 = 5048;
    const gar_inventory_box_0022 = 5049;
    const gar_inventory_box_0023 = 5050;
    const gar_inventory_box_0024 = 5051;
    const gar_inventory_box_0025 = 5052;
    const gar_inventory_box_0026 = 5053;
    const gar_inventory_box_0027 = 5054;
    const gar_seryi = 100;
    const gar_seryi_drug3 = 123;
    const gar_sign_stop_blokpost = 351;
    const gar_smart_bandit_large_lager = 3002;
    const gar_smart_boars = 3050;
    const gar_spec_hran = 2281;
    const gar_stalker = 124;
    const gar_stalker_0003 = 292;
    const gar_wounded_bandit = 109;
    const gen_ecolog_body_1 = 458;
    const gen_ecolog_body_2 = 459;
    const gen_exit_to_lim_190 = 9190;
    const gen_exit_to_mil_191 = 9191;
    const gen_exit_to_radar_189 = 9189;
    const gen_hermit = 460;
    const gen_inventory_box_01 = 5813;
    const gen_inventory_box_02 = 5811;
    const gen_inventory_box_03 = 5812;
    const gen_inventory_box_04 = 5814;
    const gen_inventory_box_05 = 5815;
    const gen_inventory_box_military = 513;
    const gen_iskatel = 461;
    const gen_iskatel_drug = 462;
    const gen_spec_hran = 2299;
    const generators_level_changer = 9163;
    const generators_level_changer_to_labx8 = 9164;
    const green_dan = 9512;
    const green_glavn = 9565;
    const hos_exit_to_esc_157 = 9157;
    const hos_junkman = 457;
    const hos_lev_chang_door = 821;
    const hos_spec_hran = 2231;
    const hos_treasure_1 = 5801;
    const hos_treasure_2 = 5802;
    const hos_treasure_3 = 5803;
    const hospital_arka_1_0000 = 218;
    const hospital_arka_1_0013 = 227;
    const hospital_arka_2_0012 = 226;
    const hospital_arka_2_0018 = 219;
    const hospital_arka_3_0011 = 225;
    const hospital_arka_3_0017 = 220;
    const hospital_arka_4_0001 = 221;
    const hospital_arka_4_0003 = 224;
    const hospital_arka_5_0001 = 222;
    const hospital_arka_5_0003 = 223;
    const hran_sumka = 11;
    const inventory_dead_robbers = 5873;
    const ivan = 38;
    const ivar_many_restrictor = 79;
    const kat2_physic_object_0001 = 397;
    const kat2_physic_object_0011 = 396;
    const kat_lights_hanging_lamp = 399;
    const kat_soldier_trigger2 = 307;
    const kat_stalker = 350;
    const kirpich_inventory_box = 9073;
    const klyk = 9511;
    const krazy_mil = 703;
    const kruglov_inventory_box = 9063;
    const kruglov_inventory_box1 = 9065;
    const krysyk_inventory_box1 = 9060;
    const krysyk_inventory_box2 = 9061;
    const lab_primari_switcher_hanging_lamp_green_0000 = 911;
    const lab_primari_switcher_hanging_lamp_green_0001 = 913;
    const lab_primari_switcher_hanging_lamp_green_0002 = 915;
    const lab_primari_switcher_hanging_lamp_red_0000 = 912;
    const lab_primari_switcher_hanging_lamp_red_0001 = 914;
    const lab_primari_switcher_hanging_lamp_red_0002 = 916;
    const lab_switcher_hanging_lamp = 908;
    const lab_switcher_hanging_lamp_0000 = 909;
    const lab_switcher_hanging_lamp_0001 = 910;
    const labx10_ecolog_body_01 = 4390;
    const labx10_light_alarm_glass_0000 = 4202;
    const labx10_light_alarm_glass_0001 = 4203;
    const labx10_light_alarm_glass_0003 = 4201;
    const labx10_light_alarm_glass_0004 = 4206;
    const labx10_light_alarm_glass_0005 = 4210;
    const labx10_light_alarm_glass_0006 = 4211;
    const labx10_light_alarm_glass_0007 = 4212;
    const labx10_light_alarm_glass_0008 = 4213;
    const labx10_light_alarm_glass_0009 = 4214;
    const labx10_light_alarm_glass_0010 = 4220;
    const labx10_light_alarm_glass_0011 = 4221;
    const labx10_light_alarm_glass_0012 = 4222;
    const labx10_light_alarm_glass_0013 = 4223;
    const labx10_light_alarm_glass_0014 = 4224;
    const labx10_light_alarm_glass_0018 = 4226;
    const labx10_light_alarm_glass_0019 = 4227;
    const labx10_light_alarm_glass_0023 = 4231;
    const labx10_light_alarm_glass_0024 = 4232;
    const labx10_light_alarm_glass_0025 = 4233;
    const labx10_light_alarm_glass_0026 = 4234;
    const labx10_light_barokamera = 4301;
    const labx10_light_big_glass_0000 = 4237;
    const labx10_light_big_glass_0001 = 4238;
    const labx10_light_big_glass_0002 = 4239;
    const labx10_light_big_glass_0003 = 4240;
    const labx10_light_big_glass_0004 = 4241;
    const labx10_light_big_glass_0005 = 4242;
    const labx10_light_big_glass_0006 = 4243;
    const labx10_light_big_glass_0007 = 4236;
    const labx10_light_galogen_1_0000 = 4216;
    const labx10_light_galogen_1_0001 = 4217;
    const labx10_light_galogen_1_0002 = 4218;
    const labx10_light_galogen_1_0003 = 4219;
    const labx10_light_galogen_1_0006 = 4204;
    const labx10_light_galogen_1_0008 = 4229;
    const labx10_light_galogen_1_0009 = 4230;
    const labx10_light_uglovaya_1_glass_0002 = 4228;
    const labx10_lights_alarm_00 = 4205;
    const labx10_lights_hanging_lamp = 4244;
    const labx10_lights_hanging_lamp_0000 = 4245;
    const labx10_lights_hanging_lamp_0001 = 4246;
    const labx10_lights_hanging_lamp_0002 = 4247;
    const labx10_lights_hanging_lamp_0003 = 4248;
    const labx10_lights_hanging_lamp_0004 = 4249;
    const labx10_lights_hanging_lamp_0005 = 4250;
    const labx10_lights_hanging_lamp_0006 = 4251;
    const labx10_lights_hanging_lamp_0007 = 4252;
    const labx10_lights_hanging_lamp_0008 = 4253;
    const labx10_lights_hanging_lamp_0009 = 4254;
    const labx10_lights_hanging_lamp_0010 = 4255;
    const labx10_lights_hanging_lamp_0011 = 4256;
    const labx10_lights_hanging_lamp_0012 = 4257;
    const labx10_lights_hanging_lamp_0013 = 4258;
    const labx10_lights_hanging_lamp_0014 = 4259;
    const labx10_lights_hanging_lamp_0015 = 4260;
    const labx10_lights_hanging_lamp_0016 = 4261;
    const labx10_lights_hanging_lamp_0017 = 4262;
    const labx10_lights_hanging_lamp_0018 = 4263;
    const labx10_lights_hanging_lamp_0019 = 4264;
    const labx10_lights_hanging_lamp_0020 = 4265;
    const labx10_lights_hanging_lamp_0021 = 4266;
    const labx10_lights_hanging_lamp_0022 = 4267;
    const labx10_lights_hanging_lamp_0023 = 4268;
    const labx10_lights_hanging_lamp_0024 = 4269;
    const labx10_lights_hanging_lamp_0025 = 4270;
    const labx10_lights_hanging_lamp_0026 = 4271;
    const labx10_lights_hanging_lamp_0027 = 4272;
    const labx10_lights_hanging_lamp_0028 = 4273;
    const labx10_lights_hanging_lamp_0029 = 4274;
    const labx10_lights_hanging_lamp_0030 = 4275;
    const labx10_lights_hanging_lamp_0031 = 4276;
    const labx10_lights_hanging_lamp_0032 = 4277;
    const labx10_lights_hanging_lamp_0033 = 4278;
    const labx10_lights_hanging_lamp_0034 = 4279;
    const labx10_lights_hanging_lamp_0035 = 4280;
    const labx10_lights_hanging_lamp_0036 = 4281;
    const labx10_lights_hanging_lamp_0037 = 4282;
    const labx10_lights_hanging_lamp_0038 = 4283;
    const labx10_lights_hanging_lamp_0039 = 4284;
    const labx10_lights_hanging_lamp_0040 = 4285;
    const labx10_lights_white_glass_0000 = 4208;
    const labx10_lights_white_glass_0001 = 4209;
    const labx10_lights_white_glass_0002 = 4215;
    const labx10_lights_white_glass_0003 = 4207;
    const labx10_lights_white_glass_0004 = 4225;
    const labx10_lights_white_glass_0005 = 4235;
    const labx10_spec_hran = 2297;
    const labx10_switcher_00 = 4100;
    const labx10_switcher_01 = 4101;
    const labx10_switcher_02 = 4102;
    const labx10_switcher_03 = 4103;
    const labx10_switcher_04 = 4104;
    const labx10_switcher_05 = 4105;
    const labx10_switcher_06 = 4106;
    const labx10_switcher_07 = 4107;
    const labx10_switcher_08 = 4108;
    const labx10_switcher_09 = 4109;
    const labx10_switcher_10 = 4110;
    const labx10_switcher_11 = 4111;
    const labx10_switcher_12 = 4112;
    const labx10_switcher_13 = 4113;
    const labx8_ecolog_body_1 = 456;
    const labx8_inventory_box_0003 = 5881;
    const labx8_lamp_pribor11 = 8151;
    const labx8_lamp_pribor12 = 8152;
    const labx8_lamp_pribor13 = 8153;
    const labx8_lamp_pribor14 = 8154;
    const labx8_lamp_pribor15 = 8155;
    const labx8_lamp_pribor21 = 8156;
    const labx8_lamp_pribor22 = 8157;
    const labx8_lamp_pribor23 = 8158;
    const labx8_lamp_pribor24 = 8159;
    const labx8_lamp_pribor25 = 8160;
    const labx8_physic_object_0006 = 888;
    const labx8_spec_hran = 2298;
    const labx8_switcher_01 = 6101;
    const labx8_switcher_02 = 6102;
    const labx8_switcher_03 = 6103;
    const labx8_switcher_04 = 6104;
    const leshyi = 9557;
    const level_changer_161 = 9161;
    const level_changer_162 = 9162;
    const light_alarm_glass_0000 = 13;
    const light_alarm_glass_0001 = 53;
    const light_alarm_glass_0002 = 52;
    const light_alarm_glass_0003 = 51;
    const lights_alarm_1_0000 = 5343;
    const lights_alarm_1_0001 = 5342;
    const lim_exit_to_red_forest_155 = 9155;
    const lim_physic_object_0034 = 615;
    const lim_spec_hran = 2292;
    const lim_trader = 9530;
    const lim_treasure_1 = 5601;
    const lim_treasure_10 = 5610;
    const lim_treasure_11 = 5611;
    const lim_treasure_12 = 5612;
    const lim_treasure_13 = 5613;
    const lim_treasure_14 = 5614;
    const lim_treasure_2 = 5602;
    const lim_treasure_3 = 5603;
    const lim_treasure_5 = 5605;
    const lim_treasure_6 = 5606;
    const lim_treasure_7 = 5607;
    const lim_treasure_8 = 5608;
    const lim_treasure_9 = 5609;
    const lost_inventory_box_01 = 5851;
    const lost_inventory_box_02 = 5852;
    const lost_inventory_box_03 = 5853;
    const lost_inventory_box_04 = 5854;
    const lost_inventory_box_05 = 5855;
    const lost_inventory_box_06 = 5856;
    const lost_inventory_box_07 = 5857;
    const lost_inventory_box_08 = 5858;
    const lost_inventory_box_09 = 5859;
    const lost_inventory_box_10 = 5860;
    const lost_inventory_box_11 = 5861;
    const lost_inventory_box_12 = 5863;
    const lost_inventory_box_13 = 5864;
    const lost_mikhas = 9568;
    const lost_military_01 = 9561;
    const lost_military_02 = 9562;
    const lost_spec_hran = 2293;
    const lost_village_level_changer = 9166;
    const mar_boryan = 83;
    const mar_ecolog_corpse_1 = 9552;
    const mar_ecolog_corpse_2 = 9553;
    const mar_ecolog_corpse_3 = 9554;
    const mar_q_n_10 = 5561;
    const mar_q_n_11 = 5562;
    const mar_q_n_12 = 5563;
    const mar_q_n_13 = 5564;
    const mar_q_n_14 = 5565;
    const mar_q_n_6 = 5557;
    const mar_q_n_7 = 5558;
    const mar_q_n_8 = 5559;
    const mar_q_n_9 = 5560;
    const mar_q_t_a_15 = 5554;
    const mar_q_t_a_3 = 5553;
    const mar_q_t_l_1 = 5551;
    const mar_q_t_l_16 = 5550;
    const mar_q_t_l_2 = 5552;
    const mar_q_t_l_4 = 5555;
    const mar_q_t_l_5 = 5556;
    const mar_recover_item_2_box = 5545;
    const mar_recover_item_5_box = 5546;
    const mar_smart_terrain_10_5_box = 5571;
    const mar_smart_terrain_11_11_box = 5566;
    const mar_smart_terrain_12_2_box = 5574;
    const mar_smart_terrain_3_3_box = 5573;
    const mar_smart_terrain_3_7_box = 5549;
    const mar_smart_terrain_4_5_box = 5572;
    const mar_smart_terrain_5_12_box = 5568;
    const mar_smart_terrain_5_8_box = 5569;
    const mar_smart_terrain_6_4_box = 5547;
    const mar_smart_terrain_6_8_box = 5548;
    const mar_smart_terrain_8_11_box = 5567;
    const mar_smart_terrain_8_8_box = 5570;
    const mar_spec_hran = 2294;
    const mar_stalker = 1201;
    const mar_treasure_1 = 5501;
    const mar_treasure_10 = 5510;
    const mar_treasure_11 = 5511;
    const mar_treasure_12 = 5512;
    const mar_treasure_13 = 5513;
    const mar_treasure_14 = 5514;
    const mar_treasure_15 = 5515;
    const mar_treasure_16 = 5516;
    const mar_treasure_17 = 5517;
    const mar_treasure_18 = 5518;
    const mar_treasure_19 = 5519;
    const mar_treasure_2 = 5502;
    const mar_treasure_20 = 5520;
    const mar_treasure_21 = 5521;
    const mar_treasure_22 = 5522;
    const mar_treasure_23 = 5523;
    const mar_treasure_24 = 5524;
    const mar_treasure_25 = 5525;
    const mar_treasure_26 = 5526;
    const mar_treasure_27 = 5527;
    const mar_treasure_28 = 5528;
    const mar_treasure_29 = 5529;
    const mar_treasure_3 = 5503;
    const mar_treasure_30 = 5530;
    const mar_treasure_31 = 5531;
    const mar_treasure_32 = 5532;
    const mar_treasure_33 = 5533;
    const mar_treasure_34 = 5534;
    const mar_treasure_35 = 5535;
    const mar_treasure_36 = 5536;
    const mar_treasure_37 = 5537;
    const mar_treasure_38 = 5538;
    const mar_treasure_39 = 5539;
    const mar_treasure_4 = 5504;
    const mar_treasure_40 = 5540;
    const mar_treasure_41 = 5541;
    const mar_treasure_42 = 5542;
    const mar_treasure_43 = 5543;
    const mar_treasure_44 = 5544;
    const mar_treasure_5 = 5505;
    const mar_treasure_6 = 5506;
    const mar_treasure_7 = 5507;
    const mar_treasure_8 = 5508;
    const mar_treasure_9 = 5509;
    const marsh_cook = 9534;
    const marsh_ecolog1_sev_khutor = 181;
    const marsh_ecolog2_sev_khutor = 182;
    const marsh_ecolog_general = 9533;
    const marsh_oksana = 9535;
    const marsh_oksana2 = 9545;
    const marsh_provodnik_sev_khutor = 183;
    const mil_ara = 719;
    const mil_ara_guard1 = 714;
    const mil_ara_guard2 = 713;
    const mil_ara_guard3 = 712;
    const mil_bandit = 3071;
    const mil_blockpost_freedomstalker001 = 724;
    const mil_cook_treasure = 5029;
    const mil_dolg_stalker0000 = 708;
    const mil_dolg_stalker0001 = 740;
    const mil_dolg_stalker0003 = 736;
    const mil_dolg_stalker0006 = 738;
    const mil_dolg_stalker0006_0000 = 711;
    const mil_dolg_stalker0007 = 737;
    const mil_dolg_war_zone1 = 774;
    const mil_explosive_dinamit = 723;
    const mil_freedom_gulag_defense_res = 733;
    const mil_freedom_member0001 = 710;
    const mil_freedom_member0002 = 729;
    const mil_freedom_member0012 = 707;
    const mil_freedom_member0018 = 702;
    const mil_freedom_member0021 = 734;
    const mil_freedom_member0024 = 731;
    const mil_freedom_member0025 = 730;
    const mil_freedom_stalker0004 = 704;
    const mil_freedom_stalker0010 = 732;
    const mil_freedom_stalker0026 = 728;
    const mil_inventory_box = 5200;
    const mil_inventory_box_0000 = 5201;
    const mil_inventory_box_0001 = 5202;
    const mil_inventory_box_0002 = 5203;
    const mil_inventory_box_0003 = 5204;
    const mil_inventory_box_0004 = 5205;
    const mil_inventory_box_0005 = 5206;
    const mil_inventory_box_0006 = 5207;
    const mil_inventory_box_0007 = 5208;
    const mil_inventory_box_0008 = 5209;
    const mil_inventory_box_0009 = 5210;
    const mil_inventory_box_0010 = 5211;
    const mil_inventory_box_0011 = 5212;
    const mil_inventory_box_0012 = 5213;
    const mil_inventory_box_0013 = 5214;
    const mil_inventory_box_0014 = 5215;
    const mil_inventory_box_0015 = 5216;
    const mil_inventory_box_0016 = 5217;
    const mil_inventory_box_0017 = 5218;
    const mil_inventory_box_0018 = 5219;
    const mil_inventory_box_0019 = 5220;
    const mil_inventory_box_0020 = 5221;
    const mil_inventory_box_0021 = 5222;
    const mil_inventory_box_0022 = 5223;
    const mil_inventory_box_0023 = 5224;
    const mil_inventory_box_0024 = 5225;
    const mil_inventory_box_0025 = 5226;
    const mil_inventory_box_0026 = 5227;
    const mil_inventory_box_0027 = 5228;
    const mil_inventory_box_0028 = 2015;
    const mil_inventory_box_0029 = 2016;
    const mil_inventory_box_0030 = 2017;
    const mil_inventory_box_0031 = 2018;
    const mil_inventory_box_0032 = 2019;
    const mil_inventory_box_0033 = 742;
    const mil_inventory_box_0034 = 741;
    const mil_lager_spec_hran = 5862;
    const mil_locator1 = 770;
    const mil_minigamer = 9522;
    const mil_monster = 3070;
    const mil_patrol_glavn = 722;
    const mil_patrol_stalker0013 = 721;
    const mil_patrol_stalker0014 = 720;
    const mil_rjaboi = 39;
    const mil_sak_box_0001 = 9143;
    const mil_spec_hran = 2288;
    const mil_stalker0023 = 725;
    const mil_vasilev = 9523;
    const mil_wpn_rg-6 = 706;
    const mil_zabor = 15;
    const mil_zabor_0000 = 20;
    const mon_light_0000 = 3010;
    const mon_light_0001 = 3011;
    const mon_light_0002 = 3012;
    const mon_light_0003 = 3013;
    const mon_light_0004 = 3014;
    const mon_light_0005 = 3015;
    const mon_light_0006 = 3016;
    const mon_light_0007 = 3017;
    const mon_light_0008 = 3018;
    const mon_light_0009 = 3019;
    const mon_light_0010 = 3020;
    const mon_light_0011 = 3021;
    const mon_light_0012 = 3022;
    const mon_light_0013 = 3023;
    const mon_light_0014 = 3024;
    const mon_light_0015 = 3025;
    const mon_light_0016 = 3026;
    const mon_light_0017 = 3027;
    const mon_light_0018 = 3028;
    const mon_light_0019 = 3029;
    const mon_light_0020 = 3030;
    const mon_light_0021 = 3031;
    const mon_light_0022 = 3032;
    const mon_light_0023 = 3033;
    const mon_light_0024 = 3034;
    const mon_light_0025 = 3035;
    const mon_light_0026 = 3036;
    const mon_light_0027 = 3037;
    const mon_light_0028 = 3038;
    const mon_light_0029 = 3039;
    const mon_light_0030 = 3040;
    const mon_light_0031 = 3041;
    const mon_light_0032 = 3042;
    const mon_light_0033 = 3009;
    const mon_light_0034 = 3044;
    const mon_light_0035 = 3045;
    const mon_light_0036 = 3046;
    const mon_light_0037 = 3047;
    const mon_light_0038 = 3048;
    const mon_light_0039 = 3049;
    const mon_light_0040 = 3043;
    const mon_physic_destroyable_object_0006 = 1305;
    const mon_spec_hran = 2238;
    const mon_stalker = 1307;
    const mongol = 424;
    const neumeha = 34;
    const pahom = 9532;
    const pesh_botan = 9546;
    const pesh_botan_start = 155;
    const pesh_inventory_box_0003 = 5871;
    const pesh_inventory_box_0004 = 5872;
    const pesh_inventory_box_0005 = 4501;
    const pesh_spec_hran = 2241;
    const pri_hotel_door = 822;
    const pri_monolith_leader = 828;
    const pri_sak_box_0001 = 9144;
    const pri_spec_hran = 2235;
    const prip_exit_to_deadcity_195 = 9195;
    const prip_inventory_box = 5252;
    const prip_inventory_box_0000 = 5251;
    const prip_inventory_box_0001 = 5253;
    const prip_inventory_box_0002 = 5254;
    const prip_inventory_box_0003 = 5255;
    const prip_inventory_box_0004 = 4001;
    const prizrak = 9600;
    const prut2 = 540;
    const rad2_space_restrictor = 1000;
    const rad2_space_restrictor_0001 = 1005;
    const rad_curve_road_high_guard1 = 1075;
    const rad_curve_road_high_guard2 = 1074;
    const rad_curve_road_low_guard = 1071;
    const rad_curve_road_mid_guard1 = 1072;
    const rad_curve_road_mid_guard2 = 1073;
    const rad_exit_to_military_01 = 1008;
    const rad_explosive_barrel = 1090;
    const rad_explosive_barrel_0000 = 1094;
    const rad_explosive_barrel_0001 = 1091;
    const rad_explosive_barrel_0002 = 1095;
    const rad_explosive_barrel_0003 = 1080;
    const rad_explosive_barrel_0004 = 1081;
    const rad_explosive_barrel_0005 = 1084;
    const rad_explosive_barrel_0006 = 1099;
    const rad_explosive_barrel_0007 = 1097;
    const rad_explosive_barrel_0008 = 1096;
    const rad_explosive_barrel_0009 = 1082;
    const rad_explosive_barrel_0010 = 1083;
    const rad_explosive_barrel_0011 = 1092;
    const rad_explosive_barrel_0012 = 1093;
    const rad_explosive_barrel_0013 = 1098;
    const rad_explosive_barrel_0014 = 1085;
    const rad_half_dead_scientist = 1118;
    const rad_inventory_box = 2034;
    const rad_inventory_box_0000 = 5248;
    const rad_inventory_box_0001 = 5245;
    const rad_inventory_box_0002 = 5246;
    const rad_inventory_box_0003 = 5247;
    const rad_inventory_box_0004 = 5249;
    const rad_inventory_box_0005 = 5250;
    const rad_lamp_pribor1 = 6152;
    const rad_lamp_pribor2 = 6153;
    const rad_lamp_pribor3 = 6154;
    const rad_pribor1 = 9310;
    const rad_pribor2 = 9311;
    const rad_pribor3 = 9312;
    const rad_spec_hran = 2291;
    const rad_stalker_0001_dead = 4800;
    const rad_vergas = 1001;
    const red_exit_to_av_pesh_188 = 9188;
    const red_exit_to_x16_257 = 9257;
    const red_forest_lesnik = 9536;
    const red_freedom_glavn = 9563;
    const red_inventory_box_01 = 5742;
    const red_inventory_box_02 = 5741;
    const red_kom_space_restrictor = 9810;
    const red_level_changer_to_limansk = 9171;
    const red_level_changer_to_rostok = 9172;
    const red_level_changer_to_yantar = 9173;
    const red_q10_n = 5740;
    const red_q11_n = 5725;
    const red_q1_t_l = 5731;
    const red_q2_t_a = 5732;
    const red_q3_n = 5733;
    const red_q4_n = 5734;
    const red_q5_n = 5735;
    const red_q6_n = 5736;
    const red_q7_t_a = 5737;
    const red_q8_n = 5738;
    const red_q9_n = 5739;
    const red_smart_sos_die = 9801;
    const red_smart_terrain_3_1_box = 2033;
    const red_smart_terrain_3_2_box = 5727;
    const red_smart_terrain_4_2_box = 5730;
    const red_smart_terrain_5_5_box = 5728;
    const red_smart_terrain_6_3_box = 5726;
    const red_smart_terrain_bridge_box = 5729;
    const red_spec_hran = 2295;
    const red_stalker_rjaboy = 71;
    const red_treasure_1 = 5701;
    const red_treasure_10 = 5710;
    const red_treasure_11 = 5711;
    const red_treasure_12 = 5712;
    const red_treasure_13 = 5713;
    const red_treasure_14 = 5714;
    const red_treasure_15 = 5715;
    const red_treasure_16 = 5716;
    const red_treasure_17 = 5717;
    const red_treasure_18 = 5718;
    const red_treasure_19 = 5719;
    const red_treasure_2 = 5702;
    const red_treasure_20 = 5720;
    const red_treasure_21 = 5721;
    const red_treasure_22 = 5722;
    const red_treasure_23 = 5723;
    const red_treasure_24 = 5724;
    const red_treasure_25 = 5743;
    const red_treasure_3 = 5703;
    const red_treasure_4 = 5704;
    const red_treasure_5 = 5705;
    const red_treasure_6 = 5706;
    const red_treasure_7 = 5707;
    const red_treasure_8 = 5708;
    const red_treasure_9 = 5709;
    const ros_inventory_box = 5455;
    const ros_inventory_box_0000 = 5456;
    const ros_inventory_box_0002 = 5457;
    const ros_inventory_box_0003 = 5458;
    const ros_inventory_box_0004 = 5459;
    const ros_inventory_box_0005 = 5460;
    const ros_inventory_box_0006 = 5461;
    const ros_inventory_box_0007 = 5462;
    const ros_inventory_box_0008 = 5463;
    const ros_inventory_box_0009 = 5465;
    const ros_inventory_box_0010 = 5466;
    const ros_inventory_box_0011 = 5467;
    const ros_inventory_box_0012 = 5468;
    const ros_inventory_box_0013 = 5469;
    const ros_inventory_box_0014 = 5470;
    const ros_inventory_box_0015 = 5471;
    const ros_inventory_box_0016 = 5472;
    const ros_inventory_box_0017 = 5473;
    const ros_inventory_box_0018 = 5474;
    const ros_inventory_box_0019 = 5475;
    const ros_inventory_box_0020 = 5476;
    const ros_inventory_box_0021 = 5477;
    const ros_inventory_box_0022 = 5478;
    const ros_inventory_box_0023 = 5479;
    const ros_inventory_box_0024 = 5464;
    const ros_inventory_box_0025 = 5480;
    const ros_inventory_box_0026 = 2031;
    const ros_inventory_box_0027 = 2030;
    const ros_inventory_box_0028 = 2032;
    const ros_kruglov_finish_mapspot = 605;
    const ros_secret_way_mapspot = 596;
    const ros_spec_hran = 2287;
    const ros_stalker_0004 = 595;
    const rygyi = 9513;
    const sak_military_stalker = 9506;
    const sanek = 9538;
    const sanek2 = 9541;
    const sar_door = 1303;
    const sar_monolith_find = 1306;
    const sar_monolith_spot = 1300;
    const sar_spec_hran = 2239;
    const scaner_01 = 9145;
    const scaner_02 = 9146;
    const scaner_03 = 9147;
    const scaner_04 = 9148;
    const scaner_05 = 9149;
    const scaner_1_space_restrictor = 9304;
    const scaner_2_space_restrictor = 9305;
    const scaner_3_space_restrictor = 9306;
    const second_door_marker = 433;
    const serafim = 9555;
    const shersh = 9542;
    const speakerphon_esc_01 = 9549;
    const speakerphon_pesh_01 = 9547;
    const speakerphon_pesh_02 = 9548;
    const st2_spec_hran = 2237;
    const st2_spec_monolith_01 = 7531;
    const st2_spec_monolith_02 = 7532;
    const st2_spec_monolith_03 = 7533;
    const st2_spec_monolith_04 = 7534;
    const st2_spec_monolith_05 = 7535;
    const st2_spec_monolith_06 = 7536;
    const st2_spec_monolith_07 = 7537;
    const st2_spec_monolith_08 = 7538;
    const st2_spec_monolith_09 = 7539;
    const st2_spec_monolith_10 = 7540;
    const st2_spec_monolith_11 = 7541;
    const st2_spec_monolith_12 = 7542;
    const st2_spec_monolith_13 = 7543;
    const st2_spec_monolith_14 = 7544;
    const st2_spec_monolith_15 = 7545;
    const st2_spec_monolith_16 = 7546;
    const st2_spec_monolith_17 = 7547;
    const st2_spec_monolith_18 = 7548;
    const st2_spec_monolith_19 = 7549;
    const st2_spec_monolith_20 = 7550;
    const st2_spec_monolith_21 = 7551;
    const st2_spec_monolith_22 = 7552;
    const st2_spec_monolith_23 = 7553;
    const st2_spec_monolith_24 = 7554;
    const st2_spec_monolith_25 = 7555;
    const stancia_1_space_restrictor = 9803;
    const stancia_2_space_restrictor = 9804;
    const stancia_3_space_restrictor = 9805;
    const stancia_4_space_restrictor = 9806;
    const stancia_5_space_restrictor = 9807;
    const stancia_6_space_restrictor = 9808;
    const stepanych = 9556;
    const stepanych2 = 9560;
    const strelok_spot = 9815;
    const sultan = 9551;
    const sultan_inventory_box_0001 = 9127;
    const sultan_inventory_box_0002 = 9128;
    const sultan_inventory_box_0003 = 9129;
    const td_kocherga = 9516;
    const td_stalker_fraer = 9515;
    const teleport_120 = 9120;
    const tesla_space_restrictor = 9809;
    const trup1_sanek_level_changer = 9481;
    const trup_marsh_tuzla19854 = 9494;
    const trup_sanek = 9539;
    const trup_sanek2 = 9540;
    const trup_stalker19857 = 1111;
    const u_agr_inventory_box = 5103;
    const u_agr_inventory_box_0000 = 5100;
    const u_agr_inventory_box_0001 = 5101;
    const u_agr_inventory_box_0002 = 5102;
    const u_agr_inventory_box_0003 = 5104;
    const u_agr_inventory_box_klyk = 511;
    const u_agr_space_restrictor = 395;
    const umnik = 67;
    const val_bandit_krisyk = 9508;
    const val_bandit_krisyk2 = 541;
    const val_bandit_rpg_dead = 437;
    const val_bandit_trader = 9507;
    const val_dinamit_podval = 441;
    const val_door_inventory_box = 2026;
    const val_dram_glavn = 412;
    const val_escort_captive = 400;
    const val_escort_guard1 = 407;
    const val_escort_guard2 = 408;
    const val_escort_guard3 = 403;
    const val_escort_nap1 = 406;
    const val_exit_gate = 421;
    const val_exit_tunnel_zone = 434;
    const val_farm_zone = 435;
    const val_inventory_box = 5400;
    const val_inventory_box_0000 = 5401;
    const val_inventory_box_0001 = 5402;
    const val_inventory_box_0002 = 5403;
    const val_inventory_box_0003 = 5404;
    const val_inventory_box_0004 = 5405;
    const val_inventory_box_0005 = 5406;
    const val_inventory_box_0006 = 5407;
    const val_inventory_box_0007 = 5408;
    const val_inventory_box_0008 = 5409;
    const val_inventory_box_0009 = 5410;
    const val_inventory_box_0010 = 5411;
    const val_inventory_box_0011 = 5412;
    const val_inventory_box_0012 = 5413;
    const val_inventory_box_0013 = 5414;
    const val_inventory_box_0014 = 5415;
    const val_inventory_box_0015 = 5416;
    const val_inventory_box_0016 = 5417;
    const val_inventory_box_0017 = 5418;
    const val_inventory_box_0018 = 5419;
    const val_inventory_box_0019 = 5420;
    const val_inventory_box_0020 = 5421;
    const val_inventory_box_0021 = 5422;
    const val_inventory_box_0022 = 5423;
    const val_inventory_box_0023 = 5424;
    const val_inventory_box_0024 = 5425;
    const val_inventory_box_0025 = 5426;
    const val_inventory_box_0026 = 5427;
    const val_inventory_box_0027 = 5428;
    const val_inventory_box_0028 = 5429;
    const val_inventory_box_0029 = 5430;
    const val_inventory_box_0030 = 5431;
    const val_inventory_box_0031 = 5432;
    const val_inventory_box_0032 = 2025;
    const val_inventory_box_0034 = 4552;
    const val_inventory_box_0035 = 4553;
    const val_inventory_box_0036 = 4551;
    const val_inventory_box_0037 = 5481;
    const val_kuznezov = 36;
    const val_lager_borov = 425;
    const val_location_zone2 = 430;
    const val_location_zone3 = 427;
    const val_oreh_inventory_box = 9072;
    const val_pipe_zone = 431;
    const val_prisoner_captive = 402;
    const val_sacrifice_guard1 = 404;
    const val_sacrifice_guard2 = 405;
    const val_sacrifice_tunnel_bandit = 409;
    const val_sacrifice_victim = 401;
    const val_smart_bandit_2 = 3001;
    const val_sos_bs = 436;
    const val_spec_hran = 2284;
    const val_stena_podval = 440;
    const val_vlad = 422;
    const volkodav = 509;
    const vorobey = 9531;
    const war_ecolog_body_1 = 753;
    const war_ecolog_body_2 = 754;
    const war_level_changer = 9175;
    const war_spec_hran = 2296;
    const war_switcher_0001 = 951;
    const war_switcher_0002 = 952;
    const x16_beton_block_7 = 66;
    const x16_exit_to_red_259 = 9259;
    const x16_inventory_box = 5243;
    const x16_inventory_box_0000 = 5244;
    const x16_light_alarm_glass_0000 = 5376;
    const x16_light_alarm_glass_0001 = 5375;
    const x16_light_alarm_glass_0002 = 5374;
    const x16_light_alarm_glass_0003 = 5373;
    const x16_light_alarm_glass_0004 = 5372;
    const x16_light_alarm_glass_0005 = 5371;
    const x16_light_alarm_glass_0006 = 5370;
    const x16_light_alarm_glass_0007 = 5369;
    const x16_light_alarm_glass_0008 = 5367;
    const x16_light_alarm_glass_0009 = 5366;
    const x16_light_alarm_glass_0010 = 5365;
    const x16_light_alarm_glass_0011 = 5364;
    const x16_light_alarm_glass_0012 = 5363;
    const x16_light_alarm_glass_0013 = 5361;
    const x16_light_alarm_glass_0014 = 5359;
    const x16_light_alarm_glass_0015 = 5358;
    const x16_light_alarm_glass_0016 = 5357;
    const x16_light_alarm_glass_0017 = 5356;
    const x16_light_alarm_glass_0018 = 5355;
    const x16_light_alarm_glass_0019 = 5354;
    const x16_light_alarm_glass_0020 = 5345;
    const x16_light_alarm_glass_0021 = 5338;
    const x16_light_alarm_glass_0022 = 5337;
    const x16_light_alarm_glass_0023 = 5344;
    const x16_light_alarm_glass_0024 = 5341;
    const x16_light_alarm_glass_0025 = 5339;
    const x16_light_alarm_glass_0026 = 5336;
    const x16_light_alarm_glass_0027 = 5335;
    const x16_light_alarm_glass_0028 = 5334;
    const x16_light_alarm_glass_0029 = 5333;
    const x16_light_alarm_glass_0030 = 5332;
    const x16_light_alarm_glass_0031 = 5331;
    const x16_light_alarm_glass_0032 = 5330;
    const x16_light_big_glass_0007 = 5368;
    const x16_light_brain_glass_0000 = 5325;
    const x16_light_brain_glass_0001 = 5324;
    const x16_light_brain_glass_0002 = 5323;
    const x16_light_brain_glass_0003 = 5322;
    const x16_light_brain_glass_0004 = 5321;
    const x16_light_brain_glass_0005 = 5320;
    const x16_light_galogen_1_0000 = 5353;
    const x16_light_galogen_1_0001 = 5329;
    const x16_light_galogen_1_0002 = 5328;
    const x16_light_galogen_1_0005 = 5352;
    const x16_light_galogen_1_0006 = 5362;
    const x16_light_galogen_1_0007 = 5340;
    const x16_light_galogen_1_0008 = 5348;
    const x16_light_galogen_1_0009 = 5347;
    const x16_light_galogen_1_0010 = 5346;
    const x16_light_uglovaya_1_glass_0000 = 5326;
    const x16_light_uglovaya_1_glass_0001 = 5378;
    const x16_light_uglovaya_1_glass_0002 = 5327;
    const x16_light_wire_1_0000 = 5377;
    const x16_light_wire_1_0001 = 5360;
    const x16_light_wire_1_0002 = 5351;
    const x16_light_wire_1_0003 = 5350;
    const x16_light_wire_1_0004 = 5349;
    const x16_physic_object_0006 = 923;
    const x16_spec_hran = 2280;
    const x16_stalker_pseudo_ghost = 918;
    const x16_switcher_01 = 5301;
    const x16_switcher_02 = 5302;
    const x16_switcher_03 = 5303;
    const x16_switcher_04 = 5304;
    const x16_switcher_05 = 5305;
    const x16_switcher_06 = 5306;
    const x16_switcher_07 = 5307;
    const x16_switcher_08 = 5308;
    const x18_inventory_box = 90;
    const x18_inventory_box1 = 9067;
    const x18_inventory_box_0000 = 5434;
    const x18_inventory_box_0001 = 89;
    const x18_inventory_box_0002 = 5433;
    const x18_light_alarm_glass_0000 = 5171;
    const x18_light_alarm_glass_0001 = 5169;
    const x18_light_alarm_glass_0002 = 5168;
    const x18_light_alarm_glass_0003 = 5164;
    const x18_light_alarm_glass_0004 = 5163;
    const x18_light_alarm_glass_0005 = 5160;
    const x18_light_alarm_glass_0006 = 5159;
    const x18_light_alarm_glass_0007 = 5158;
    const x18_light_alarm_glass_0008 = 5157;
    const x18_light_alarm_glass_0009 = 5156;
    const x18_light_alarm_glass_0010 = 5155;
    const x18_light_alarm_glass_0011 = 5154;
    const x18_light_alarm_glass_0012 = 5149;
    const x18_light_alarm_glass_0013 = 5147;
    const x18_light_alarm_glass_0014 = 5146;
    const x18_light_alarm_glass_0015 = 5145;
    const x18_light_alarm_glass_0016 = 5144;
    const x18_light_alarm_glass_0017 = 5143;
    const x18_light_alarm_glass_0018 = 5142;
    const x18_light_alarm_glass_0019 = 5141;
    const x18_light_alarm_glass_0020 = 5140;
    const x18_light_alarm_glass_0021 = 5138;
    const x18_light_alarm_glass_0022 = 5133;
    const x18_light_alarm_glass_0023 = 5132;
    const x18_light_alarm_glass_0024 = 5131;
    const x18_light_alarm_glass_0025 = 5130;
    const x18_light_alarm_glass_0026 = 5129;
    const x18_light_alarm_glass_0027 = 5128;
    const x18_light_alarm_glass_0028 = 5127;
    const x18_light_alarm_glass_0029 = 5126;
    const x18_light_alarm_glass_0030 = 5125;
    const x18_light_alarm_glass_0031 = 5124;
    const x18_light_alarm_glass_0032 = 5123;
    const x18_light_alarm_glass_0033 = 5122;
    const x18_light_alarm_glass_0034 = 5121;
    const x18_light_alarm_glass_0035 = 5181;
    const x18_light_alarm_glass_0036 = 5180;
    const x18_light_alarm_glass_0037 = 5179;
    const x18_light_alarm_glass_0038 = 5178;
    const x18_light_alarm_glass_0039 = 5177;
    const x18_light_alarm_glass_0040 = 5175;
    const x18_light_alarm_glass_0041 = 5176;
    const x18_light_big_glass_0000 = 5136;
    const x18_light_big_glass_0001 = 5135;
    const x18_light_big_glass_0002 = 5134;
    const x18_light_big_glass_0007 = 5137;
    const x18_light_galogen_1_0000 = 5172;
    const x18_light_galogen_1_0001 = 5167;
    const x18_light_galogen_1_0002 = 5166;
    const x18_light_galogen_1_0003 = 5165;
    const x18_light_galogen_1_0006 = 5173;
    const x18_light_wire_1_0000 = 5174;
    const x18_light_wire_1_0001 = 5170;
    const x18_light_wire_1_0002 = 5162;
    const x18_light_wire_1_0003 = 5161;
    const x18_light_wire_1_0004 = 5153;
    const x18_light_wire_1_0005 = 5152;
    const x18_light_wire_1_0006 = 5151;
    const x18_light_wire_1_0007 = 5150;
    const x18_light_wire_1_0008 = 5148;
    const x18_light_wire_1_0009 = 5139;
    const x18_light_wire_1_0010 = 5120;
    const x18_light_wire_1_0011 = 5184;
    const x18_light_wire_1_0012 = 5183;
    const x18_light_wire_1_0013 = 5182;
    const x18_military_body_1 = 455;
    const x18_spec_hran = 2285;
    const x18_stalker_corpse = 9518;
    const x18_switcher_01 = 5106;
    const x18_switcher_02 = 5107;
    const x18_switcher_03 = 5108;
    const x18_switcher_04 = 5109;
    const x18_switcher_05 = 5110;
    const x18_switcher_06 = 5111;
    const x18_switcher_07 = 5112;
    const x18_switcher_08 = 5113;
    const x18_switcher_09 = 5114;
    const x8_light_01_lamp_01 = 6111;
    const x8_light_01_lamp_02 = 6112;
    const x8_light_01_lamp_03 = 6113;
    const x8_light_01_lamp_04 = 6114;
    const x8_light_01_lamp_05 = 6115;
    const x8_light_01_lamp_06 = 6116;
    const x8_light_01_lamp_07 = 6117;
    const x8_light_01_lamp_08 = 6118;
    const x8_light_01_lamp_09 = 6119;
    const x8_light_01_lamp_10 = 6120;
    const x8_light_02_lamp_01 = 6121;
    const x8_light_02_lamp_02 = 6122;
    const x8_light_02_lamp_03 = 6123;
    const x8_light_02_lamp_04 = 6124;
    const x8_light_02_lamp_05 = 6125;
    const x8_light_02_lamp_06 = 6126;
    const x8_light_02_lamp_07 = 6127;
    const x8_light_02_lamp_08 = 6128;
    const x8_light_02_lamp_09 = 6129;
    const x8_light_02_lamp_10 = 6130;
    const x8_light_03_lamp_01 = 6131;
    const x8_light_03_lamp_02 = 6132;
    const x8_light_03_lamp_03 = 6133;
    const x8_light_03_lamp_04 = 6134;
    const x8_light_03_lamp_05 = 6135;
    const x8_light_03_lamp_06 = 6136;
    const x8_light_03_lamp_07 = 6137;
    const x8_light_03_lamp_08 = 6138;
    const x8_light_03_lamp_09 = 6139;
    const x8_light_03_lamp_10 = 6140;
    const x8_light_03_lamp_11 = 6141;
    const yan_ecolog_kruglov = 9528;
    const yan_exit_to_x16_258 = 9258;
    const yan_helmet = 920;
    const yan_inventory_box = 5290;
    const yan_inventory_box_0000 = 5229;
    const yan_inventory_box_0001 = 5230;
    const yan_inventory_box_0002 = 5231;
    const yan_inventory_box_0003 = 5232;
    const yan_inventory_box_0004 = 5233;
    const yan_inventory_box_0005 = 5234;
    const yan_inventory_box_0006 = 5235;
    const yan_inventory_box_0007 = 5236;
    const yan_inventory_box_0008 = 5237;
    const yan_inventory_box_0009 = 5238;
    const yan_inventory_box_0010 = 5239;
    const yan_inventory_box_0011 = 5240;
    const yan_inventory_box_0012 = 5241;
    const yan_inventory_box_0013 = 5242;
    const yan_izm_spot1 = 9307;
    const yan_izm_spot2 = 9308;
    const yan_izm_spot3 = 9309;
    const yan_klyk_body = 9559;
    const yan_mapspot_from_vasiliev = 907;
    const yan_physic_destroyable_object_0001 = 924;
    const yan_spec_hran = 2289;
    const yan_specnaz_dead = 922;
    const yan_zombie_zone_mapspot = 906;
    const yantar_ecolog_general = 902;
    const yantar_semenov = 905;
    const yantar_tunnel_finish = 921;
    
};

C++ class callback {
    const action_animation = 21;
    const action_movement = 19;
    const action_object = 24;
    const action_particle = 23;
    const action_sound = 22;
    const action_watch = 20;
    const actor_sleep = 25;
    const article_info = 12;
    const death = 8;
    const helicopter_on_hit = 27;
    const helicopter_on_point = 26;
    const hit = 17;
    const inventory_info = 11;
    const inventory_pda = 10;
    const level_border_enter = 7;
    const level_border_exit = 6;
    const map_location_added = 14;
    const on_actor_weapon_empty = 49;
    const on_actor_weapon_fire = 47;
    const on_actor_weapon_jammed = 48;
    const on_actor_weapon_reload = 50;
    const on_actor_weapon_zoom_in = 55;
    const on_actor_weapon_zoom_out = 56;
    const on_attach_vehicle = 59;
    const on_before_save = 63;
    const on_cell_item_focus = 57;
    const on_cell_item_focus_lost = 58;
    const on_detach_vehicle = 60;
    const on_group_items = 70;
    const on_inv_box_item_drop = 65;
    const on_inv_box_item_take = 64;
    const on_inv_box_open = 66;
    const on_item_belt = 40;
    const on_item_drop = 29;
    const on_item_ruck = 42;
    const on_item_slot = 41;
    const on_item_take = 28;
    const on_key_hold = 37;
    const on_key_press = 35;
    const on_key_release = 36;
    const on_level_map_click = 67;
    const on_map_spot_click = 68;
    const on_mouse_hold = 46;
    const on_mouse_move = 38;
    const on_mouse_press = 44;
    const on_mouse_release = 45;
    const on_mouse_wheel = 39;
    const on_npc_weapon_empty = 53;
    const on_npc_weapon_fire = 51;
    const on_npc_weapon_jammed = 52;
    const on_npc_weapon_reload = 54;
    const on_pickup_item_showing = 69;
    const on_postsave = 63;
    const on_use_vehicle = 61;
    const patrol_path_in_point = 9;
    const saw_object = 16;
    const script_animation = 30;
    const sound = 18;
    const switch_torch = 43;
    const take_item_from_box = 34;
    const task_state = 13;
    const trade_perform_operation = 3;
    const trade_sell_buy_item = 2;
    const trade_start = 0;
    const trade_stop = 1;
    const trader_global_anim_request = 31;
    const trader_head_anim_request = 32;
    const trader_sound_end = 33;
    const use_object = 15;
    const zone_enter = 4;
    const zone_exit = 5;
    
};

C++ class key_bindings {
    const kACCEL = 7;
    const kACCUM_ON = 77;
    const kBACK = 10;
    const kBUY = 50;
    const kCAM_1 = 16;
    const kCAM_2 = 17;
    const kCAM_3 = 18;
    const kCAM_4 = 19;
    const kCAM_ZOOM_IN = 20;
    const kCAM_ZOOM_OUT = 21;
    const kCHAT = 44;
    const kCONSOLE = 48;
    const kCROUCH = 5;
    const kCROUCH_TOGGLE = 6;
    const kDOWN = 3;
    const kDROP = 41;
    const kFWD = 9;
    const kINVENTORY = 49;
    const kJUMP = 4;
    const kLEFT = 0;
    const kL_LOOKOUT = 13;
    const kL_STRAFE = 11;
    const kNIGHT_VISION = 23;
    const kQUIT = 47;
    const kRIGHT = 1;
    const kR_LOOKOUT = 14;
    const kR_STRAFE = 12;
    const kSCORES = 43;
    const kSCREENSHOT = 46;
    const kSKIN = 51;
    const kTEAM = 52;
    const kTORCH = 22;
    const kUP = 2;
    const kUSE = 42;
    const kWPN_1 = 24;
    const kWPN_2 = 25;
    const kWPN_3 = 26;
    const kWPN_4 = 27;
    const kWPN_5 = 28;
    const kWPN_6 = 29;
    const kWPN_FIRE = 32;
    const kWPN_FUNC = 37;
    const kWPN_NEXT = 31;
    const kWPN_RELOAD = 36;
    const kWPN_ZOOM = 33;
    
};

C++ class game_messages {
    const GAME_EVENT_ARTEFACT_DESTROYED = 15;
    const GAME_EVENT_ARTEFACT_DROPPED = 17;
    const GAME_EVENT_ARTEFACT_ONBASE = 18;
    const GAME_EVENT_ARTEFACT_SPAWNED = 14;
    const GAME_EVENT_ARTEFACT_TAKEN = 16;
    const GAME_EVENT_BUY_MENU_CLOSED = 21;
    const GAME_EVENT_PLAYER_BUY_FINISHED = 2;
    const GAME_EVENT_PLAYER_CHANGE_SKIN = 4;
    const GAME_EVENT_PLAYER_CHANGE_TEAM = 4;
    const GAME_EVENT_PLAYER_CONNECTED = 6;
    const GAME_EVENT_PLAYER_DISCONNECTED = 7;
    const GAME_EVENT_PLAYER_ENTER_TEAM_BASE = 19;
    const GAME_EVENT_PLAYER_JOIN_TEAM = 11;
    const GAME_EVENT_PLAYER_KILL = 1;
    const GAME_EVENT_PLAYER_KILLED = 9;
    const GAME_EVENT_PLAYER_LEAVE_TEAM_BASE = 20;
    const GAME_EVENT_PLAYER_READY = 0;
    const GAME_EVENT_ROUND_END = 13;
    const GAME_EVENT_ROUND_STARTED = 12;
    const GAME_EVENT_SCRIPT_BEGINS_FROM = 38;
    const GAME_EVENT_SKIN_MENU_CLOSED = 23;
    const GAME_EVENT_TEAM_MENU_CLOSED = 22;
    
};

C++ class game_phases {
    const GAME_PHASE_INPROGRESS = 1;
    const GAME_PHASE_NONE = 0;
    const GAME_PHASE_PENDING = 2;
    const GAME_PHASE_SCRIPT_BEGINS_FROM = 9;
    const GAME_PHASE_TEAM1_SCORES = 3;
    const GAME_PHASE_TEAM2_SCORES = 4;
    const GAME_PHASE_TEAMS_IN_A_DRAW = 7;
    
};

C++ class game_player_flags {
    const GAME_PLAYER_FLAG_LOCAL = 1;
    const GAME_PLAYER_FLAG_READY = 2;
    const GAME_PLAYER_FLAG_SCRIPT_BEGINS_FROM = 16;
    const GAME_PLAYER_FLAG_SPECTATOR = 8;
    const GAME_PLAYER_FLAG_VERY_VERY_DEAD = 4;
    
};

C++ class GAME_TYPE {
    const GAME_ARTEFACTHUNT = 7;
    const GAME_DEATHMATCH = 2;
    const GAME_TEAMDEATHMATCH = 6;
    const GAME_UNKNOWN = 0;
    
};

C++ class game_difficulty {
    const master = 3;
    const novice = 0;
    const stalker = 1;
    const veteran = 2;
    
};

C++ class snd_type {
    const ambient = 128;
    const anomaly = 268435456;
    const anomaly_idle = 268437504;
    const attack = 8192;
    const bullet_hit = 524288;
    const die = 131072;
    const drop = 33554432;
    const eat = 4096;
    const empty = 1048576;
    const hide = 16777216;
    const idle = 2048;
    const injure = 65536;
    const item = 1073741824;
    const item_drop = 1107296256;
    const item_hide = 1090519040;
    const item_pick_up = 1140850688;
    const item_take = 1082130432;
    const item_use = 1077936128;
    const monster = 536870912;
    const monster_attack = 536879104;
    const monster_die = 537001984;
    const monster_eat = 536875008;
    const monster_injure = 536936448;
    const monster_step = 536903680;
    const monster_talk = 536887296;
    const no_sound = 0;
    const object_break = 1024;
    const object_collide = 512;
    const object_explode = 256;
    const pick_up = 67108864;
    const reload = 262144;
    const shoot = 2097152;
    const step = 32768;
    const take = 8388608;
    const talk = 16384;
    const use = 4194304;
    const weapon = -2147483648;
    const weapon_bullet_hit = -2146959360;
    const weapon_empty = -2146435072;
    const weapon_reload = -2147221504;
    const weapon_shoot = -2145386496;
    const world = 134217728;
    const world_ambient = 134217856;
    const world_object_break = 134218752;
    const world_object_collide = 134218240;
    const world_object_explode = 134217984;
    
};

C++ class task {
    const completed = 2;
    const fail = 0;
    const in_progress = 1;
    const task_dummy = -1;
    
};

C++ class ui_events {
    const BUTTON_CLICKED = 16;
    const BUTTON_DOWN = 17;
    const CHECK_BUTTON_RESET = 20;
    const CHECK_BUTTON_SET = 19;
    const DRAG_DROP_ITEM_DB_CLICK = 24;
    const DRAG_DROP_ITEM_DRAG = 22;
    const DRAG_DROP_ITEM_DROP  = 23;
    const DRAG_DROP_ITEM_RBUTTON_CLICK = 25;
    const EDIT_TEXT_CHANGED = 73;
    const EDIT_TEXT_COMMIT = 74;
    const INTERACTIVE_ITEM_CLICK = 37;
    const INVENTORY_ATTACH_ADDON  = 60;
    const INVENTORY_DETACH_GRENADE_LAUNCHER_ADDON = 66;
    const INVENTORY_DETACH_SCOPE_ADDON = 62;
    const INVENTORY_DETACH_SILENCER_ADDON = 64;
    const INVENTORY_DROP_ACTION = 55;
    const INVENTORY_EAT_ACTION = 56;
    const INVENTORY_TO_BAG_ACTION = 59;
    const INVENTORY_TO_BELT_ACTION  = 57;
    const INVENTORY_TO_SLOT_ACTION = 58;
    const LIST_ITEM_CLICKED = 32;
    const LIST_ITEM_SELECT = 34;
    const MESSAGE_BOX_CANCEL_CLICKED = 44;
    const MESSAGE_BOX_NO_CLICKED = 43;
    const MESSAGE_BOX_OK_CLICKED = 39;
    const MESSAGE_BOX_QUIT_GAME_CLICKED = 42;
    const MESSAGE_BOX_QUIT_WIN_CLICKED = 41;
    const MESSAGE_BOX_YES_CLICKED = 40;
    const OUTFIT_RETURNED_BACK = 54;
    const PDA_CONTACTS_WND_CONTACT_SELECTED = 51;
    const PDA_DIALOG_WND_BACK_BUTTON_CLICKED = 49;
    const PDA_DIALOG_WND_MESSAGE_BUTTON_CLICKED = 50;
    const PROPERTY_CLICKED = 38;
    const RADIOBUTTON_SET = 21;
    const SCROLLBAR_HSCROLL = 29;
    const SCROLLBAR_VSCROLL = 28;
    const SCROLLBOX_MOVE = 27;
    const STATIC_FOCUS_LOST = 15;
    const STATIC_FOCUS_RECEIVED = 14;
    const TAB_CHANGED = 18;
    const TALK_DIALOG_QUESTION_CLICKED = 46;
    const TALK_DIALOG_TRADE_BUTTON_CLICKED = 45;
    const TRADE_WND_CLOSED = 52;
    const UNDRESS_OUTFIT = 53;
    const WINDOW_KEYBOARD_CAPTURE_LOST = 13;
    const WINDOW_KEY_PRESSED = 10;
    const WINDOW_KEY_RELEASED = 11;
    const WINDOW_LBUTTON_DB_CLICK = 9;
    const WINDOW_LBUTTON_DOWN = 0;
    const WINDOW_LBUTTON_UP = 3;
    const WINDOW_MOUSE_CAPTURE_LOST  = 12;
    const WINDOW_MOUSE_MOVE = 6;
    const WINDOW_RBUTTON_DOWN = 1;
    const WINDOW_RBUTTON_UP = 4;
    
};

C++ class rq_target {
    const rqtBoth = 3;
    const rqtDyn = 13;
    const rqtNone = 0;
    const rqtObject = 1;
    const rqtObstacle = 8;
    const rqtShape = 4;
    const rqtStatic = 2;
    
};

C++ class global_flags {
    const FAllowSprint = 128;
    const FCanTake = 2;
    const FCanTrade = 4;
    const FIAlwaysTradable = 4096;
    const FIAlwaysUntradable = 8192;
    const FIManualHighlighting = 32768;
    const FIUngroupable = 16384;
    const FInInterpolate = 1024;
    const FInInterpolation = 512;
    const FIsQuestItem = 2048;
    const FRuckDefault = 32;
    const FUsingCondition = 64;
    const Fbelt = 8;
    const FdropManual = 1;
    const Fruck = 16;
    const Fuseful_for_NPC = 256;
    const flCanSave = 512;
    const flCheckForSeparator = 4096;
    const flExplodEventSent = 2;
    const flExploded = 8;
    const flExploding = 1;
    const flGroupBehaviour = 256;
    const flInteractive = 8;
    const flOfflineNoMove = 64;
    const flReadyToExplode = 4;
    const flSwitchOffline = 4;
    const flSwitchOnline = 2;
    const flUseSmartTerrains = 2048;
    const flUseSwitches = 1;
    const flUsedAI_Locations = 128;
    const flUsefulForAI = 32;
    const flVisibleForAI = 16;
    const flVisibleForMap = 1024;
    
};

C++ class hit_memory_object : entity_memory_object {
 property			amount;
 property			bone_index;
 property			direction;
 property			last_level_time;
 property			level_time;
 property			object_info;
 property			self_info;
    
    function object(const entity_memory_object&);
};

C++ class clsid {
    const actor = 79;
    const ameba_zone = 180;
    const art_bast_artefact = 0;
    const art_black_drops = 1;
    const art_dummy = 3;
    const art_electric_ball = 4;
    const art_faded_ball = 5;
    const art_galantine = 6;
    const art_gravi = 7;
    const art_gravi_black = 2;
    const art_mercury_ball = 8;
    const art_needles = 9;
    const art_rusty_hair = 10;
    const art_thorn = 11;
    const art_zuda = 12;
    const artefact = 39;
    const artefact_s = 93;
    const bloodsucker = 13;
    const bloodsucker_s = 98;
    const boar = 14;
    const boar_s = 99;
    const burer = 15;
    const burer_s = 100;
    const car = 49;
    const car_s = 94;
    const cat = 16;
    const cat_s = 101;
    const chimera = 28;
    const chimera_s = 102;
    const controller = 17;
    const controller_s = 103;
    const crow = 18;
    const device_detector_simple = 52;
    const device_night_vision = 50;
    const device_pda = 51;
    const device_torch = 53;
    const device_torch_s = 122;
    const dog_black = 19;
    const dog_red = 22;
    const dog_s = 106;
    const equ_exo = 54;
    const equ_military = 55;
    const equ_scientific = 56;
    const equ_stalker = 57;
    const equ_stalker_s = 58;
    const flesh = 23;
    const flesh_group = 24;
    const flesh_s = 107;
    const fracture = 25;
    const fracture_s = 109;
    const game = 62;
    const game_cl_artefact_hunt = 43;
    const game_cl_deathmatch = 44;
    const game_cl_single = 45;
    const game_cl_team_deathmatch = 46;
    const game_sv_artefact_hunt = 118;
    const game_sv_deathmatch = 119;
    const game_sv_single = 120;
    const game_sv_team_deathmatch = 121;
    const game_ui_artefact_hunt = 123;
    const game_ui_deathmatch = 124;
    const game_ui_single = 125;
    const game_ui_team_deathmatch = 126;
    const gigant_s = 108;
    const graph_point = 27;
    const hanging_lamp = 83;
    const helicopter = 47;
    const hud_manager = 65;
    const inventory_box = 84;
    const inventory_container = 82;
    const level = 61;
    const level_changer = 75;
    const main_menu = 76;
    const mp_players_bag = 77;
    const nogravity_zone = 187;
    const obj_antirad = 66;
    const obj_attachable = 67;
    const obj_bandage = 68;
    const obj_bolt = 69;
    const obj_bottle = 70;
    const obj_breakable = 80;
    const obj_climable = 81;
    const obj_document = 71;
    const obj_explosive = 72;
    const obj_food = 73;
    const obj_medkit = 74;
    const obj_phskeleton = 90;
    const obj_phys_destroyable = 89;
    const obj_physic = 85;
    const online_offline_group = 78;
    const phantom = 29;
    const poltergeist = 30;
    const poltergeist_s = 110;
    const projector = 87;
    const pseudo_gigant = 26;
    const pseudodog_s = 111;
    const psy_dog = 21;
    const psy_dog_phantom = 20;
    const psy_dog_phantom_s = 104;
    const psy_dog_s = 105;
    const respawn = 91;
    const script_heli = 48;
    const script_object = 95;
    const script_phys = 86;
    const script_restr = 116;
    const script_stalker = 33;
    const script_trader = 35;
    const script_zone = 92;
    const smart_terrain = 96;
    const smart_zone = 97;
    const snork = 31;
    const snork_s = 112;
    const space_restrictor = 115;
    const spectator = 117;
    const stalker = 32;
    const switcher = 88;
    const team_base_zone = 190;
    const torrid_zone = 191;
    const trader = 34;
    const tushkano = 36;
    const tushkano_s = 113;
    const wpn_ak74 = 145;
    const wpn_ak74_s = 127;
    const wpn_ammo = 38;
    const wpn_ammo_m209 = 40;
    const wpn_ammo_og7b = 41;
    const wpn_ammo_vog25 = 42;
    const wpn_binocular = 146;
    const wpn_binocular_s = 128;
    const wpn_bm16 = 147;
    const wpn_bm16_s = 129;
    const wpn_fn2000 = 148;
    const wpn_fort = 149;
    const wpn_grenade_f1 = 59;
    const wpn_grenade_fake = 60;
    const wpn_grenade_launcher = 150;
    const wpn_grenade_rgd5 = 63;
    const wpn_grenade_rpg7 = 64;
    const wpn_groza = 151;
    const wpn_groza_s = 130;
    const wpn_hpsa = 152;
    const wpn_hpsa_s = 131;
    const wpn_knife = 153;
    const wpn_knife_s = 132;
    const wpn_lr300 = 154;
    const wpn_lr300_s = 133;
    const wpn_mounted = 155;
    const wpn_pm = 156;
    const wpn_pm_s = 134;
    const wpn_rg6 = 157;
    const wpn_rg6_s = 135;
    const wpn_rpg7 = 158;
    const wpn_rpg7_s = 136;
    const wpn_scope = 159;
    const wpn_scope_s = 137;
    const wpn_shotgun = 160;
    const wpn_shotgun_s = 138;
    const wpn_silencer = 161;
    const wpn_stat_mgun = 162;
    const wpn_svd = 163;
    const wpn_svd_s = 139;
    const wpn_svu = 164;
    const wpn_svu_s = 140;
    const wpn_usp45 = 165;
    const wpn_usp45_s = 141;
    const wpn_val = 166;
    const wpn_val_s = 142;
    const wpn_vintorez = 167;
    const wpn_vintorez_s = 143;
    const wpn_walther = 168;
    const wpn_walther_s = 144;
    const wpn_wmagaz = 169;
    const wpn_wmaggl = 170;
    const zombie = 37;
    const zombie_s = 114;
    const zone = 192;
    const zone_acid_fog = 179;
    const zone_bfuzz = 181;
    const zone_bfuzz_s = 171;
    const zone_dead = 182;
    const zone_electra_s = 172;
    const zone_galant_s = 173;
    const zone_galantine = 183;
    const zone_greedy_s = 184;
    const zone_ice_s = 174;
    const zone_mbald_s = 175;
    const zone_mincer = 186;
    const zone_mincer_s = 176;
    const zone_mosquito_bald = 185;
    const zone_radioactive = 188;
    const zone_rusty_hair = 189;
    const zone_sakbuzz_s = 177;
    const zone_zharka_s = 178;
    
};

C++ class memory_info : visible_memory_object {
 property			hit_info;
 property			last_level_time;
 property			level_time;
 property			object_info;
 property			self_info;
 property			sound_info;
 property			visual_info;
    
    function object(const game_memory_object&);
};

C++ class MonsterSpace {
    const head_anim_angry = 1;
    const head_anim_glad = 2;
    const head_anim_kind = 3;
    const head_anim_normal = 0;
    const sound_script = 128;
    
};

C++ class not_yet_visible_object {
 property			value;
    
    function object(const not_yet_visible_object&);
};

C++ class ray_pick {
    ray_pick ();
    ray_pick (vector&, vector&, number, enum collide::rq_target, game_object*);
    
    function set_position(vector&);
    function get_result();
    function set_ignore_object(game_object*);
    function set_direction(vector&);
    function get_distance();
    function query();
    function get_element();
    function set_flags(enum collide::rq_target);
    function set_range(number);
    function get_object();
};

C++ class CSightParams {
    const eSightTypeCover = 5;
    const eSightTypeCoverLookOver = 8;
    const eSightTypeCurrentDirection = 0;
    const eSightTypeDirection = 2;
    const eSightTypeDummy = -1;
    const eSightTypeFireObject = 9;
    const eSightTypeFirePosition = 10;
    const eSightTypeLookOver = 7;
    const eSightTypeObject = 4;
    const eSightTypePathDirection = 1;
    const eSightTypePosition = 3;
    const eSightTypeSearch = 6;
    
 property			m_object;
 property			m_sight_type;
 property			m_vector;
    
    CSightParams ();
    
};

C++ class sound_memory_object : game_memory_object {
 property			last_level_time;
 property			level_time;
 property			object_info;
 property			power;
 property			self_info;
    
    function object(const game_memory_object&);
    function type() const;
};

C++ class visible_memory_object : game_memory_object {
 property			last_level_time;
 property			level_time;
 property			object_info;
 property			self_info;
    
    function object(const game_memory_object&);
};

C++ class FS_item {
    function Modif();
    function NameFull();
    function NameShort();
    function ModifDigitOnly();
    function Size();
};

C++ class Patch_Dawnload_Progress {
    function GetProgress();
    function GetInProgress();
    function GetStatus();
    function GetFlieName();
};

C++ class RPoint {
 property			A                        (vector);
 property			P                        (vector);
    
    RPoint ();
    
};

C++ class color {
 property			b                        (number);
 property			g                        (number);
 property			r                        (number);
    
    color ();
    color (number, number, number);
    
    function set(number, number, number);
};

C++ class SDrawStaticStruct {
 property			m_endTime                (number);
    
    function wnd();
};

C++ class duality {
 property			h                        (number);
 property			v                        (number);
    
    duality ();
    duality (number, number);
    
    function set(number, number);
};

C++ class SEntityState {
 property			a_velocity;
 property			class_name;
 property			crouch;
 property			fall;
 property			jump;
 property			sprint;
 property			velocity;
    
};

C++ class Int64 {
 property			high                     (number);
 property			low                      (number);
    
    function to_string();
};

C++ class memory_object {
 property			last_level_time;
 property			level_time;
    
};

C++ class noise {
 property			fps                      (number);
 property			grain                    (number);
 property			intensity                (number);
    
    noise ();
    noise (number, number, number);
    
    function set(number, number, number);
};

C++ class object_params {
 property			level_vertex;
 property			position;
    
};

C++ class effector_params {
 property			blur                     (number);
 property			color_add                (color);
 property			color_base               (color);
 property			color_gray               (color);
 property			dual                     (duality);
 property			gray                     (number);
 property			noise                    (noise);
    
    effector_params ();
    
    function assign(effector_params*, effector_params*);
};

C++ class SRotation {
 property			pitch                    (number);
 property			roll                     (number);
 property			yaw                      (number);
    
    SRotation ();
    SRotation (number, number, number);
    
    function set(SRotation*, SRotation*);
    function set(SRotation*, number, number, number);
    function set_dir(SRotation*, const vector&, boolean);
    function get_dir(SRotation*, boolean);
};

C++ class SZoneMapEntityData {
 property			color                    (number);
 property			pos                      (vector);
    
    SZoneMapEntityData ();
    
};

C++ class TEX_INFO {
    function get_rect();
    function get_file_name();
};

C++ class dMass {
 property			mass                     (number);
    
    function set_zero();
    function adjust(number);
    function set_box(number, number, number, number);
    function translate(number, number, number);
    function set_sphere(number, number);
};

C++ class fs_file {
 property			modif;
 property			name;
 property			ptr;
 property			size_compressed;
 property			size_real;
 property			vfs;
    
};

C++ class game_PlayerState {
 property			GameID                   (number);
 property			LastBuyAcount            (number);
 property			RespawnTime              (number);
 property			deaths                   (number);
 property			flags                    (number);
 property			kills                    (number);
 property			lasthitter               (number);
 property			lasthitweapon            (number);
 property			money_delta              (number);
 property			money_for_round          (number);
 property			pItemList                (class xr_vector<unsigned short,class xalloc<unsigned short> >);
 property			ping                     (number);
 property			skin                     (signed char);
 property			team                     (number);
    
    game_PlayerState ();
    
    function clear();
    function setName(string);
    function testFlag(number) const;
    function net_Import(net_packet&);
    function resetFlag(number);
    function net_Export(net_packet&, number);
    function getName();
    function setFlag(number);
};

C++ class DIK_keys {
    const DIK_0 = 11;
    const DIK_1 = 2;
    const DIK_2 = 3;
    const DIK_3 = 4;
    const DIK_4 = 5;
    const DIK_5 = 6;
    const DIK_6 = 7;
    const DIK_7 = 8;
    const DIK_8 = 9;
    const DIK_9 = 10;
    const DIK_A = 30;
    const DIK_ADD = 78;
    const DIK_APOSTROPHE = 40;
    const DIK_APPS = 221;
    const DIK_AT = 145;
    const DIK_AX = 150;
    const DIK_B = 48;
    const DIK_BACK = 14;
    const DIK_BACKSLASH = 43;
    const DIK_C = 46;
    const DIK_CAPITAL = 58;
    const DIK_CIRCUMFLEX = 144;
    const DIK_COLON = 146;
    const DIK_COMMA = 51;
    const DIK_CONVERT = 121;
    const DIK_D = 32;
    const DIK_DECIMAL = 83;
    const DIK_DELETE = 211;
    const DIK_DIVIDE = 181;
    const DIK_DOWN = 208;
    const DIK_E = 18;
    const DIK_END = 207;
    const DIK_EQUALS = 13;
    const DIK_ESCAPE = 1;
    const DIK_F = 33;
    const DIK_F1 = 59;
    const DIK_F10 = 68;
    const DIK_F11 = 87;
    const DIK_F12 = 88;
    const DIK_F13 = 100;
    const DIK_F14 = 101;
    const DIK_F15 = 102;
    const DIK_F2 = 60;
    const DIK_F3 = 61;
    const DIK_F4 = 62;
    const DIK_F5 = 63;
    const DIK_F6 = 64;
    const DIK_F7 = 65;
    const DIK_F8 = 66;
    const DIK_F9 = 67;
    const DIK_G = 34;
    const DIK_GRAVE = 41;
    const DIK_H = 35;
    const DIK_HOME = 199;
    const DIK_I = 23;
    const DIK_INSERT = 210;
    const DIK_J = 36;
    const DIK_K = 37;
    const DIK_KANA = 112;
    const DIK_KANJI = 148;
    const DIK_L = 38;
    const DIK_LBRACKET = 26;
    const DIK_LCONTROL = 29;
    const DIK_LEFT = 203;
    const DIK_LMENU = 56;
    const DIK_LSHIFT = 42;
    const DIK_LWIN = 219;
    const DIK_M = 50;
    const DIK_MINUS = 12;
    const DIK_MULTIPLY = 55;
    const DIK_N = 49;
    const DIK_NEXT = 209;
    const DIK_NOCONVERT = 123;
    const DIK_NUMLOCK = 69;
    const DIK_NUMPAD0 = 82;
    const DIK_NUMPAD1 = 79;
    const DIK_NUMPAD2 = 80;
    const DIK_NUMPAD3 = 81;
    const DIK_NUMPAD4 = 75;
    const DIK_NUMPAD5 = 76;
    const DIK_NUMPAD6 = 77;
    const DIK_NUMPAD7 = 71;
    const DIK_NUMPAD8 = 72;
    const DIK_NUMPAD9 = 73;
    const DIK_NUMPADCOMMA = 179;
    const DIK_NUMPADENTER = 156;
    const DIK_NUMPADEQUALS = 141;
    const DIK_O = 24;
    const DIK_P = 25;
    const DIK_PAUSE = 197;
    const DIK_PERIOD = 52;
    const DIK_PRIOR = 201;
    const DIK_Q = 16;
    const DIK_R = 19;
    const DIK_RBRACKET = 27;
    const DIK_RCONTROL = 157;
    const DIK_RETURN = 28;
    const DIK_RIGHT = 205;
    const DIK_RMENU = 184;
    const DIK_RSHIFT = 54;
    const DIK_RWIN = 220;
    const DIK_S = 31;
    const DIK_SCROLL = 70;
    const DIK_SEMICOLON = 39;
    const DIK_SLASH = 53;
    const DIK_SPACE = 57;
    const DIK_STOP = 149;
    const DIK_SUBTRACT = 74;
    const DIK_SYSRQ = 183;
    const DIK_T = 20;
    const DIK_TAB = 15;
    const DIK_U = 22;
    const DIK_UNDERLINE = 147;
    const DIK_UNLABELED = 151;
    const DIK_UP = 200;
    const DIK_V = 47;
    const DIK_W = 17;
    const DIK_X = 45;
    const DIK_Y = 21;
    const DIK_YEN = 125;
    const DIK_Z = 44;
    const MOUSE_1 = 337;
    const MOUSE_2 = 338;
    const MOUSE_3 = 339;
    
};

C++ class color_animator {
    color_animator (string);
    
    function calculate(number);
    function load(string);
    function length();
};

C++ class profile_timer {
    profile_timer ();
    profile_timer (profile_timer&);
    
    operator +(threadconst profile_timer&, profile_timer);
    function stop();
    function start();
    function time() const;
    operator <(threadconst profile_timer&, profile_timer);
};

C++ class rq_result {
 property			element;
 property			object;
 property			range;
    
    rq_result ();
    
};

C++ class token {
 property			id                       (number);
 property			name                     (string);
    
    token ();
    
};

C++ class action_base {
 property			object;
 property			storage;
    
    action_base ();
    action_base (game_object*);
    action_base (game_object*, string);
    
    function finalize();
    function add_precondition(const world_property&);
    function execute();
    function remove_precondition(const number&);
    function setup(game_object*, property_storage*);
    function set_weight(const number&);
    function add_effect(const world_property&);
    function weight(const world_state&, const world_state&) const;
    function initialize();
    function remove_effect(const number&);
};

C++ class action_planner {
 property			object;
 property			storage;
    
    action_planner ();
    
    function initialized() const;
    function remove_action(const number&);
    function action(const number&);
    function add_action(const number&, action_base*);
    function update();
    function clear();
    function evaluator(const number&);
    function setup(game_object*);
    function set_goal_world_state(action_planner*, world_state*);
    function current_action();
    function add_evaluator(const number&, property_evaluator*);
    function remove_evaluator(const number&);
    function current_action_id() const;
    function actual(const action_planner*);
};

C++ class planner_action : action_planner,action_base {
 property			object;
 property			storage;
    
    planner_action ();
    planner_action (game_object*);
    planner_action (game_object*, string);
    
    function finalize();
    function action(const number&);
    function add_precondition(const world_property&);
    function add_action(const number&, action_base*);
    function update();
    function weight(const world_state&, const world_state&) const;
    function current_action();
    function current_action_id() const;
    function initialized() const;
    function remove_effect(const number&);
    function initialize();
    function remove_action(const number&);
    function clear();
    function remove_precondition(const number&);
    function execute();
    function evaluator(const number&);
    function set_goal_world_state(action_planner*, world_state*);
    function set_weight(const number&);
    function add_effect(const world_property&);
    function actual(const action_planner*);
    function setup(game_object*);
    function setup(game_object*, property_storage*);
    function remove_evaluator(const number&);
    function add_evaluator(const number&, property_evaluator*);
};

C++ class world_state {
    world_state ();
    world_state (world_state);
    
    function clear();
    function includes(const world_state&) const;
    operator ==(threadconst world_state&, world_state);
    function remove_property(const number&);
    function add_property(const world_property&);
    operator <(threadconst world_state&, world_state);
    function property(const number&) const;
};

C++ class world_property {
    world_property (number, boolean);
    
    function value() const;
    operator <(threadconst world_property&, world_property);
    function condition() const;
    operator ==(threadconst world_property&, world_property);
};

C++ class property_evaluator {
 property			object;
 property			storage;
    
    property_evaluator ();
    property_evaluator (game_object*);
    property_evaluator (game_object*, string);
    
    function evaluate();
    function setup(game_object*, property_storage*);
};

C++ class property_evaluator_const : property_evaluator {
 property			object;
 property			storage;
    
    property_evaluator_const (boolean);
    
    function evaluate();
    function setup(game_object*, property_storage*);
};

C++ class ipure_alife_load_object {
};

C++ class ipure_alife_save_object {
};

C++ class ipure_alife_load_save_object : ipure_alife_load_object,ipure_alife_save_object {
};

C++ class Fbox {
 property			max                      (vector);
 property			min                      (vector);
    
    Fbox ();
    
};

C++ class CAI_Bloodsucker : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CAI_Bloodsucker ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CAI_Boar : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CAI_Boar ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CAI_Dog : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CAI_Dog ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CAI_Flesh : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CAI_Flesh ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CAI_PseudoDog : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CAI_PseudoDog ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CAI_Stalker : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CAI_Stalker ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CAI_Trader : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CAI_Trader ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CALifeHumanBrain : CALifeMonsterBrain {
    function can_choose_alife_tasks(boolean);
    function update();
    function movement(const CALifeMonsterBrain*);
};

C++ class CALifeMonsterBrain {
    function can_choose_alife_tasks(boolean);
    function update();
    function movement(const CALifeMonsterBrain*);
};

C++ class CALifeMonsterDetailPathManager {
    function completed() const;
    function target(const number&, const number&, const vector&);
    function target(const number&);
    function target(const CALifeSmartTerrainTask*);
    function speed(const number&);
    function speed() const;
    function failed() const;
    function actual() const;
};

C++ class CALifeMonsterMovementManager {
    function completed() const;
    function patrol(const CALifeMonsterMovementManager*);
    function actual() const;
    function path_type(const enum MovementManager::EPathType&);
    function path_type() const;
    function detail(const CALifeMonsterMovementManager*);
};

C++ class CALifeMonsterPatrolPathManager {
    function path(string);
    function target_game_vertex_id() const;
    function target_position(CALifeMonsterPatrolPathManager*);
    function target_level_vertex_id() const;
    function completed() const;
    function route_type(const enum PatrolPathManager::EPatrolRouteType&);
    function route_type() const;
    function use_randomness(const boolean&);
    function use_randomness() const;
    function start_type(const enum PatrolPathManager::EPatrolStartType&);
    function start_type() const;
    function start_vertex_index(const number&);
    function actual() const;
};

C++ class alife_simulator {
 property			loaded_save_name;
 property			save_name;
    
    function level_name(const alife_simulator*, number);
    function dont_has_info(const alife_simulator*, const number&, string);
    function update(alife_simulator*);
    function create_ammo(alife_simulator*, string, const vector&, number, number, number, number);
    function add_out_restriction(alife_simulator*, cse_alife_monster_abstract*, number);
    function assign_story_id(number, number);
    function set_interactive(number, boolean);
    function add_in_restriction(alife_simulator*, cse_alife_monster_abstract*, number);
    function remove_in_restriction(alife_simulator*, cse_alife_monster_abstract*, number);
    function teleport_object(number, number, number, const vector&);
    function switch_distance() const;
    function switch_distance(number);
    function level_id(alife_simulator*);
    function valid_object_id(const alife_simulator*, number);
    function remove_out_restriction(alife_simulator*, cse_alife_monster_abstract*, number);
    function has_info(const alife_simulator*, const number&, string);
    function kill_entity(cse_alife_monster_abstract*, const number&, cse_alife_schedulable*);
    function kill_entity(alife_simulator*, cse_alife_monster_abstract*, const number&);
    function kill_entity(alife_simulator*, cse_alife_monster_abstract*);
    function set_switch_online(number, boolean);
    function set_switch_offline(number, boolean);
    function actor(const alife_simulator*);
    function remove_all_restrictions(number, const enum RestrictionSpace::ERestrictorTypes&);
    function object(const alife_simulator*, number);
    function object(const alife_simulator*, string);
    function object(const alife_simulator*, number, boolean);
    function spawn_id(alife_simulator*, number);
    function story_object(const alife_simulator*, number);
    function release(alife_simulator*, cse_abstract*, boolean);
    function level_exists(const alife_simulator*, number);
    function create(alife_simulator*, number);
    function create(alife_simulator*, string, const vector&, number, number, number);
    function create(alife_simulator*, string, const vector&, number, number);
};

C++ class CALifeSmartTerrainTask {
    CALifeSmartTerrainTask (string);
    CALifeSmartTerrainTask (string, number);
    
    function level_vertex_id() const;
    function position() const;
    function game_vertex_id() const;
};

C++ class CActorBase : CInventoryOwner,CGameObject {
 property			allow_talk               (boolean);
 property			allow_trade              (boolean);
 property			class_id;
 property			class_name;
 property			climb_coef               (number);
 property			condition;
 property			crouch_coef              (number);
 property			disp_accel_factor        (number);
 property			disp_aim                 (number);
 property			disp_base                (number);
 property			disp_crouch_factor       (number);
 property			disp_crouch_no_acc_factor(number);
 property			disp_vel_factor          (number);
 property			hit_probability          (number);
 property			hit_slowmo               (number);
 property			immunities;
 property			inventory;
 property			item_flags               (number);
 property			jump_speed               (number);
 property			money                    (number);
 property			movement;
 property			night_vision_device;
 property			orientation;
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			raw_money                (number);
 property			run_back_coef            (number);
 property			run_coef                 (number);
 property			run_strafe_coef          (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			sprint_koef              (number);
 property			state;
 property			talking;
 property			updated_times            (number);
 property			walk_accel               (number);
 property			walk_back_coef           (number);
 property			walk_strafe_coef         (number);
    
    function getEnabled() const;
    function save_stat_event(CActorBase*, number, string);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function press_action(number);
    function load_config(string);
    function block_action(enum EGameActions);
    function net_Export(net_packet&);
    function Visual();
    function net_Import(net_packet&);
    function release_action(number);
    function test_server_flag(number) const;
    function hold_action(number);
    function _construct();
    function unblock_action(enum EGameActions);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CActorConditionBase {
 property			accel_k                  (number);
 property			alcohol_health           (number);
 property			alcohol_v                (number);
 property			bleeding_v               (number);
 property			cant_spint_power_begin   (number);
 property			cant_spint_power_end     (number);
 property			cant_sprint;
 property			cant_walk;
 property			cant_walk_power_begin    (number);
 property			cant_walk_power_end      (number);
 property			circumspection_v         (number);
 property			class_name;
 property			health                   (number);
 property			health_max               (number);
 property			health_restore_v         (number);
 property			jump_power               (number);
 property			jump_weight_power        (number);
 property			limping;
 property			limping_health_begin     (number);
 property			limping_health_end       (number);
 property			limping_power_begin      (number);
 property			limping_power_end        (number);
 property			max_power_leak_speed     (number);
 property			max_walk_weight          (number);
 property			morale_v                 (number);
 property			overweight_jump_k        (number);
 property			overweight_walk_k        (number);
 property			psy_health_v             (number);
 property			radiation_health_v       (number);
 property			radiation_v              (number);
 property			satiety                  (number);
 property			satiety_health_v         (number);
 property			satiety_v                (number);
 property			sprint_k                 (number);
 property			stand_power              (number);
 property			walk_power               (number);
 property			walk_weight_power        (number);
 property			wound_incarnation_v      (number);
    
    function get_wound_size(CActorConditionBase*, number, number);
    function get_wound_total_size(CActorConditionBase*, number);
};

C++ class CActorCondition : CActorConditionBase,CEntityCondition {
 property			accel_k                  (number);
 property			alcohol_health           (number);
 property			alcohol_v                (number);
 property			bleeding_v               (number);
 property			cant_spint_power_begin   (number);
 property			cant_spint_power_end     (number);
 property			cant_sprint;
 property			cant_walk;
 property			cant_walk_power_begin    (number);
 property			cant_walk_power_end      (number);
 property			circumspection_v         (number);
 property			class_name;
 property			health                   (number);
 property			health_hit_part          (number);
 property			health_max               (number);
 property			health_restore_v         (number);
 property			is_bleeding;
 property			jump_power               (number);
 property			jump_weight_power        (number);
 property			limping;
 property			limping_health_begin     (number);
 property			limping_health_end       (number);
 property			limping_power_begin      (number);
 property			limping_power_end        (number);
 property			max_health               (number);
 property			max_power_leak_speed     (number);
 property			max_walk_weight          (number);
 property			min_wound_size           (number);
 property			morale                   (number);
 property			morale_max               (number);
 property			morale_v                 (number);
 property			overweight_jump_k        (number);
 property			overweight_walk_k        (number);
 property			power                    (number);
 property			power_hit_part           (number);
 property			power_max                (number);
 property			psy_health               (number);
 property			psy_health_max           (number);
 property			psy_health_v             (number);
 property			radiation                (number);
 property			radiation_health_v       (number);
 property			radiation_max            (number);
 property			radiation_v              (number);
 property			satiety                  (number);
 property			satiety_health_v         (number);
 property			satiety_v                (number);
 property			sprint_k                 (number);
 property			stand_power              (number);
 property			walk_power               (number);
 property			walk_weight_power        (number);
 property			wound_incarnation_v      (number);
    
    function get_wound_size(CActorConditionBase*, number, number);
    function get_wound_total_size(CActorConditionBase*, number);
};

C++ class CActor : CActorBase,CEntityAlive {
 property			allow_talk               (boolean);
 property			allow_trade              (boolean);
 property			class_id;
 property			class_name;
 property			climb_coef               (number);
 property			condition;
 property			crouch_coef              (number);
 property			disp_accel_factor        (number);
 property			disp_aim                 (number);
 property			disp_base                (number);
 property			disp_crouch_factor       (number);
 property			disp_crouch_no_acc_factor(number);
 property			disp_vel_factor          (number);
 property			hit_probability          (number);
 property			hit_slowmo               (number);
 property			immunities;
 property			inventory;
 property			item_flags               (number);
 property			jump_speed               (number);
 property			money                    (number);
 property			movement;
 property			night_vision_device;
 property			orientation;
 property			radiation                (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			raw_money                (number);
 property			run_back_coef            (number);
 property			run_coef                 (number);
 property			run_strafe_coef          (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			sprint_koef              (number);
 property			state;
 property			talking;
 property			updated_times            (number);
 property			walk_accel               (number);
 property			walk_back_coef           (number);
 property			walk_strafe_coef         (number);
    
    function hold_action(number);
    function save_stat_event(CActorBase*, number, string);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function press_action(number);
    function load_config(string);
    function release_action(number);
    function net_Export(net_packet&);
    function Visual();
    function net_Import(net_packet&);
    function block_action(enum EGameActions);
    function test_server_flag(number) const;
    function set_schedule(ISheduled*, number, number);
    function getEnabled() const;
    function unblock_action(enum EGameActions);
    function _construct();
    function use(CGameObject*);
};

C++ class CApplication {
    function set_load_texture(string);
};

C++ class CArtefact : CInventoryItemObject {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    function Visual();
    function getEnabled() const;
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function _construct();
    function load_config(string);
    function set_schedule(ISheduled*, number, number);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CBaseMonster : CInventoryOwner,CEntityAlive {
 property			agressive                (boolean);
 property			allow_talk               (boolean);
 property			allow_trade              (boolean);
 property			angry                    (boolean);
 property			class_id;
 property			class_name;
 property			condition;
 property			damaged                  (boolean);
 property			grownlig                 (boolean);
 property			inventory;
 property			item_flags               (number);
 property			money                    (number);
 property			radiation                (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			raw_money                (number);
 property			run_turn_left            (boolean);
 property			run_turn_right           (boolean);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			sleep                    (boolean);
 property			state_invisible          (boolean);
 property			talking;
 property			updated_times            (number);
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CBastArtefact : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CBastArtefact ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CBlackDrops : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CBlackDrops ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CBlackGraviArtefact : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CBlackGraviArtefact ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CBlend {
};

C++ class CBoneInstance {
 property			mRenderTransform;
 property			mTransform;
    
    function get_param(number);
    function set_param(number, number);
};

C++ class CBurer : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CBurer ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CCameraBase {
 property			aspect                   (number);
 property			direction;
 property			fov                      (number);
 property			lim_pitch                (Fvector2);
 property			lim_roll                 (Fvector2);
 property			lim_yaw                  (Fvector2);
 property			pitch                    (number);
 property			position                 (vector);
 property			roll                     (number);
 property			yaw                      (number);
    
};

C++ class CCar : CGameObject,holder {
    const eWpnActivate = 3;
    const eWpnAutoFire = 5;
    const eWpnDesiredDir = 1;
    const eWpnDesiredPos = 2;
    const eWpnFire = 4;
    const eWpnToDefaultDir = 6;
    
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CCar ();
    
    function PlayDamageParticles();
    function _construct();
    function getVisible() const;
    function SetfFuelTank(number);
    function load_config(string);
    function net_Export(net_packet&);
    function Visual();
    function SetExplodeTime(number);
    function net_Import(net_packet&);
    function HasWeapon();
    function SetfHealth(number);
    function engaged();
    function test_server_flag(number) const;
    function StartEngine();
    function SetfFuelConsumption(number);
    function GetfFuelTank();
    function getEnabled() const;
    function GetfHealth() const;
    function SetfFuel(number);
    function net_Spawn(cse_abstract*);
    function StopEngine();
    function SetParam(number, vector);
    function GetfFuel();
    function IsObjectVisible(game_object*);
    function IsActiveEngine();
    function ChangefFuel(number);
    function ChangefHealth(number);
    function StopDamageParticles();
    function CurrentVel();
    function FireDirDiff();
    function ExplodeTime();
    function set_schedule(ISheduled*, number, number);
    function GetfFuelConsumption();
    function Action(number, number);
    function CanHit();
    function CarExplode();
    function use(CGameObject*);
};

C++ class CCat : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CCat ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CChimera : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CChimera ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class client_spawn_manager {
    function remove(number, number);
    function add(number, number, const function<void>&, object);
    function add(number, number, const function<void>&);
};

C++ class CConsole {
 property			visible;
    
    function execute_script(string);
    function get_string(string);
    function execute(string);
    function disable_command(CConsole*, string);
    function show();
    function get_token(string);
    function get_integer(CConsole*, string);
    function get_float(CConsole*, string);
    function enable_command(CConsole*, string);
    function get_bool(CConsole*, string);
    function hide();
};

C++ class CController : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CController ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class cover_point {
    function level_vertex_id() const;
    function position() const;
};

C++ class CCustomOutfit : CInventoryItemObject {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			battery_charge           (number);
 property			burn_protection          (number);
 property			chemical_burn_protection (number);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			explosion_protection     (number);
 property			fire_wound_protection    (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			physic_strike_protection (number);
 property			power_loss               (number);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_protection     (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			shock_protection         (number);
 property			slot                     (number);
 property			slots                    (object);
 property			strike_protection        (number);
 property			telepatic_protection     (number);
 property			updated_times            (number);
 property			wound_2_protection       (number);
 property			wound_protection         (number);
    
    function Visual();
    function getEnabled() const;
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function test_server_flag(number) const;
    function _construct();
    function load_config(string);
    function set_schedule(ISheduled*, number, number);
    function set_visible_in_slot(number, boolean);
    function condition_ex(number) const;
    function net_Export(net_packet&);
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CustomZone : CSpaceRestrictor {
 property			attenuation              (number);
 property			class_id;
 property			class_name;
 property			effective_radius         (number);
 property			hit_impulse_scale        (number);
 property			item_flags               (number);
 property			max_power                (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			radius;
 property			restrictor_center;
 property			restrictor_type;
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			start_time               (number);
 property			state_time               (number);
 property			time_to_live             (number);
 property			updated_times            (number);
 property			zone_active              (boolean);
 property			zone_state               (number);
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function power(number);
    function get_state_time(enum CCustomZone::EZoneState);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function relative_power(number);
    function use(CGameObject*);
};

C++ class danger_object {
    const attack_sound = 1;
    const attacked = 5;
    const bullet_ricochet = 0;
    const enemy_sound = 7;
    const entity_attacked = 2;
    const entity_corpse = 4;
    const entity_death = 3;
    const grenade = 6;
    const hit = 2;
    const sound = 1;
    const visual = 0;
    
    function type() const;
    function time() const;
    operator ==(threadconst danger_object&, danger_object);
    function position(const danger_object*);
    function object(const danger_object*);
    function perceive_type() const;
    function dependent_object(const danger_object*);
};

C++ class CDialogHolder {
    function start_stop_dialog(CUIDialogWnd*, boolean);
    function start_stop_menu(CUIDialogWnd*, boolean);
    function RemoveDialogToRender(CUIWindow*);
    function AddDialogToRender(CUIWindow*);
    function MainInputReceiver();
};

C++ class CDummyArtefact : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CDummyArtefact ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class cef_storage {
    function evaluate(cef_storage*, string, game_object*);
    function evaluate(cef_storage*, string, game_object*, game_object*);
    function evaluate(cef_storage*, string, game_object*, game_object*, game_object*);
    function evaluate(cef_storage*, string, game_object*, game_object*, game_object*, game_object*);
    function evaluate(cef_storage*, string, cse_alife_object*);
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*);
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*, cse_alife_object*);
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*, cse_alife_object*, cse_alife_object*);
};

C++ class CEatableItem : CInventoryItem {
 property			class_name;
 property			cost                     (number);
 property			eat_health               (number);
 property			eat_max_power            (number);
 property			eat_portions_num         (number);
 property			eat_power                (number);
 property			eat_radiation            (number);
 property			eat_satiety              (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			quest_item               (boolean);
 property			slot                     (number);
 property			slots                    (object);
 property			wounds_heal_perc         (number);
    
    function visible_in_slot(number);
    function set_visible_in_slot(number, boolean);
};

C++ class CEatableItemObject : CEatableItem,CGameObject {
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			eat_health               (number);
 property			eat_max_power            (number);
 property			eat_portions_num         (number);
 property			eat_power                (number);
 property			eat_radiation            (number);
 property			eat_satiety              (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
 property			wounds_heal_perc         (number);
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function getEnabled() const;
    function visible_in_slot(number);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function load_config(string);
    function use(CGameObject*);
};

C++ class CEffectorZoomInertion {
 property			camera_move_epsilon      (number);
 property			current_point            (vector);
 property			delta_time               (number);
 property			disp_min                 (number);
 property			disp_radius              (number);
 property			epsilon                  (number);
 property			float_speed              (number);
 property			last_point               (vector);
 property			speed_min                (number);
 property			target_point             (vector);
 property			target_vel               (vector);
 property			time_passed              (number);
 property			zoom_aim_disp_k          (number);
 property			zoom_aim_speed_k         (number);
    
};

C++ class CElectricBall : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CElectricBall ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CEntity : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CEntityAlive : CEntity {
 property			class_id;
 property			class_name;
 property			condition;
 property			item_flags               (number);
 property			radiation                (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function getEnabled() const;
    function use(CGameObject*);
};

C++ class CEntityCondition {
 property			class_name;
 property			health                   (number);
 property			health_hit_part          (number);
 property			is_bleeding;
 property			max_health               (number);
 property			min_wound_size           (number);
 property			morale                   (number);
 property			morale_max               (number);
 property			power                    (number);
 property			power_hit_part           (number);
 property			power_max                (number);
 property			psy_health               (number);
 property			psy_health_max           (number);
 property			radiation                (number);
 property			radiation_max            (number);
    
};

C++ class explosive {
 property			blast                    (number);
 property			blast_impulse            (number);
 property			blast_r                  (number);
 property			current_parent           (number);
 property			explode_duration;
 property			explode_duration_max     (number);
 property			explode_pos;
 property			explosion_flags;
 property			fragment_speed           (number);
 property			frags                    (number);
 property			frags_hit                (number);
 property			frags_hit_impulse        (number);
 property			frags_r                  (number);
 property			light_color;
 property			light_range              (number);
 property			light_time               (number);
    
    function explode();
};

C++ class CF1 : CGrenade {
 property			blast                    (number);
 property			blast_impulse            (number);
 property			blast_r                  (number);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			current_parent           (number);
 property			destroy_time             (number);
 property			destroy_time_max         (number);
 property			explode_duration;
 property			explode_duration_max     (number);
 property			explode_pos;
 property			explosion_flags;
 property			fragment_speed           (number);
 property			frags                    (number);
 property			frags_hit                (number);
 property			frags_hit_impulse        (number);
 property			frags_r                  (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			light_color;
 property			light_range              (number);
 property			light_time               (number);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CF1 ();
    
    function Visual();
    function getEnabled() const;
    function net_Import(net_packet&);
    function explode();
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function _construct();
    function set_schedule(ISheduled*, number, number);
    function visible_in_slot(number);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function load_config(string);
    function use(CGameObject*);
};

C++ class CFadedBall : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CFadedBall ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CFracture : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CFracture ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CGalantineArtefact : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CGalantineArtefact ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CGameFont {
    const alCenter = 2;
    const alLeft = 0;
    const alRight = 1;
    
};

C++ class CGameGraph {
    function vertex_id(const GameGraph__CVertex*) const;
    function accessible(const CGameGraph*, const number&);
    function accessible(const CGameGraph*, const number&, boolean);
    function vertex(const number&) const;
    function valid_vertex_id(const number&) const;
};

C++ class CGameObject : DLL_Pure,ISheduled,ICollidable,IRenderable {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CGameObject ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function getEnabled() const;
    function use(CGameObject*);
};

C++ class CGameTask {
    CGameTask ();
    
    function get_id();
    function set_priority(number);
    function add_objective(SGameTaskObjective*);
    function set_title(string);
    function get_objectives_cnt();
    function get_title();
    function set_id(string);
    function get_objective(number);
    function load(string);
    function get_priority();
};

C++ class CGraviArtefact : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CGraviArtefact ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CGrenade : explosive,CMissile {
 property			blast                    (number);
 property			blast_impulse            (number);
 property			blast_r                  (number);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			current_parent           (number);
 property			destroy_time             (number);
 property			destroy_time_max         (number);
 property			explode_duration;
 property			explode_duration_max     (number);
 property			explode_pos;
 property			explosion_flags;
 property			fragment_speed           (number);
 property			frags                    (number);
 property			frags_hit                (number);
 property			frags_hit_impulse        (number);
 property			frags_r                  (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			light_color;
 property			light_range              (number);
 property			light_time               (number);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function explode();
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CHairsZone : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CHairsZone ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class hanging_lamp : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    hanging_lamp ();
    
    function set_color(const fcolor&, number);
    function set_position(const vector&);
    function getEnabled() const;
    function set_virtual_size(number, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function load_config(string);
    function net_Export(net_packet&);
    function get_light(number);
    function Visual();
    function _construct();
    function set_brightness(number);
    function net_Import(net_packet&);
    function set_angle(number, number);
    function synchronize();
    function set_rgb(number, number, number, number);
    function set_animation(string);
    function set_direction(const vector&, number);
    function set_texture(string, number);
    function test_server_flag(number) const;
    function set_range(number, number);
    function turn_off();
    function turn_on();
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CHelicopter : CGameObject {
    const eAlive = 0;
    const eBodyByPath = 0;
    const eBodyToPoint = 1;
    const eDead = 1;
    const eEnemyEntity = 2;
    const eEnemyNone = 0;
    const eEnemyPoint = 1;
    const eMovLanding = 4;
    const eMovNone = 0;
    const eMovPatrolPath = 2;
    const eMovRoundPath = 3;
    const eMovTakeOff = 5;
    const eMovToPoint = 1;
    
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			m_dead;
 property			m_exploded;
 property			m_flame_started;
 property			m_light_started;
 property			m_max_mgun_dist          (number);
 property			m_max_rocket_dist        (number);
 property			m_min_mgun_dist          (number);
 property			m_min_rocket_dist        (number);
 property			m_syncronize_rocket      (boolean);
 property			m_time_between_rocket_attack(number);
 property			m_use_mgun_on_attack     (boolean);
 property			m_use_rocket_on_attack   (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CHelicopter ();
    
    function _construct();
    function SetSpeedInDestPoint(number);
    function getVisible() const;
    function LookAtPoint(vector, boolean);
    function load_config(string);
    function GetCurrVelocity();
    function SetLinearAcc(number, number);
    function GoPatrolByPatrolPath(string, number);
    function GetSpeedInDestPoint(number);
    function isVisible(game_object*);
    function net_Import(net_packet&);
    function SetMaxVelocity(number);
    function SetfHealth(number);
    function test_server_flag(number) const;
    function GetMovementState();
    function SetEnemy(game_object*);
    function SetEnemy(vector*);
    function GetMaxVelocity();
    function GetfHealth() const;
    function Explode();
    function SetOnPointRangeDist(number);
    function SetFireTrailLength(number);
    function Visual();
    function GetOnPointRangeDist();
    function TurnLighting(boolean);
    function GetCurrVelocityVec();
    function GetRealAltitude();
    function SetBarrelDirTolerance(number);
    function GetBodyState();
    function set_schedule(ISheduled*, number, number);
    function net_Spawn(cse_abstract*);
    function UseFireTrail();
    function UseFireTrail(boolean);
    function SetDestPosition(vector*);
    function GoPatrolByRoundPath(vector, number, boolean);
    function getEnabled() const;
    function GetState();
    function Die();
    function StartFlame();
    function net_Export(net_packet&);
    function GetDistanceToDestPosition();
    function GetHuntState();
    function TurnEngineSound(boolean);
    function GetSafeAltitude();
    function ClearEnemy();
    function use(CGameObject*);
};

C++ class CHitImmunity {
 property			burn_immunity            (number);
 property			chemical_burn_immunity   (number);
 property			class_name;
 property			explosion_immunity       (number);
 property			fire_wound_immunity      (number);
 property			physic_strike_immunity   (number);
 property			radiation_immunity       (number);
 property			shock_immunity           (number);
 property			strike_immunity          (number);
 property			telepatic_immunity       (number);
 property			wound_2_immunity         (number);
 property			wound_immunity           (number);
    
};

C++ class holder {
    function engaged();
    function Action(number, number);
    function SetParam(number, vector);
};

C++ class CInventory {
 property			active_item;
 property			class_name;
 property			max_belt                 (number);
 property			max_weight               (number);
 property			selected_item;
 property			take_dist                (number);
 property			target;
 property			total_weight;
    
    function to_slot(CInventory*, lua_State*);
    function to_belt(CInventory*, lua_State*);
    function to_ruck(CInventory*, lua_State*);
};

C++ class CInventoryBox : IInventoryBox,CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function getEnabled() const;
    function net_Export(net_packet&);
    function object(number);
    function object(string);
    function test_server_flag(number) const;
    function load_config(string);
    function empty() const;
    function object_count() const;
    function use(CGameObject*);
};

C++ class CInventoryContainer : IInventoryBox,CInventoryItemObject {
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			inv_weight               (number);
 property			is_opened;
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
 property			weight;
    
    function getEnabled() const;
    function close();
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function visible_in_slot(number);
    function set_visible_in_slot(number, boolean);
    function empty() const;
    function Visual();
    function net_Import(net_packet&);
    function open();
    function set_schedule(ISheduled*, number, number);
    function _construct();
    function object(number);
    function object(string);
    function load_config(string);
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function object_count() const;
    function use(CGameObject*);
};

C++ class CInventoryItem {
 property			class_name;
 property			cost                     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			quest_item               (boolean);
 property			slot                     (number);
 property			slots                    (object);
    
    function visible_in_slot(number);
    function set_visible_in_slot(number, boolean);
};

C++ class CInventoryItemObject : CInventoryItem,CGameObject {
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function getEnabled() const;
    function visible_in_slot(number);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function load_config(string);
    function use(CGameObject*);
};

C++ class CInventoryOwner {
 property			allow_talk               (boolean);
 property			allow_trade              (boolean);
 property			class_name;
 property			inventory;
 property			money                    (number);
 property			raw_money                (number);
 property			talking;
    
};

C++ class CKinematics {
    function LL_GetBonesVisible(CKinematics*);
    function LL_SetBoneVisible(CKinematics*, number, boolean, boolean);
    function LL_SetBoneVisible(CKinematics*, string, boolean, boolean);
    function LL_BoneID(CKinematics*, string);
    function bone_position(CKinematics*, const vector&, string);
    function CalculateBones_Invalidate();
    function CalculateBones(number);
    function LL_GetBoneVisible(CKinematics*, number);
    function LL_GetBoneVisible(CKinematics*, string);
    function LL_GetBoneInstance(number);
    function LL_BoneCount();
    function LL_SetBonesVisible(CKinematics*, const Int64&);
    function LL_BoneName(number);
    function LL_GetBoneRoot();
};

C++ class CKinematicsAnimated : CKinematics {
    function CalculateBones_Invalidate();
    function CalculateBones(number);
    function LL_BoneID(CKinematics*, string);
    function PlayCycle(CKinematicsAnimated*, string);
    function bone_position(CKinematics*, const vector&, string);
    function LL_GetBoneRoot();
    function LL_SetBoneVisible(CKinematics*, number, boolean, boolean);
    function LL_SetBoneVisible(CKinematics*, string, boolean, boolean);
    function LL_GetBoneInstance(number);
    function LL_GetBonesVisible(CKinematics*);
    function LL_BoneCount();
    function LL_SetBonesVisible(CKinematics*, const Int64&);
    function LL_BoneName(number);
    function LL_GetBoneVisible(CKinematics*, number);
    function LL_GetBoneVisible(CKinematics*, string);
};

C++ class CLevelGraph {
 property			level_id;
 property			vertices_count;
    
};

C++ class FS {
    const FS_ClampExt = 4;
    const FS_ListFiles = 1;
    const FS_ListFolders = 2;
    const FS_RootOnly = 8;
    const FS_sort_by_modif_down = 5;
    const FS_sort_by_modif_up = 4;
    const FS_sort_by_name_down = 1;
    const FS_sort_by_name_up = 0;
    const FS_sort_by_size_down = 3;
    const FS_sort_by_size_up = 2;
    
    function get_file_age(FS*, string, number&);
    function file_length(string);
    function file_rename(string, string, boolean);
    function r_open(string, string);
    function r_open(string);
    function append_path(string, string, string, number);
    function file_copy(string, string);
    function get_file_age_str(FS*, string);
    function dir_delete(FS*, string, number);
    function dir_delete(FS*, string, string, number);
    function update_path(FS*, string, string);
    function r_close(FS*, reader*);
    function exist(string);
    function exist(string, string);
    function w_close(FS*, class IWriter*);
    function file_list_open(FS*, string, number);
    function file_list_open(FS*, string, string, number);
    function path_exist(string);
    function file_list_open_ex(FS*, string, number, string);
    function get_path(string);
    function file_delete(string, string);
    function file_delete(string);
    function w_open(string, string);
    function w_open(string);
};

C++ class CMainMenu {
    function CancelDownload();
    function ValidateCDKey();
    function GetPatchProgress();
    function GetGSVer();
};

C++ class CMercuryBall : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CMercuryBall ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CMincer : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CMincer ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CMissile : CInventoryItemObject {
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			destroy_time             (number);
 property			destroy_time_max         (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    function Visual();
    function getEnabled() const;
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function _construct();
    function load_config(string);
    function set_schedule(ISheduled*, number, number);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CMosquitoBald : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CMosquitoBald ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CNightVisionDevice {
 property			enabled                  (boolean);
 property			powered;
    
    function switch();
    function turn_off();
    function turn_on();
};

C++ class object_factory {
    function register(string, string, string, string);
    function register(string, string, string);
};

C++ class CPHMovementControl {
 property			air_control_param        (number);
 property			class_name;
 property			collision_damage_factor  (number);
 property			crash_speed_max          (number);
 property			crash_speed_min          (number);
 property			jump_up_velocity         (number);
 property			ph_mass                  (number);
    
};

C++ class particle_params {
    particle_params ();
    particle_params (const vector&);
    particle_params (const vector&, const vector&);
    particle_params (const vector&, const vector&, const vector&);
    
};

C++ class patrol {
    const continue = 1;
    const custom = 3;
    const dummy = -1;
    const nearest = 2;
    const next = 4;
    const start = 0;
    const stop = 0;
    
    patrol (string);
    patrol (string, enum PatrolPathManager::EPatrolStartType);
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType);
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType, boolean);
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType, boolean, number);
    
    function level_vertex_id(number) const;
    function point(const patrol*, number);
    function flag(number, number) const;
    function game_vertex_id(number) const;
    function flags(number) const;
    function name(number) const;
    function index(string) const;
    function terminal(number) const;
    function count() const;
    function get_nearest(const vector&) const;
};

C++ class CPhrase {
    function GetPhraseScript();
};

C++ class CPhraseDialog {
    function AddPhrase(string, string, string, number);
};

C++ class CPhraseScript {
    function AddHasInfo(string);
    function AddGiveInfo(string);
    function AddDisableInfo(string);
    function AddDontHasInfo(string);
    function AddAction(string);
    function AddPrecondition(string);
};

C++ class CPhysicObject : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CPhysicObject ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class physics_element {
    function get_density();
    function set_inertia(const dMass&);
    function get_mass();
    function set_density(number);
    function is_fixed();
    function get_inertia();
    function set_mass(physics_element*, number);
    function is_breakable();
    function release_fixed();
    function get_volume();
    function get_linear_vel(vector&);
    function apply_force(number, number, number);
    function get_angular_vel(vector&);
    function fix();
    function set_mass_mc(number, const vector&);
    function global_transform(physics_element*);
};

C++ class physics_joint {
    function set_limits(number, number, number);
    function get_axis_angle(number);
    function get_anchor(vector&);
    function get_axis_dir(number, vector&);
    function get_bone_id();
    function is_breakable();
    function set_max_force_and_velocity(number, number, number);
    function set_axis_dir_global(number, number, number, number);
    function get_first_element();
    function set_axis_dir_vs_second_element(number, number, number, number);
    function get_axes_number();
    function set_joint_spring_dumping_factors(number, number);
    function set_axis_spring_dumping_factors(number, number, number);
    function set_anchor_vs_first_element(number, number, number);
    function get_stcond_element();
    function set_anchor_global(number, number, number);
    function get_limits(number&, number&, number);
    function set_anchor_vs_second_element(number, number, number);
    function set_axis_dir_vs_first_element(number, number, number, number);
    function get_max_force_and_velocity(number&, number&, number);
};

C++ class physics_shell {
    function get_joints_number();
    function set_mass1(number);
    function get_elements_number();
    function is_breakable();
    function get_joint_by_bone_name(string);
    function get_element_by_bone_name(string);
    function apply_force(number, number, number);
    function get_joint_by_order(number);
    function freeze();
    function get_mass();
    function get_element_by_bone_id(number);
    function get_linear_vel(vector&);
    function disable_collision();
    function unblock_breaking();
    function block_breaking();
    function get_element_by_order(number);
    function unfreeze();
    function set_mass(number);
    function get_angular_vel(vector&);
    function is_breaking_blocked();
    function enable_collision();
    function get_joint_by_bone_id(number);
};

C++ class CPoltergeist : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CPoltergeist ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class property_storage {
    property_storage ();
    
    function property(const number&) const;
    function set_property(const number&, const boolean&);
};

C++ class CPseudoGigant : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CPseudoGigant ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CPsyDog : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CPsyDog ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CPsyDogPhantom : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CPsyDogPhantom ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class cpure_server_object : ipure_server_object {
};

C++ class CRGD5 : CGrenade {
 property			blast                    (number);
 property			blast_impulse            (number);
 property			blast_r                  (number);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			current_parent           (number);
 property			destroy_time             (number);
 property			destroy_time_max         (number);
 property			explode_duration;
 property			explode_duration_max     (number);
 property			explode_pos;
 property			explosion_flags;
 property			fragment_speed           (number);
 property			frags                    (number);
 property			frags_hit                (number);
 property			frags_hit_impulse        (number);
 property			frags_r                  (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			light_color;
 property			light_range              (number);
 property			light_time               (number);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CRGD5 ();
    
    function Visual();
    function getEnabled() const;
    function net_Import(net_packet&);
    function explode();
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function _construct();
    function set_schedule(ISheduled*, number, number);
    function visible_in_slot(number);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function load_config(string);
    function use(CGameObject*);
};

C++ class CRandom {
    CRandom ();
    CRandom (number);
    
    function randF();
    function randF(number);
    function randF(number, number);
    function randI();
    function randI(number);
    function randI(number, number);
    function seed(number);
    function randFs(number);
    function randFs(number, number);
    function randIs(number);
    function randIs(number, number);
};

C++ class render_device {
 property			aspect_ratio;
 property			cam_dir;
 property			cam_pos;
 property			cam_right;
 property			cam_top;
 property			f_time_delta;
 property			fov                      (number);
 property			frame;
 property			height;
 property			precache_frame;
 property			time_delta;
 property			warn_freeze              (boolean);
 property			width;
    
    function is_paused(render_device*);
    function frame_elapsed();
    function get_fov();
    function time_global(const render_device*);
    function pause(render_device*, boolean);
    function set_fov(render_device*, number);
};

C++ class CResourceManager {
    function get_loaded_textures(CResourceManager*, lua_State*);
};

C++ class CRustyHairArtefact : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CRustyHairArtefact ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class cse_anomalous_zone : cse_custom_zone {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_anomalous_zone (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function set_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function spawn_artefacts();
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_car : cse_alife_dynamic_object_visual,cse_ph_skeleton {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_car (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_creature_abstract : cse_alife_dynamic_object_visual {
 property			direction                (vector);
 property			group                    (number);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
 property			squad                    (number);
 property			team                     (number);
    
    cse_alife_creature_abstract (string);
    
    function on_death(cse_abstract*);
    function on_before_register();
    function on_spawn();
    function health() const;
    function g_group();
    function can_save() const;
    function g_squad();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function g_team();
    function alive() const;
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_creature_actor : cse_alife_creature_abstract,cse_alife_trader_abstract,cse_ph_skeleton {
 property			direction                (vector);
 property			group                    (number);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
 property			squad                    (number);
 property			team                     (number);
    
    cse_alife_creature_actor (string);
    
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function g_squad();
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function init();
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function profile_name(cse_alife_trader_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function used_ai_locations() const;
    function community() const;
    function visible_for_map() const;
    function visible_for_map(boolean);
    function alive() const;
    function interactive() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function on_before_register();
    function set_direction(cse_abstract*, number, number, number);
    function on_unregister();
    function set_section_name(cse_abstract*, string);
    function on_register();
    function reputation();
    function g_team();
    function move_offline() const;
    function move_offline(boolean);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function health() const;
    function spawn_ini(cse_abstract*);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function rank();
};

C++ class cse_alife_creature_crow : cse_alife_creature_abstract {
 property			direction                (vector);
 property			group                    (number);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
 property			squad                    (number);
 property			team                     (number);
    
    cse_alife_creature_crow (string);
    
    function on_death(cse_abstract*);
    function on_before_register();
    function set_direction(cse_abstract*, number, number, number);
    function on_unregister();
    function set_section_name(cse_abstract*, string);
    function on_register();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function g_team();
    function alive() const;
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function clsid() const;
    function keep_saved_data_anyway() const;
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Write(net_packet&);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function spawn_ini(cse_abstract*);
    function init();
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function interactive() const;
    function STATE_Read(net_packet&, number);
    function health() const;
    function can_save() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function g_squad();
};

C++ class cse_alife_creature_phantom : cse_alife_creature_abstract {
 property			direction                (vector);
 property			group                    (number);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
 property			squad                    (number);
 property			team                     (number);
    
    cse_alife_creature_phantom (string);
    
    function on_death(cse_abstract*);
    function on_before_register();
    function set_direction(cse_abstract*, number, number, number);
    function on_unregister();
    function set_section_name(cse_abstract*, string);
    function on_register();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function g_team();
    function alive() const;
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function clsid() const;
    function keep_saved_data_anyway() const;
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Write(net_packet&);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function spawn_ini(cse_abstract*);
    function init();
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function interactive() const;
    function STATE_Read(net_packet&, number);
    function health() const;
    function can_save() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function g_squad();
};

C++ class cse_custom_zone : cse_alife_dynamic_object,cse_shape {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_custom_zone (string);
    
    function on_before_register();
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function name(const cse_abstract*);
    function set_direction(cse_abstract*, number, number, number);
    function STATE_Write(net_packet&);
    function move_offline() const;
    function move_offline(boolean);
    function init();
    function UPDATE_Read(net_packet&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function used_ai_locations() const;
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function keep_saved_data_anyway() const;
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function on_spawn();
};

C++ class cse_alife_dynamic_object : cse_alife_object {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_dynamic_object (string);
    
    function move_offline() const;
    function move_offline(boolean);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function keep_saved_data_anyway() const;
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function on_before_register();
    function on_spawn();
    function set_name(cse_abstract*, string);
    function STATE_Write(net_packet&);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function init();
    function set_direction(cse_abstract*, number, number, number);
    function used_ai_locations() const;
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function UPDATE_Read(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function name(const cse_abstract*);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
};

C++ class cse_alife_dynamic_object_visual : cse_alife_dynamic_object,cse_visual {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_dynamic_object_visual (string);
    
    function on_before_register();
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function name(const cse_abstract*);
    function set_direction(cse_abstract*, number, number, number);
    function STATE_Write(net_packet&);
    function move_offline() const;
    function move_offline(boolean);
    function init();
    function UPDATE_Read(net_packet&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function used_ai_locations() const;
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function keep_saved_data_anyway() const;
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function on_spawn();
};

C++ class cse_alife_graph_point : cse_abstract {
 property			direction                (vector);
 property			id;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_graph_point (string);
    
    function set_position(cse_abstract*, number, number, number);
    function init();
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function set_direction(cse_abstract*, number, number, number);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function set_section_name(cse_abstract*, string);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function UPDATE_Read(net_packet&);
    function UPDATE_Write(net_packet&);
    function clsid() const;
    function STATE_Write(net_packet&);
};

C++ class cse_alife_group_abstract {
};

C++ class cse_alife_helicopter : cse_alife_dynamic_object_visual,cse_motion,cse_ph_skeleton {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_helicopter (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_human_abstract : cse_alife_trader_abstract,cse_alife_monster_abstract {
 property			direction                (vector);
 property			group                    (number);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_smart_terrain_id       (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
 property			squad                    (number);
 property			team                     (number);
    
    cse_alife_human_abstract (string);
    
    function set_direction(cse_abstract*, number, number, number);
    function brain(cse_alife_monster_abstract*);
    function brain(cse_alife_human_abstract*);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function smart_terrain_id(cse_alife_monster_abstract*);
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function init();
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function profile_name(cse_alife_trader_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function on_before_register();
    function community() const;
    function set_rank(number);
    function g_group();
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function alive() const;
    function spawn_ini(cse_abstract*);
    function health() const;
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function UPDATE_Read(net_packet&);
    function STATE_Write(net_packet&);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function move_offline() const;
    function move_offline(boolean);
    function g_team();
    function used_ai_locations() const;
    function reputation();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function on_register();
    function can_save() const;
    function update();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function g_squad();
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function rank();
};

C++ class cse_alife_human_stalker : cse_alife_human_abstract,cse_ph_skeleton {
 property			direction                (vector);
 property			group                    (number);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_smart_terrain_id       (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
 property			squad                    (number);
 property			team                     (number);
    
    cse_alife_human_stalker (string);
    
    function set_direction(cse_abstract*, number, number, number);
    function brain(cse_alife_monster_abstract*);
    function brain(cse_alife_human_abstract*);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function g_team();
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function init();
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function profile_name(cse_alife_trader_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function community() const;
    function set_rank(number);
    function spawn_ini(cse_abstract*);
    function on_unregister();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function STATE_Write(net_packet&);
    function alive() const;
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function g_squad();
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function interactive() const;
    function smart_terrain_id(cse_alife_monster_abstract*);
    function update();
    function can_save() const;
    function on_register();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function reputation();
    function on_before_register();
    function move_offline() const;
    function move_offline(boolean);
    function used_ai_locations() const;
    function set_section_name(cse_abstract*, string);
    function STATE_Read(net_packet&, number);
    function health() const;
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function rank();
};

C++ class cse_alife_inventory_item {
};

C++ class cse_alife_item : cse_alife_dynamic_object_visual,cse_alife_inventory_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_item_ammo : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_ammo (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_artefact : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_artefact (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_bolt : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_bolt (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_custom_outfit : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_custom_outfit (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_detector : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_detector (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_document : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_document (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_eatable : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_eatable (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_explosive : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_explosive (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_grenade : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_grenade (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_nvd : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_nvd (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_pda : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_pda (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_torch : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_torch (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_weapon : cse_alife_item {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_weapon (string);
    
    function used_ai_locations() const;
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function bfUseful();
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function UPDATE_Read(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_weapon_magazined : cse_alife_item_weapon {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_weapon_magazined (string);
    
    function used_ai_locations() const;
    function set_direction(cse_abstract*, number, number, number);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function keep_saved_data_anyway() const;
    function move_offline() const;
    function move_offline(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function clsid() const;
    function UPDATE_Read(net_packet&);
    function interactive() const;
    function on_before_register();
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function STATE_Write(net_packet&);
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function bfUseful();
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function on_register();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function can_save() const;
};

C++ class cse_alife_item_weapon_magazined_w_gl : cse_alife_item_weapon_magazined {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_weapon_magazined_w_gl (string);
    
    function used_ai_locations() const;
    function set_direction(cse_abstract*, number, number, number);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function UPDATE_Read(net_packet&);
    function set_section_name(cse_abstract*, string);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function clsid() const;
    function on_register();
    function name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function bfUseful();
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function on_before_register();
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_weapon_shotgun : cse_alife_item_weapon {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_item_weapon_shotgun (string);
    
    function used_ai_locations() const;
    function set_direction(cse_abstract*, number, number, number);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function keep_saved_data_anyway() const;
    function move_offline() const;
    function move_offline(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function clsid() const;
    function UPDATE_Read(net_packet&);
    function interactive() const;
    function on_before_register();
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function STATE_Write(net_packet&);
    function init();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function bfUseful();
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function on_register();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function can_save() const;
};

C++ class cse_alife_level_changer : cse_alife_space_restrictor {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_level_changer (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_monster_abstract : cse_alife_creature_abstract,cse_alife_schedulable {
 property			direction                (vector);
 property			group                    (number);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_smart_terrain_id       (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
 property			squad                    (number);
 property			team                     (number);
    
    cse_alife_monster_abstract (string);
    
    function can_save() const;
    function update();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function g_squad();
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function init();
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function used_ai_locations() const;
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function alive() const;
    function interactive() const;
    function brain(cse_alife_monster_abstract*);
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function smart_terrain_id(cse_alife_monster_abstract*);
    function on_before_register();
    function set_direction(cse_abstract*, number, number, number);
    function on_unregister();
    function set_section_name(cse_abstract*, string);
    function on_register();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function g_team();
    function move_offline() const;
    function move_offline(boolean);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function health() const;
    function spawn_ini(cse_abstract*);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function rank();
};

C++ class cse_alife_monster_base : cse_alife_monster_abstract,cse_ph_skeleton {
 property			direction                (vector);
 property			group                    (number);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_smart_terrain_id       (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
 property			squad                    (number);
 property			team                     (number);
    
    cse_alife_monster_base (string);
    
    function set_direction(cse_abstract*, number, number, number);
    function brain(cse_alife_monster_abstract*);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function smart_terrain_id(cse_alife_monster_abstract*);
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function init();
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function on_before_register();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function g_group();
    function alive() const;
    function on_register();
    function on_spawn();
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function spawn_ini(cse_abstract*);
    function health() const;
    function g_team();
    function used_ai_locations() const;
    function STATE_Write(net_packet&);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function move_offline() const;
    function move_offline(boolean);
    function can_save() const;
    function update();
    function UPDATE_Read(net_packet&);
    function g_squad();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function rank();
};

C++ class cse_alife_monster_zombie : cse_alife_monster_abstract {
 property			direction                (vector);
 property			group                    (number);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_smart_terrain_id       (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
 property			squad                    (number);
 property			team                     (number);
    
    cse_alife_monster_zombie (string);
    
    function set_direction(cse_abstract*, number, number, number);
    function brain(cse_alife_monster_abstract*);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function smart_terrain_id(cse_alife_monster_abstract*);
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function init();
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function on_before_register();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function g_group();
    function alive() const;
    function on_register();
    function on_spawn();
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function spawn_ini(cse_abstract*);
    function health() const;
    function g_team();
    function used_ai_locations() const;
    function STATE_Write(net_packet&);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function move_offline() const;
    function move_offline(boolean);
    function can_save() const;
    function update();
    function UPDATE_Read(net_packet&);
    function g_squad();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function rank();
};

C++ class cse_alife_mounted_weapon : cse_alife_dynamic_object_visual {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_mounted_weapon (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_object : cse_abstract {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_object (string);
    
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function set_direction(cse_abstract*, number, number, number);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function clsid() const;
    function visible_for_map() const;
    function visible_for_map(boolean);
    function STATE_Write(net_packet&);
    function move_offline() const;
    function move_offline(boolean);
    function init();
    function can_save() const;
    function used_ai_locations() const;
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function interactive() const;
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function UPDATE_Read(net_packet&);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function set_name(cse_abstract*, string);
};

C++ class cse_alife_object_breakable : cse_alife_dynamic_object_visual {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_object_breakable (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_object_climable : cse_shape,cse_abstract {
 property			direction                (vector);
 property			id;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_object_climable (string);
    
    function set_position(cse_abstract*, number, number, number);
    function init();
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function set_direction(cse_abstract*, number, number, number);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function set_section_name(cse_abstract*, string);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function UPDATE_Read(net_packet&);
    function UPDATE_Write(net_packet&);
    function clsid() const;
    function STATE_Write(net_packet&);
};

C++ class cse_alife_object_hanging_lamp : cse_alife_dynamic_object_visual,cse_ph_skeleton {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_object_hanging_lamp (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_object_physic : cse_alife_dynamic_object_visual,cse_ph_skeleton {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_object_physic (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_object_projector : cse_alife_dynamic_object_visual {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_object_projector (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_online_offline_group : cse_alife_dynamic_object,cse_alife_schedulable {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_online_offline_group (string);
    
    function on_before_register();
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function name(const cse_abstract*);
    function set_direction(cse_abstract*, number, number, number);
    function STATE_Write(net_packet&);
    function move_offline() const;
    function move_offline(boolean);
    function init();
    function UPDATE_Read(net_packet&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function used_ai_locations() const;
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function keep_saved_data_anyway() const;
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function on_spawn();
};

C++ class cse_alife_ph_skeleton_object : cse_alife_dynamic_object_visual,cse_ph_skeleton {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_ph_skeleton_object (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_psydog_phantom : cse_alife_monster_base {
 property			direction                (vector);
 property			group                    (number);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_smart_terrain_id       (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
 property			squad                    (number);
 property			team                     (number);
    
    cse_alife_psydog_phantom (string);
    
    function on_register();
    function brain(cse_alife_monster_abstract*);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function g_team();
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function init();
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function on_before_register();
    function spawn_ini(cse_abstract*);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_unregister();
    function alive() const;
    function used_ai_locations() const;
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function interactive() const;
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function g_squad();
    function UPDATE_Read(net_packet&);
    function update();
    function set_direction(cse_abstract*, number, number, number);
    function smart_terrain_id(cse_alife_monster_abstract*);
    function can_save() const;
    function move_offline() const;
    function move_offline(boolean);
    function STATE_Read(net_packet&, number);
    function health() const;
    function STATE_Write(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function rank();
};

C++ class cse_alife_schedulable : ipure_schedulable_object {
};

C++ class cse_alife_smart_zone : cse_alife_space_restrictor,cse_alife_schedulable {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_smart_zone (string);
    
    function set_direction(cse_abstract*, number, number, number);
    function update();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function clsid() const;
    function task(cse_alife_monster_abstract*);
    function enabled(cse_alife_monster_abstract*) const;
    function STATE_Write(net_packet&);
    function init();
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function register_npc(cse_alife_monster_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function smart_touch(cse_alife_monster_abstract*);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function detect_probability();
    function unregister_npc(cse_alife_monster_abstract*);
    function on_before_register();
    function suitable(cse_alife_monster_abstract*) const;
    function can_save() const;
    function set_section_name(cse_abstract*, string);
    function used_ai_locations() const;
    function on_spawn();
    function on_register();
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function set_name(cse_abstract*, string);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
};

C++ class cse_alife_space_restrictor : cse_alife_dynamic_object,cse_shape {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_space_restrictor (string);
    
    function on_before_register();
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function clsid() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function name(const cse_abstract*);
    function set_direction(cse_abstract*, number, number, number);
    function STATE_Write(net_packet&);
    function move_offline() const;
    function move_offline(boolean);
    function init();
    function UPDATE_Read(net_packet&);
    function spawn_ini(cse_abstract*);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function used_ai_locations() const;
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function keep_saved_data_anyway() const;
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function on_spawn();
};

C++ class cse_alife_team_base_zone : cse_alife_space_restrictor {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_team_base_zone (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_torrid_zone : cse_custom_zone,cse_motion {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_torrid_zone (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function used_ai_locations() const;
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_direction(cse_abstract*, number, number, number);
};

C++ class cse_alife_trader : cse_alife_dynamic_object_visual,cse_alife_trader_abstract {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_alife_trader (string);
    
    function on_before_register();
    function community() const;
    function set_direction(cse_abstract*, number, number, number);
    function can_save() const;
    function used_ai_locations() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function clsid() const;
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function interactive() const;
    function STATE_Write(net_packet&);
    function UPDATE_Read(net_packet&);
    function init();
    function reputation();
    function set_name(cse_abstract*, string);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function profile_name(cse_alife_trader_abstract*);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function rank();
};

C++ class cse_alife_trader_abstract {
    function profile_name(cse_alife_trader_abstract*);
    function reputation();
    function rank();
    function community() const;
};

C++ class cse_zone_visual : cse_anomalous_zone,cse_visual {
 property			direction                (vector);
 property			id;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			m_flags;
 property			m_game_vertex_id         (number);
 property			m_level_vertex_id        (number);
 property			m_story_id;
 property			online;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_zone_visual (string);
    
    function on_before_register();
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function set_section_name(cse_abstract*, string);
    function set_direction(cse_abstract*, number, number, number);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function clsid() const;
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function UPDATE_Read(net_packet&);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function set_position(cse_abstract*, number, number, number);
    function set_position(cse_alife_object*, const vector&);
    function init();
    function spawn_ini(cse_abstract*);
    function spawn_artefacts();
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function used_ai_locations() const;
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function STATE_Write(net_packet&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_abstract : cpure_server_object {
 property			direction                (vector);
 property			id;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    function STATE_Write(net_packet&);
    function set_direction(cse_abstract*, number, number, number);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function set_section_name(cse_abstract*, string);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function set_position(cse_abstract*, number, number, number);
    function UPDATE_Write(net_packet&);
    function clsid() const;
    function UPDATE_Read(net_packet&);
    function spawn_ini(cse_abstract*);
};

C++ class CSE_AbstractVisual : cse_visual,cse_abstract {
 property			direction                (vector);
 property			id;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    CSE_AbstractVisual (string);
    
    function set_position(cse_abstract*, number, number, number);
    function getStartupAnimation();
    function init();
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function set_direction(cse_abstract*, number, number, number);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function set_section_name(cse_abstract*, string);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function UPDATE_Read(net_packet&);
    function UPDATE_Write(net_packet&);
    function clsid() const;
    function STATE_Write(net_packet&);
};

C++ class cse_motion {
};

C++ class cse_ph_skeleton {
};

C++ class cse_shape {
};

C++ class cse_spectator : cse_abstract {
 property			direction                (vector);
 property			id;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_spectator (string);
    
    function set_position(cse_abstract*, number, number, number);
    function init();
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function set_direction(cse_abstract*, number, number, number);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function set_section_name(cse_abstract*, string);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function UPDATE_Read(net_packet&);
    function UPDATE_Write(net_packet&);
    function clsid() const;
    function STATE_Write(net_packet&);
};

C++ class cse_temporary : cse_abstract {
 property			direction                (vector);
 property			id;
 property			parent_id;
 property			position                 (vector);
 property			script_version;
    
    cse_temporary (string);
    
    function set_position(cse_abstract*, number, number, number);
    function init();
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function set_direction(cse_abstract*, number, number, number);
    function set_name(cse_abstract*, string);
    function section_name(const cse_abstract*);
    function set_section_name(cse_abstract*, string);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function UPDATE_Read(net_packet&);
    function UPDATE_Write(net_packet&);
    function clsid() const;
    function STATE_Write(net_packet&);
};

C++ class cse_visual {
};

C++ class CSavedGameWrapper {
    CSavedGameWrapper (string);
    
    function level_name(const CSavedGameWrapper*);
    function level_id() const;
    function game_time(const CSavedGameWrapper*);
    function actor_health() const;
};

C++ class CScope : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CScope ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class cond {
    const act_end = 128;
    const anim_end = 4;
    const look_end = 2;
    const move_end = 1;
    const object_end = 32;
    const sound_end = 8;
    const time_end = 64;
    
    cond ();
    cond (number);
    cond (number, double);
    
};

C++ class anim {
    const attack = 6;
    const danger = 0;
    const eat = 3;
    const free = 1;
    const lie_idle = 2;
    const look_around = 7;
    const panic = 2;
    const rest = 5;
    const sit_idle = 1;
    const sleep = 4;
    const stand_idle = 0;
    const turn = 8;
    
    anim ();
    anim (string);
    anim (string, boolean);
    anim (enum MonsterSpace::EMentalState);
    anim (enum MonsterSpace::EScriptMonsterAnimAction, number);
    
    function completed();
    function type(enum MonsterSpace::EMentalState);
    function anim(string);
};

C++ class object_binder {
 property			object;
    
    object_binder (game_object*);
    
    function save(net_packet*);
    function update(number);
    function reload(string);
    function net_export(net_packet*);
    function net_save_relevant();
    function load(reader*);
    function net_destroy();
    function reinit();
    function net_Relcase(game_object*);
    function net_spawn(cse_alife_object*);
    function net_import(net_packet*);
};

C++ class effector {
    effector (number, number);
    
    function start(effector*);
    function process(effector_params*);
    function finish(effector*);
};

C++ class entity_action {
    entity_action ();
    entity_action (const entity_action*);
    
    function set_action(move&);
    function set_action(look&);
    function set_action(anim&);
    function set_action(sound&);
    function set_action(particle&);
    function set_action(object&);
    function set_action(cond&);
    function set_action(act&);
    function move() const;
    function particle() const;
    function completed();
    function object() const;
    function all();
    function time();
    function look() const;
    function sound() const;
    function anim() const;
};

C++ class game_object {
    const action_type_count = 6;
    const animation = 2;
    const dialog_pda_msg = 0;
    const dummy = -1;
    const enemy = 2;
    const friend = 0;
    const game_path = 0;
    const info_pda_msg = 1;
    const level_path = 1;
    const movement = 0;
    const neutral = 1;
    const no_path = 3;
    const no_pda_msg = 2;
    const object = 5;
    const particle = 4;
    const patrol_path = 2;
    const relation_attack = 1;
    const relation_fight_help_human = 2;
    const relation_fight_help_monster = 4;
    const relation_kill = 0;
    const sound = 3;
    const watch = 1;
    
 property			alcohol                  (number);
 property			conditions;
 property			health                   (number);
 property			immunities;
 property			interface                (object);
 property			inventory;
 property			is_alive;
 property			level_id;
 property			level_name;
 property			max_power                (number);
 property			morale                   (number);
 property			power                    (number);
 property			psy_health               (number);
 property			radiation                (number);
 property			satiety                  (number);
    
    function transfer_items(lua_State*);
    function dont_has_info(string);
    function max_ignore_monster_distance(const number&);
    function max_ignore_monster_distance() const;
    function best_item();
    function disable_info_portion(string);
    function add_animation(string, boolean, boolean);
    function get_script() const;
    function enable_anomaly();
    function buy_supplies(CScriptIniFile*, string);
    function sound_voice_prefix() const;
    function get_start_dialog();
    function memory_visible_objects() const;
    function who_hit_name();
    function is_inventory_owner() const;
    function set_section(string);
    function disable_trade();
    function active_item();
    function mental_state() const;
    function set_start_dialog(string);
    function enable_trade();
    function general_goodwill(game_object*);
    function is_in_ruck(game_object*) const;
    function switch_to_talk();
    function open_inventory_box(game_object*) const;
    function is_inv_box_empty();
    function get_additional_max_weight() const;
    function base_out_restrictions();
    function attach_vehicle(game_object*);
    function best_weapon();
    function is_ammo() const;
    function active_slot();
    function who_hit_section_name();
    function set_additional_max_weight(number);
    function inventory_for_each(const function<void>&);
    function disable_talk();
    function game_vertex_id() const;
    function set_previous_point(number);
    function set_item(enum MonsterSpace::EObjectAction);
    function set_item(enum MonsterSpace::EObjectAction, game_object*);
    function set_item(enum MonsterSpace::EObjectAction, game_object*, number);
    function set_item(enum MonsterSpace::EObjectAction, game_object*, number, number);
    function team() const;
    function is_stalker() const;
    function set_ammo_elapsed(number);
    function active_zone_contact(number);
    function is_bottle_item() const;
    function action_count() const;
    function is_holder() const;
    function berserk();
    function is_on_belt(game_object*) const;
    function name() const;
    function set_range(number);
    function restore_sound_threshold();
    function object_count() const;
    function is_talk_enabled();
    function animation_slot() const;
    function get_current_direction();
    function action() const;
    function is_helicopter() const;
    function give_talk_message(string, string, Frect, string);
    function not_yet_visible_objects() const;
    function set_mental_state(enum MonsterSpace::EMentalState);
    function squad() const;
    function reset_action_queue();
    function get_weapon_m(game_object*, lua_State*);
    function script(boolean, string);
    function set_actor_direction(number);
    function drop_item(game_object*);
    function add_restrictions(string, string);
    function get_monster_hit_info();
    function is_torch() const;
    function memory_hit_objects() const;
    function bind_object(object_binder*);
    function safe_cover(const vector&, number, number);
    function path_completed() const;
    function set_cost(number);
    function set_fastcall(const function<boolean>&, object);
    function level_vertex_id() const;
    function switch_projector(boolean);
    function set_start_point(number);
    function set_fov(number);
    function set_path_type(enum MovementManager::EPathType);
    function weapon_strapped() const;
    function get_ammo_total() const;
    function give_game_news(string, string, Frect, number, number);
    function restore_max_ignore_monster_distance();
    function is_eatable_item() const;
    function get_info_time(string);
    function get_current_outfit() const;
    function get_sound_info();
    function set_item_name_short(string);
    function get_missile(game_object*, lua_State*);
    function memory_sound_objects() const;
    function is_inventory_item() const;
    function activate_slot(number);
    function get_hanging_lamp();
    function get_anomaly(game_object*, lua_State*);
    function give_money(number);
    function invulnerable() const;
    function invulnerable(boolean);
    function movement_type() const;
    function explode(number);
    function remove_home();
    function condition() const;
    function switch_to_trade();
    function set_dest_level_vertex_id(number);
    function weight() const;
    function eat(game_object*);
    function clsid() const;
    function get_inventory_item_flags();
    function get_script_name() const;
    function spawn_ini() const;
    function drop_item_and_teleport(game_object*, vector);
    function move_to_belt(game_object*);
    function get_current_holder();
    function get_item_name_short() const;
    function set_body_state(enum MonsterSpace::EBodyState);
    function set_actor_max_weight(number);
    function set_invisible(boolean);
    function has_info(string);
    function set_enemy_callback();
    function set_enemy_callback(const function<boolean>&);
    function set_enemy_callback(const function<boolean>&, object);
    function play_sound(number);
    function play_sound(number, number);
    function play_sound(number, number, number);
    function play_sound(number, number, number, number);
    function play_sound(number, number, number, number, number);
    function play_sound(number, number, number, number, number, number);
    function set_character_community(string, number, number);
    function get_actor_relation_flags() const;
    function disable_anomaly();
    function motivation_action_manager(game_object*);
    function make_object_visible_somewhen(game_object*);
    function get_actor_max_weight() const;
    function object(string);
    function object(number);
    function fov() const;
    function set_default_panic_threshold();
    function set_actor_relation_flags(flags32);
    function get_bleeding() const;
    function hide_weapon();
    function is_body_turning() const;
    function marked_dropped(game_object*);
    function set_character_rank(number);
    function ruck_count() const;
    function patrol_path_make_inactual();
    function fake_death_stand_up();
    function get_total_weight() const;
    function character_rank();
    function remove_sound(number);
    function set_detail_path_type(enum DetailPathManager::EDetailPathType);
    function extrapolate_length() const;
    function extrapolate_length(number);
    function load_hud_visual(string);
    function play_cycle(string);
    function play_cycle(string, boolean);
    function get_hud_visual() const;
    function animation_count() const;
    function is_medkit() const;
    function get_weapon_mwg(game_object*, lua_State*);
    function patrol();
    function is_space_restrictor() const;
    function get_weapon(game_object*, lua_State*);
    function story_id() const;
    function in_restrictions();
    function set_item_name(string);
    function buy_item_condition_factor(number);
    function visibility_threshold() const;
    function is_in_slot(game_object*) const;
    function section() const;
    function transfer_money(number, game_object*);
    function get_current_point_index();
    function is_explosive() const;
    function get_outfit(game_object*, lua_State*);
    function get_interface(game_object*, lua_State*);
    function set_alien_control(boolean);
    function get_inventory_owner(game_object*, lua_State*);
    function set_patrol_path(string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType, boolean);
    function is_inventory_box() const;
    function belt_count() const;
    function get_inventory_box(game_object*, lua_State*);
    function unload_magazine();
    function get_bone_name(number) const;
    function set_actor_max_walk_weight(number);
    function set_const_force(const vector&, number, number);
    function sell_condition(CScriptIniFile*, string);
    function sell_condition(number, number);
    function is_weapon_gl() const;
    function get_base_monster(game_object*, lua_State*);
    function change_team(number, number, number);
    function set_trader_sound(string, string);
    function get_artefact(game_object*, lua_State*);
    function direction() const;
    function kill(game_object*);
    function cost() const;
    function get_ammo(game_object*, lua_State*);
    function level_vertex_light(const number&) const;
    function skip_transfer_enemy(boolean);
    function get_car();
    function get_actor(game_object*, lua_State*);
    function set_weight(number);
    function info_add(string);
    function get_game_object() const;
    function xform();
    function get_description() const;
    function get_task_state(string, number);
    function set_sight(enum SightManager::ESightType, const vector*, number);
    function set_sight(enum SightManager::ESightType, boolean, boolean);
    function set_sight(enum SightManager::ESightType, const vector&, boolean);
    function set_sight(enum SightManager::ESightType, const vector*);
    function set_sight(game_object*);
    function set_sight(game_object*, boolean);
    function set_sight(game_object*, boolean, boolean);
    function set_sight(game_object*, boolean, boolean, boolean);
    function get_eatable_item(game_object*, lua_State*);
    function get_cell_item() const;
    function remove_restrictions(string, string);
    function get_holder_class();
    function money();
    function get_item_name() const;
    function set_name(string);
    function get_alife_object() const;
    function enable_talk();
    function get_enemy() const;
    function set_task_state(enum ETaskState, string, number);
    function get_visual_ini() const;
    function add_sound(string, number, enum ESoundTypes, number, number, number);
    function add_sound(string, number, enum ESoundTypes, number, number, number, string);
    function max_health() const;
    function restore_ignore_monster_threshold();
    function set_queue_size(number);
    function set_ammo_box_size(number);
    function show_condition(CScriptIniFile*, string);
    function set_rotation(const SRotation&);
    function restore_weapon();
    function set_direction(const vector&, number);
    function hit(hit*);
    function get_additional_max_walk_weight() const;
    function detach_vehicle();
    function enable_vision(boolean);
    function set_visual_name(string);
    function alive() const;
    function get_visual_name();
    function target_movement_type() const;
    function set_ammo_box_curr(number);
    function target_body_state() const;
    function get_ammo_box_size() const;
    function head_orientation() const;
    function command(const entity_action*, boolean);
    function get_shape_radius() const;
    function get_torch(game_object*);
    function get_inventory_item(game_object*, lua_State*);
    function move_to_ruck(game_object*);
    function is_grenade() const;
    function set_actor_position(vector);
    function relation(game_object*);
    function remove_all_restrictions();
    function set_additional_max_walk_weight(number);
    function accuracy() const;
    function is_artefact() const;
    function active_sound_count();
    function active_sound_count(boolean);
    function is_food_item() const;
    function is_hud_item() const;
    function item_in_slot(number) const;
    function action_by_index(number);
    function is_trade_enabled();
    function set_sound_mask(number);
    function is_projector() const;
    function vision_enabled() const;
    function is_script_zone() const;
    function fake_death_fall_down();
    function mark_item_dropped(game_object*);
    function ignore_monster_threshold(number);
    function ignore_monster_threshold() const;
    function is_monster() const;
    function attachable_item_enabled() const;
    function is_anomaly() const;
    function is_weapon() const;
    function is_grenade_launcher() const;
    function wounded() const;
    function wounded(boolean);
    function is_silencer() const;
    function is_scope() const;
    function is_outfit() const;
    function move_to_slot(game_object*, boolean);
    function is_antirad() const;
    function is_weapon_magazined() const;
    function transfer_item(game_object*, game_object*, boolean);
    function stop_talk();
    function profile_name();
    function is_actor() const;
    function is_entity_alive() const;
    function is_car() const;
    function run_talk_dialog(game_object*);
    function is_game_object() const;
    function set_custom_panic_threshold(number);
    function set_inventory_item_flags(flags16);
    function set_trader_global_anim(string);
    function projector_is_on() const;
    function is_talking();
    function item_in_ruck(number) const;
    function item_on_belt(number) const;
    function is_actor_outdoors() const;
    function get_container(game_object*, lua_State*);
    function get_actor_max_walk_weight() const;
    function set_relation(enum ALife::ERelationType, game_object*);
    function out_restrictions();
    function memory_time(const game_object&);
    function enable_attachable_item(boolean);
    function get_crouch_factor();
    function critically_wounded();
    function invalidate_inventory();
    function get_weapon_hud() const;
    function set_home(string, number, number, boolean);
    function sight_params();
    function detail_path_type() const;
    function give_info_portion(string);
    function external_sound_start(string);
    function get_grenade(game_object*, lua_State*);
    function set_description(string);
    function clear_animations();
    function bone_position(string) const;
    function set_callback(enum GameObject::ECallbackType, const function<number>&);
    function set_callback(enum GameObject::ECallbackType, const function<number>&, object);
    function set_callback(enum GameObject::ECallbackType);
    function get_corpse() const;
    function location_on_path(number, vector*);
    function sound_prefix() const;
    function sound_prefix(string);
    function get_enemy_strength() const;
    function path_type() const;
    function rank();
    function range() const;
    function set_anomaly_power(number);
    function heal_wounds(number);
    function mass() const;
    function buy_condition(CScriptIniFile*, string);
    function buy_condition(number, number);
    function get_ammo_in_magazine();
    function jump(const vector&, number);
    function best_enemy();
    function vertex_in_direction(number, vector, number) const;
    function info_clear();
    function center();
    function best_cover(const vector&, const vector&, number, number, number);
    function is_missile() const;
    function set_manual_invisibility(boolean);
    function set_tip_text_default();
    function inside(const vector&, number) const;
    function inside(const vector&) const;
    function set_nonscript_usable(boolean);
    function set_patrol_extrapolate_callback();
    function set_patrol_extrapolate_callback(const function<boolean>&);
    function set_patrol_extrapolate_callback(const function<boolean>&, object);
    function set_tip_text(string);
    function body_state() const;
    function see(const game_object*);
    function see(string);
    function accessible(const vector&);
    function accessible(number);
    function get_physics_shell() const;
    function get_ammo_box_curr() const;
    function accessible_nearest(const vector&, vector&);
    function set_condition(number);
    function restore_default_start_dialog();
    function position() const;
    function iterate_inventory(function<void>, object);
    function get_anomaly_power();
    function movement_enabled(boolean);
    function movement_enabled();
    function weapon_unstrapped() const;
    function get_current_outfit_protection(number);
    function set_position(const vector&);
    function parent() const;
    function character_community();
    function group() const;
    function is_physics_shell_holder() const;
    function change_character_reputation(number);
    function character_reputation();
    function character_name();
    function base_in_restrictions();
    function give_task(CGameTask*, number, boolean);
    function set_trader_head_anim(string);
    function change_goodwill(number, game_object*);
    function set_goodwill(number, game_object*);
    function goodwill(game_object*);
    function set_desired_direction();
    function set_desired_direction(const vector*);
    function can_script_capture() const;
    function get_helicopter();
    function get_space_restrictor(game_object*, lua_State*);
    function is_custom_monster() const;
    function id() const;
    function best_danger();
    function set_sound_threshold(number);
    function memory_position(const game_object&);
    function enable_memory_object(game_object*, boolean);
    function external_sound_stop();
    function set_desired_position();
    function set_desired_position(const vector*);
    function target_mental_state() const;
    function binded_object();
    function death_time() const;
    function is_trader() const;
    function set_movement_type(enum MonsterSpace::EMovementType);
};

C++ class hit {
    const burn = 0;
    const chemical_burn = 6;
    const dummy = 11;
    const explosion = 7;
    const fire_wound = 8;
    const radiation = 4;
    const shock = 2;
    const strike = 1;
    const telepatic = 5;
    const wound = 3;
    
 property			direction                (vector);
 property			draftsman                (game_object*);
 property			impulse                  (number);
 property			power                    (number);
 property			type                     (number);
    
    hit ();
    hit (const hit*);
    
    function bone(string);
};

C++ class CScriptIniFile {
    function line_count(string);
    function r_string(string, string);
    function section_exist(string);
    function r_line(CScriptIniFile*, string, number, string&, string&);
    function object(CScriptIniFile*, lua_State*);
    function r_fcolor(string, string);
    function r_vector(string, string);
    function r_section(CScriptIniFile*, lua_State*);
    function add_section(CScriptIniFile*, lua_State*);
    function r_s32(string, string);
    function r_float(string, string);
    function r_clsid(string, string);
    function section_name(number);
    function r_bool(string, string);
    function section_count();
    function r_token(string, string, const token_list&);
    function line_exist(string, string);
    function release();
    function r_string_wq(string, string);
    function load(string);
    function r_u32(string, string);
};

C++ class act {
    const attack = 2;
    const eat = 1;
    const panic = 3;
    const rest = 0;
    
    act ();
    act (enum MonsterSpace::EScriptMonsterGlobalAction);
    act (enum MonsterSpace::EScriptMonsterGlobalAction, game_object*);
    
};

C++ class MonsterHitInfo {
 property			direction                (vector);
 property			time                     (number);
 property			who                      (game_object*);
    
};

C++ class move {
    const back = 4;
    const criteria = 2;
    const crouch = 0;
    const curve = 0;
    const curve_criteria = 2;
    const default = 0;
    const dodge = 1;
    const down = 64;
    const drag = 3;
    const force = 1;
    const fwd = 2;
    const handbrake = 128;
    const jump = 4;
    const left = 8;
    const line = 0;
    const none = 1;
    const off = 512;
    const on = 256;
    const right = 16;
    const run = 1;
    const run_fwd = 2;
    const stand = 2;
    const standing = 1;
    const steal = 5;
    const up = 32;
    const walk = 0;
    const walk_bkwd = 1;
    const walk_fwd = 0;
    
    move ();
    move (enum CScriptMovementAction::EInputKeys);
    move (enum CScriptMovementAction::EInputKeys, number);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, game_object*);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, game_object*, number);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, const patrol&);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, const patrol&, number);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, const vector&);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, const vector&, number);
    move (const vector&, number);
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector&);
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol&);
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*);
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector&, number);
    move (enum MonsterSpace::EScriptMonsterMoveAction, number, vector&);
    move (enum MonsterSpace::EScriptMonsterMoveAction, number, vector&, number);
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol&, number);
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*, number);
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector&, number, enum MonsterSpace::EScriptMonsterSpeedParam);
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol&, number, enum MonsterSpace::EScriptMonsterSpeedParam);
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*, number, enum MonsterSpace::EScriptMonsterSpeedParam);
    
    function completed();
    function path(enum DetailPathManager::EDetailPathType);
    function move(enum MonsterSpace::EMovementType);
    function position(const vector&);
    function input(enum CScriptMovementAction::EInputKeys);
    function patrol(const class CPatrolPath*, class shared_str);
    function object(game_object*);
    function body(enum MonsterSpace::EBodyState);
};

C++ class object {
    const activate = 15;
    const aim1 = 4;
    const aim2 = 5;
    const deactivate = 16;
    const drop = 10;
    const dummy = -1;
    const fire1 = 6;
    const fire2 = 7;
    const hide = 21;
    const idle = 8;
    const reload = 2;
    const reload1 = 2;
    const reload2 = 3;
    const show = 20;
    const strap = 9;
    const switch1 = 0;
    const switch2 = 1;
    const take = 22;
    const turn_off = 19;
    const turn_on = 18;
    const use = 17;
    
    object ();
    object (game_object*, enum MonsterSpace::EObjectAction);
    object (game_object*, enum MonsterSpace::EObjectAction, number);
    object (enum MonsterSpace::EObjectAction);
    object (string, enum MonsterSpace::EObjectAction);
    
    function completed();
    function object(string);
    function object(game_object*);
    function action(enum MonsterSpace::EObjectAction);
};

C++ class particle {
    particle ();
    particle (string, string);
    particle (string, string, const particle_params&);
    particle (string, string, const particle_params&, boolean);
    particle (string, const particle_params&);
    particle (string, const particle_params&, boolean);
    
    function set_velocity(const vector&);
    function set_position(const vector&);
    function set_bone(string);
    function set_angles(const vector&);
    function completed();
    function set_particle(string, boolean);
};

C++ class particles_object {
    particles_object (string);
    
    function pause_path(boolean);
    function play_at_pos(const vector&);
    function move_to(const vector&, const vector&);
    function looped() const;
    function last_position() const;
    function stop_path();
    function load_path(string);
    function start_path(boolean);
    function stop();
    function stop_deffered();
    function set_direction(const vector&);
    function set_orientation(number, number, number);
    function play();
    function playing() const;
};

C++ class rtoken_list {
    rtoken_list ();
    
    function clear();
    function remove(number);
    function count();
    function get(number);
    function add(string);
};

C++ class sound_object {
    const looped = 1;
    const s2d = 2;
    const s3d = 0;
    
 property			frequency                (number);
 property			max_distance             (number);
 property			min_distance             (number);
 property			volume                   (number);
    
    sound_object (string);
    sound_object (string, enum ESoundTypes);
    
    function set_position(const vector&);
    function stop_deffered();
    function get_position() const;
    function stop();
    function play_no_feedback(game_object*, number, number, vector, number);
    function play_at_pos(game_object*, const vector&);
    function play_at_pos(game_object*, const vector&, number);
    function play_at_pos(game_object*, const vector&, number, number);
    function attach_tail(string);
    function length();
    function play(game_object*);
    function play(game_object*, number);
    function play(game_object*, number, number);
    function playing() const;
};

C++ class sound {
    const attack = 3;
    const attack_hit = 4;
    const die = 7;
    const eat = 2;
    const idle = 1;
    const panic = 11;
    const steal = 10;
    const take_damage = 5;
    const threaten = 9;
    
    sound ();
    sound (string, string);
    sound (string, string, const vector&);
    sound (string, string, const vector&, const vector&);
    sound (string, string, const vector&, const vector&, boolean);
    sound (string, vector*);
    sound (string, vector*, const vector&);
    sound (string, vector*, const vector&, boolean);
    sound (sound_object*, string, const vector&);
    sound (sound_object*, string, const vector&, const vector&);
    sound (sound_object*, string, const vector&, const vector&, boolean);
    sound (sound_object*, vector*);
    sound (sound_object*, vector*, const vector&);
    sound (sound_object*, vector*, const vector&, boolean);
    sound (enum MonsterSound::EType);
    sound (enum MonsterSound::EType, number);
    sound (string, string, enum MonsterSpace::EMonsterHeadAnimType);
    
    function set_sound(string);
    function set_sound(const sound_object&);
    function set_position(const vector&);
    function set_bone(string);
    function set_angles(const vector&);
    function set_sound_type(enum ESoundTypes);
    function completed();
};

C++ class SoundInfo {
 property			danger                   (number);
 property			position                 (vector);
 property			power                    (number);
 property			time                     (number);
 property			who                      (game_object*);
    
};

C++ class token_list {
    token_list ();
    
    function clear();
    function remove(string);
    function name(number);
    function id(string);
    function add(string, number);
};

C++ class look {
    const cur_dir = 0;
    const danger = 5;
    const direction = 2;
    const fire_point = 10;
    const path_dir = 1;
    const point = 3;
    const search = 6;
    
    look ();
    look (enum SightManager::ESightType);
    look (enum SightManager::ESightType, vector&);
    look (enum SightManager::ESightType, game_object*);
    look (enum SightManager::ESightType, game_object*, string);
    look (const vector&, number, number);
    look (game_object*, number, number);
    
    function completed();
    function type(enum SightManager::ESightType);
    function object(game_object*);
    function bone(string);
    function direct(const vector&);
};

C++ class CScriptXmlInit {
    CScriptXmlInit ();
    
    function InitSpinText(string, CUIWindow*);
    function InitTab(string, CUIWindow*);
    function InitStatic(string, CUIWindow*);
    function InitList(string, CUIWindow*);
    function InitTrackBar(string, CUIWindow*);
    function InitSpinFlt(string, CUIWindow*);
    function ParseShTexInfo(string);
    function InitLabel(string, CUIWindow*);
    function InitSpinNum(string, CUIWindow*);
    function InitMapList(string, CUIWindow*);
    function ParseFile(string);
    function InitCDkey(string, CUIWindow*);
    function InitProgressBar(string, CUIWindow*);
    function InitKeyBinding(string, CUIWindow*);
    function InitMMShniaga(string, CUIWindow*);
    function InitWindow(string, number, CUIWindow*);
    function InitEditBox(string, CUIWindow*);
    function InitCheck(string, CUIWindow*);
    function InitAutoStaticGroup(string, CUIWindow*);
    function InitScrollView(string, CUIWindow*);
    function InitMapInfo(string, CUIWindow*);
    function InitServerList(string, CUIWindow*);
    function Init3tButton(string, CUIWindow*);
    function InitAnimStatic(string, CUIWindow*);
    function InitFrameLine(string, CUIWindow*);
    function InitComboBox(string, CUIWindow*);
    function InitButton(string, CUIWindow*);
    function InitFrame(string, CUIWindow*);
};

C++ class ce_script_zone : DLL_Pure {
    ce_script_zone ();
    
    function _construct();
};

C++ class CServerList : CUIWindow {
    CServerList ();
    
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function SetFilters(SServerFilters&);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function RefreshQuick();
    function GetMousePosX() const;
    function GetWidth() const;
    function ConnectToSelected();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function SetPlayerName(string);
    function GetFont();
    function ShowServerInfo();
    function RefreshList(boolean);
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function WindowName();
    function SetSortFunc(string, boolean);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function NetRadioChanged(boolean);
    function IsAutoDelete();
    function DetachFromParent();
    function ResetPPMode();
    function SetWndSize(number, number);
    function SetFont(CGameFont*);
    function GetAbsoluteRect(Frect&);
};

C++ class ce_smart_zone : DLL_Pure {
    ce_smart_zone ();
    
    function _construct();
};

C++ class CSnork : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CSnork ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class sound_params {
 property			frequency                (number);
 property			max_distance             (number);
 property			min_distance             (number);
 property			position                 (vector);
 property			volume                   (number);
    
};

C++ class CSpaceRestrictor : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CSpaceRestrictor ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CStalkerOutfit : CCustomOutfit {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			battery_charge           (number);
 property			burn_protection          (number);
 property			chemical_burn_protection (number);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			explosion_protection     (number);
 property			fire_wound_protection    (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			physic_strike_protection (number);
 property			power_loss               (number);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_protection     (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			shock_protection         (number);
 property			slot                     (number);
 property			slots                    (object);
 property			strike_protection        (number);
 property			telepatic_protection     (number);
 property			updated_times            (number);
 property			wound_2_protection       (number);
 property			wound_protection         (number);
    
    CStalkerOutfit ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function set_schedule(ISheduled*, number, number);
    function test_server_flag(number) const;
    function set_visible_in_slot(number, boolean);
    function condition_ex(number) const;
    function net_Export(net_packet&);
    function load_config(string);
    function use(CGameObject*);
};

C++ class stalker_ids {
    const action_accomplish_task = 7;
    const action_aim_enemy = 16;
    const action_alife_planner = 57;
    const action_anomaly_planner = 59;
    const action_combat_planner = 58;
    const action_communicate_with_customer = 9;
    const action_critically_wounded = 36;
    const action_danger_by_sound_planner = 42;
    const action_danger_grenade_look_around = 54;
    const action_danger_grenade_planner = 41;
    const action_danger_grenade_search = 55;
    const action_danger_grenade_take_cover = 51;
    const action_danger_grenade_take_cover_after_explosion = 53;
    const action_danger_grenade_wait_for_explosion = 52;
    const action_danger_in_direction_detour = 49;
    const action_danger_in_direction_hold_position = 48;
    const action_danger_in_direction_look_out = 47;
    const action_danger_in_direction_planner = 40;
    const action_danger_in_direction_search = 50;
    const action_danger_in_direction_take_cover = 46;
    const action_danger_planner = 60;
    const action_danger_unknown_look_around = 44;
    const action_danger_unknown_planner = 39;
    const action_danger_unknown_search = 45;
    const action_danger_unknown_take_cover = 43;
    const action_dead = 0;
    const action_death_planner = 56;
    const action_detour_enemy = 25;
    const action_dying = 1;
    const action_find_ammo = 15;
    const action_find_item_to_kill = 13;
    const action_gather_items = 2;
    const action_get_distance = 24;
    const action_get_item_to_kill = 12;
    const action_get_ready_to_kill = 17;
    const action_hold_position = 23;
    const action_kill_enemy = 19;
    const action_kill_enemy_if_not_visible = 29;
    const action_kill_if_enemy_critically_wounded = 37;
    const action_kill_if_player_on_the_path = 35;
    const action_kill_wounded_enemy = 33;
    const action_look_out = 22;
    const action_make_item_killing = 14;
    const action_no_alife = 3;
    const action_post_combat_wait = 34;
    const action_prepare_wounded_enemy = 32;
    const action_reach_customer_location = 8;
    const action_reach_task_location = 6;
    const action_reach_wounded_enemy = 30;
    const action_retreat_from_enemy = 20;
    const action_script = 61;
    const action_search_enemy = 26;
    const action_smart_terrain_task = 4;
    const action_solve_zone_puzzle = 5;
    const action_sudden_attack = 28;
    const action_take_cover = 21;
    const detect_anomaly = 11;
    const get_out_of_anomaly = 10;
    const property_alife = 3;
    const property_alive = 0;
    const property_already_dead = 2;
    const property_anomaly = 42;
    const property_cover_actual = 38;
    const property_cover_reached = 39;
    const property_critically_wounded = 29;
    const property_danger = 8;
    const property_danger_by_sound = 37;
    const property_danger_grenade = 36;
    const property_danger_in_direction = 35;
    const property_danger_unknown = 34;
    const property_dead = 1;
    const property_enemy = 7;
    const property_enemy_critically_wounded = 30;
    const property_enemy_detoured = 21;
    const property_found_ammo = 12;
    const property_found_item_to_kill = 10;
    const property_grenade_exploded = 41;
    const property_in_cover = 18;
    const property_inside_anomaly = 43;
    const property_item_can_kill = 11;
    const property_item_to_kill = 9;
    const property_items = 6;
    const property_looked_around = 40;
    const property_looked_out = 19;
    const property_panic = 17;
    const property_position_holded = 20;
    const property_pure_enemy = 23;
    const property_puzzle_solved = 4;
    const property_ready_to_detour = 14;
    const property_ready_to_kill = 13;
    const property_script = 44;
    const property_see_enemy = 15;
    const property_smart_terrain_task = 5;
    const property_use_crouch_to_look_out = 24;
    const property_use_suddenness = 22;
    const sound_alarm = 4;
    const sound_attack_allies_several_enemies = 7;
    const sound_attack_allies_single_enemy = 6;
    const sound_attack_no_allies = 5;
    const sound_backup = 8;
    const sound_detour = 9;
    const sound_die = 0;
    const sound_die_in_anomaly = 1;
    const sound_enemy_critically_wounded = 21;
    const sound_enemy_killed_or_wounded = -805302272;
    const sound_friendly_grenade_alarm = 17;
    const sound_grenade_alarm = 16;
    const sound_humming = 3;
    const sound_injuring = 2;
    const sound_injuring_by_friend = 12;
    const sound_kill_wounded = 20;
    const sound_need_backup = 18;
    const sound_panic_human = 13;
    const sound_panic_monster = 14;
    const sound_running_in_danger = 19;
    const sound_script = 23;
    const sound_search1_no_allies = 11;
    const sound_search1_with_allies = 10;
    const sound_tolls = 15;
    
};

C++ class CTexture {
 property			height;
 property			ref_count;
 property			width;
    
    function delete(CTexture*);
    function find(string);
    function reload(CTexture*);
    function get_name(CTexture*);
    function unload(CTexture*);
    function cast_texture(lua_State*);
    function get_surface();
    function load(CTexture*);
    function set_name(CTexture*, string);
};

C++ class CThornArtefact : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CThornArtefact ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CTorch : CInventoryItemObject {
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			on;
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CTorch ();
    
    function set_color(const fcolor&, number);
    function set_rgb(number, number, number, number);
    function _construct();
    function set_virtual_size(number, number);
    function enable(boolean);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function visible_in_slot(number);
    function set_visible_in_slot(number, boolean);
    function switch();
    function net_Export(net_packet&);
    function Visual();
    function set_brightness(number);
    function net_Import(net_packet&);
    function set_angle(number, number);
    function set_animation(string);
    function get_light(number);
    function set_texture(string, number);
    function set_schedule(ISheduled*, number, number);
    function set_range(number, number);
    function getEnabled() const;
    function test_server_flag(number) const;
    function load_config(string);
    function use(CGameObject*);
};

C++ class CTushkano : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CTushkano ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CUI3tButton : CUIButton {
    CUI3tButton ();
    
    function StartSlide(number, number);
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function SetColor(number);
    function GetText();
    function GetMousePosX() const;
    function GetColor() const;
    function Show(boolean);
    function GetClipperState();
    function SetTextComplexMode(boolean);
    function SetTextX(number);
    function GetWidth() const;
    function GetFont();
    function SetOriginalRect(number, number, number, number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function SetHeading(number);
    function ClipperOff();
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function IsChild(CUIWindow*) const;
    function SetText(string);
    function GetHeading();
    function EnableTextHighlighting(boolean);
    function SetHighlightColor(number);
    function SetTextureOffset(number, number);
    function SetStretchTexture(boolean);
    function SetFont(CGameFont*);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function ClipperOn();
    function GetSlideStage() const;
    function SetAutoDelete(boolean);
    function SetSlideTrack(number, number, number, number);
    function GetWndRect(Frect&);
    function GetTextAlign();
    function AttachChild(CUIWindow*);
    function GetTextY();
    function GetStretchTexture();
    function SetTextColor(number, number, number, number);
    function AdjustWidthToText();
    function SetTextST(string);
    function IsAutoDelete();
    function WindowName();
    function AdjustHeightToText();
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetClipRect(Frect);
    function SetHeight(number);
    function InitTexture(string);
    function GetMousePosY() const;
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function GetAbsoluteRect(Frect&);
};

C++ class CUIButton : CUIStatic {
    CUIButton ();
    
    function StartSlide(number, number);
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function EnableTextHighlighting(boolean);
    function GetText();
    function GetMousePosX() const;
    function GetColor() const;
    function SetHighlightColor(number);
    function GetAbsoluteRect(Frect&);
    function SetTextComplexMode(boolean);
    function GetClipperState();
    function SetClipRect(Frect);
    function SetTextX(number);
    function ResetPPMode();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function ClipperOff();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function DetachFromParent();
    function GetHeading();
    function GetFont();
    function SetText(string);
    function AdjustHeightToText();
    function SetStretchTexture(boolean);
    function SetFont(CGameFont*);
    function SetTextST(string);
    function IsAutoDelete();
    function ClipperOn();
    function GetSlideStage() const;
    function SetAutoDelete(boolean);
    function SetSlideTrack(number, number, number, number);
    function GetWndRect(Frect&);
    function GetTextY();
    function AttachChild(CUIWindow*);
    function SetTextColor(number, number, number, number);
    function GetStretchTexture();
    function AdjustWidthToText();
    function GetTextAlign();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function SetWndPos(number, number);
    function WindowName();
    function SetTextureOffset(number, number);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetHeading(number);
    function SetOriginalRect(number, number, number, number);
    function InitTexture(string);
    function GetWidth() const;
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function SetColor(number);
};

C++ class CUICaption {
    function addCustomMessage(const class shared_str&, number, number, number, CGameFont*, enum CGameFont::EAligment, number, string);
    function setCaption(const class shared_str&, string, number, boolean);
};

C++ class CUICarBodyWnd : CUIDialogWnd {
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function SetHolder(CDialogHolder*);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function WindowName();
    function GetOwnerID() const;
    function GetHolder();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetAbsoluteRect(Frect&);
    function SetFont(CGameFont*);
    function ResetPPMode();
    function SetHeight(number);
    function SetWndSize(number, number);
    function GetCarBodyWnd(CUIDialogWnd*);
    function IsAutoDelete();
};

C++ class CUICheckButton : CUI3tButton {
    CUICheckButton ();
    
    function SetDependControl(CUIWindow*);
    function StartSlide(number, number);
    function AdjustWidthToText();
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetText(string);
    function SetTextX(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetAbsoluteRect(Frect&);
    function SetOriginalRect(number, number, number, number);
    function GetMousePosX() const;
    function GetColor() const;
    function ClipperOff();
    function SetHeading(number);
    function SetTextComplexMode(boolean);
    function GetClipperState();
    function GetMousePosY() const;
    function GetCheck();
    function SetHeight(number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function SetClipRect(Frect);
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function IsChild(CUIWindow*) const;
    function SetHighlightColor(number);
    function GetHeading();
    function EnableTextHighlighting(boolean);
    function GetFont();
    function AdjustHeightToText();
    function SetStretchTexture(boolean);
    function SetFont(CGameFont*);
    function IsAutoDelete();
    function SetTextST(string);
    function ClipperOn();
    function GetSlideStage() const;
    function SetAutoDelete(boolean);
    function SetSlideTrack(number, number, number, number);
    function GetWndRect(Frect&);
    function SetCheck(boolean);
    function AttachChild(CUIWindow*);
    function SetTextColor(number, number, number, number);
    function SetWndPos(number, number);
    function GetStretchTexture();
    function GetTextAlign();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function GetTextY();
    function WindowName();
    function SetTextureOffset(number, number);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function DetachFromParent();
    function GetText();
    function InitTexture(string);
    function GetWidth() const;
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function SetColor(number);
};

C++ class CUIComboBox : CUIWindow {
    CUIComboBox ();
    
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function SetListLength(number);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function SetVertScroll(boolean);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(number, number, number);
    function WindowName();
    function SetFont(CGameFont*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function CurrentID();
    function ResetPPMode();
    function DetachFromParent();
    function IsAutoDelete();
    function SetWndSize(number, number);
    function SetCurrentID(number);
    function GetAbsoluteRect(Frect&);
};

C++ class CUICustomEdit : CUIWindow {
    function GetTextAlignment();
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function SetTextPosX(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetText();
    function GetMousePosX() const;
    function GetWidth() const;
    function GetTextColor();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function SetTextPosY(number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetNumbersOnly(boolean);
    function WindowName();
    function SetTextAlignment(enum CGameFont::EAligment);
    function SetTextColor(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function ResetPPMode();
    function SetText(string);
    function DetachFromParent();
    function IsAutoDelete();
    function SetWndSize(number, number);
    function SetFont(CGameFont*);
    function GetAbsoluteRect(Frect&);
};

C++ class CUICustomSpin : CUIWindow {
    function GetFont();
    function SetWndSize(number, number);
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function IsAutoDelete();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function GetText();
    function SetAutoDelete(boolean);
    function ResetPPMode();
    function GetWndRect(Frect&);
    function SetHeight(number);
    function GetWidth() const;
    function WindowName();
    function SetWndPos(number, number);
    function SetFont(CGameFont*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function AttachChild(CUIWindow*);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetAbsoluteRect(Frect&);
};

C++ class CUIDialogWnd : CUIWindow {
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function SetHolder(CDialogHolder*);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function WindowName();
    function GetHolder();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetCarBodyWnd(CUIDialogWnd*);
    function ResetPPMode();
    function DetachFromParent();
    function IsAutoDelete();
    function SetWndSize(number, number);
    function SetFont(CGameFont*);
    function GetAbsoluteRect(Frect&);
};

C++ class CUIScriptWnd : CUIDialogWnd,DLL_Pure {
    CUIScriptWnd ();
    
    function GetDragDrop(string);
    function _construct();
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetFrameLineWnd(string);
    function GetMousePosX() const;
    function SetHolder(CDialogHolder*);
    function GetWidth() const;
    function Destroy(CUIDialogWnd*);
    function GetCheckButton(string);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetCarBodyWnd(CUIDialogWnd*);
    function GetPropertiesBox(string);
    function GetFont();
    function Dispatch(number, number);
    function GetTabControl(string);
    function OnKeyboard(number, enum EUIMessages);
    function GetListWnd(string);
    function Update();
    function AddCallback(string, number, const function<void>&);
    function AddCallback(string, number, const function<void>&, object);
    function ResetPPMode();
    function GetFrameWindow(string);
    function SetAutoDelete(boolean);
    function GetDialogWnd(string);
    function GetWndRect(Frect&);
    function GetEditBox(string);
    function AttachChild(CUIWindow*);
    function GetStatic(string);
    function SetWndPos(number, number);
    function GetRadioButton(string);
    function GetMessageBox(string);
    function Init(number, number, number, number);
    function Init(Frect*);
    function GetButton(string);
    function WindowName();
    function Register(CUIWindow*);
    function Register(CUIWindow*, string);
    function GetHolder();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetAbsoluteRect(Frect&);
    function SetFont(CGameFont*);
    function GetProgressBar(string);
    function SetHeight(number);
    function SetWndSize(number, number);
    function Load(string);
    function IsAutoDelete();
};

C++ class CUIDragDropListEx : CUIWindow {
    function GetFont();
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function IsAutoDelete();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function SetWndSize(number, number);
    function SetAutoDelete(boolean);
    function ResetPPMode();
    function GetWndRect(Frect&);
    function SetHeight(number);
    function GetWidth() const;
    function WindowName();
    function SetWndPos(number, number);
    function SetFont(CGameFont*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function AttachChild(CUIWindow*);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetAbsoluteRect(Frect&);
};

C++ class CUIEditBox : CUICustomEdit {
    CUIEditBox ();
    
    function GetTextAlignment();
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function SetTextPosX(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetText();
    function GetMousePosX() const;
    function GetWidth() const;
    function GetTextColor();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function SetTextPosY(number);
    function SetText(string);
    function Init(number, number, number, number);
    function Init(Frect*);
    function GetAbsoluteRect(Frect&);
    function WindowName();
    function SetFont(CGameFont*);
    function SetTextColor(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetNumbersOnly(boolean);
    function DetachFromParent();
    function InitTexture(string);
    function ResetPPMode();
    function SetWndSize(number, number);
    function SetTextAlignment(enum CGameFont::EAligment);
    function IsAutoDelete();
};

C++ class CUIEditBoxEx : CUICustomEdit {
    CUIEditBoxEx ();
    
    function GetTextAlignment();
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function SetTextPosX(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetText();
    function GetMousePosX() const;
    function GetWidth() const;
    function GetTextColor();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function SetTextPosY(number);
    function SetText(string);
    function Init(number, number, number, number);
    function Init(Frect*);
    function GetAbsoluteRect(Frect&);
    function WindowName();
    function SetFont(CGameFont*);
    function SetTextColor(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetNumbersOnly(boolean);
    function DetachFromParent();
    function InitTexture(string);
    function ResetPPMode();
    function SetWndSize(number, number);
    function SetTextAlignment(enum CGameFont::EAligment);
    function IsAutoDelete();
};

C++ class CUIFrameLineWnd : CUIWindow {
    CUIFrameLineWnd ();
    
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function SetOrientation(boolean);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number, boolean);
    function WindowName();
    function GetTitleStatic();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetColor(number);
    function ResetPPMode();
    function DetachFromParent();
    function IsAutoDelete();
    function SetWndSize(number, number);
    function SetFont(CGameFont*);
    function GetAbsoluteRect(Frect&);
};

C++ class CUIFrameWindow : CUIWindow {
    CUIFrameWindow ();
    
    function GetTitleStatic();
    function GetFont();
    function SetColor(number);
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function IsAutoDelete();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function SetWndSize(number, number);
    function SetAutoDelete(boolean);
    function ResetPPMode();
    function GetWndRect(Frect&);
    function SetHeight(number);
    function GetWidth() const;
    function WindowName();
    function SetWndPos(number, number);
    function SetFont(CGameFont*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function AttachChild(CUIWindow*);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetAbsoluteRect(Frect&);
};

C++ class CUIGameCustom {
    function AddCustomMessage(string, number, number, number, CGameFont*, number, number);
    function AddCustomMessage(string, number, number, number, CGameFont*, number, number, number);
    function GetCustomStatic(string);
    function RemoveCustomStatic(string);
    function RemoveCustomMessage(string);
    function AddCustomStatic(string, boolean);
    function CustomMessageOut(string, string, number);
    function RemoveDialogToRender(CUIWindow*);
    function AddDialogToRender(CUIWindow*);
};

C++ class CUILabel : CUIFrameLineWnd {
    CUILabel ();
    
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetText();
    function GetMousePosX() const;
    function SetOrientation(boolean);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number, boolean);
    function WindowName();
    function SetText(string);
    function GetAbsoluteRect(Frect&);
    function GetTitleStatic();
    function SetFont(CGameFont*);
    function ResetPPMode();
    function SetHeight(number);
    function IsAutoDelete();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetColor(number);
};

C++ class CUIListItem : CUIButton {
    CUIListItem ();
    
    function StartSlide(number, number);
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function SetColor(number);
    function GetText();
    function GetMousePosX() const;
    function GetColor() const;
    function Show(boolean);
    function GetClipperState();
    function SetTextComplexMode(boolean);
    function SetTextX(number);
    function GetWidth() const;
    function GetFont();
    function SetOriginalRect(number, number, number, number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function SetHeading(number);
    function ClipperOff();
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function IsChild(CUIWindow*) const;
    function SetText(string);
    function GetHeading();
    function EnableTextHighlighting(boolean);
    function SetHighlightColor(number);
    function SetTextureOffset(number, number);
    function SetStretchTexture(boolean);
    function SetFont(CGameFont*);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function ClipperOn();
    function GetSlideStage() const;
    function SetAutoDelete(boolean);
    function SetSlideTrack(number, number, number, number);
    function GetWndRect(Frect&);
    function GetTextAlign();
    function AttachChild(CUIWindow*);
    function GetTextY();
    function GetStretchTexture();
    function SetTextColor(number, number, number, number);
    function AdjustWidthToText();
    function SetTextST(string);
    function IsAutoDelete();
    function WindowName();
    function AdjustHeightToText();
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetClipRect(Frect);
    function SetHeight(number);
    function InitTexture(string);
    function GetMousePosY() const;
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function GetAbsoluteRect(Frect&);
};

C++ class CUIListItemEx : CUIListItem {
    CUIListItemEx ();
    
    function StartSlide(number, number);
    function SetSelectionColor(number);
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetText(string);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetAbsoluteRect(Frect&);
    function SetOriginalRect(number, number, number, number);
    function GetMousePosX() const;
    function GetColor() const;
    function ClipperOff();
    function SetHeading(number);
    function SetTextComplexMode(boolean);
    function GetClipperState();
    function GetMousePosY() const;
    function SetTextX(number);
    function SetHeight(number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function SetClipRect(Frect);
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function IsChild(CUIWindow*) const;
    function SetHighlightColor(number);
    function GetHeading();
    function EnableTextHighlighting(boolean);
    function GetFont();
    function AdjustHeightToText();
    function SetStretchTexture(boolean);
    function SetFont(CGameFont*);
    function IsAutoDelete();
    function SetTextST(string);
    function ClipperOn();
    function GetSlideStage() const;
    function SetAutoDelete(boolean);
    function SetSlideTrack(number, number, number, number);
    function GetWndRect(Frect&);
    function AdjustWidthToText();
    function AttachChild(CUIWindow*);
    function SetTextColor(number, number, number, number);
    function SetWndPos(number, number);
    function GetStretchTexture();
    function GetTextAlign();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function GetTextY();
    function WindowName();
    function SetTextureOffset(number, number);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function DetachFromParent();
    function GetText();
    function InitTexture(string);
    function GetWidth() const;
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function SetColor(number);
};

C++ class CUIListWnd : CUIWindow {
    CUIListWnd ();
    
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function ActivateList(boolean);
    function ScrollToBegin();
    function GetMousePosX() const;
    function GetWidth() const;
    function GetSize();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function SetItemHeight(number);
    function ResetFocusCapture();
    function GetFont();
    function GetSelectedItem();
    function ShowSelectedItem(boolean);
    function EnableScrollBar(boolean);
    function GetItemPos(CUIListItem*);
    function GetFocusedItem();
    function SetFocusedItem(number);
    function GetVertFlip();
    function RemoveAll();
    function SetAutoDelete(boolean);
    function IsListActive();
    function GetWndRect(Frect&);
    function SetTextColor(number);
    function AttachChild(CUIWindow*);
    function ScrollToPos(number);
    function SetWndPos(number, number);
    function ScrollToEnd();
    function SetFont(CGameFont*);
    function Init(number, number, number, number);
    function Init(Frect*);
    function IsScrollBarEnabled();
    function WindowName();
    function SetVertFlip(boolean);
    function RemoveItem(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function AddItem(CUIListItem*);
    function DetachFromParent();
    function IsAutoDelete();
    function ResetPPMode();
    function SetWndSize(number, number);
    function GetItem(number);
    function GetAbsoluteRect(Frect&);
};

C++ class CUIMMShniaga : CUIWindow {
    function GetFont();
    function SetVisibleMagnifier(boolean);
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function IsAutoDelete();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function SetWndSize(number, number);
    function SetAutoDelete(boolean);
    function ResetPPMode();
    function GetWndRect(Frect&);
    function SetHeight(number);
    function GetWidth() const;
    function WindowName();
    function SetWndPos(number, number);
    function SetFont(CGameFont*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function AttachChild(CUIWindow*);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetAbsoluteRect(Frect&);
};

C++ class CUIMainIngameWnd : CUIWindow {
    function GetFont();
    function WindowName();
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function IsAutoDelete();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function SetWndSize(number, number);
    function SetAutoDelete(boolean);
    function ResetPPMode();
    function GetWndRect(Frect&);
    function SetHeight(number);
    function GetWidth() const;
    function GetStatic(CUIMainIngameWnd*, lua_State*);
    function SetWndPos(number, number);
    function SetFont(CGameFont*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function AttachChild(CUIWindow*);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetAbsoluteRect(Frect&);
};

C++ class CUIMapInfo : CUIWindow {
    CUIMapInfo ();
    
    function GetFont();
    function SetWndSize(number, number);
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function IsAutoDelete();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function InitMap(string);
    function SetAutoDelete(boolean);
    function ResetPPMode();
    function GetWndRect(Frect&);
    function SetHeight(number);
    function GetWidth() const;
    function WindowName();
    function SetWndPos(number, number);
    function SetFont(CGameFont*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function AttachChild(CUIWindow*);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetAbsoluteRect(Frect&);
};

C++ class CUIMapList : CUIWindow {
    CUIMapList ();
    
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function GetCommandLine(string);
    function GetWidth() const;
    function GetCurGameType();
    function SetServerParams(string);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function SetWeatherSelector(CUIComboBox*);
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function StartDedicatedServer();
    function SetModeSelector(CUISpinText*);
    function OnModeChange();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function SetMapPic(CUIStatic*);
    function Init(number, number, number, number);
    function Init(Frect*);
    function IsEmpty();
    function WindowName();
    function SetMapInfo(CUIMapInfo*);
    function SaveMapList();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function LoadMapList();
    function DetachFromParent();
    function IsAutoDelete();
    function ResetPPMode();
    function SetWndSize(number, number);
    function SetFont(CGameFont*);
    function GetAbsoluteRect(Frect&);
};

C++ class CUIMessageBox : CUIStatic {
    CUIMessageBox ();
    
    function StartSlide(number, number);
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetPassword();
    function GetText();
    function GetMousePosX() const;
    function GetColor() const;
    function GetHost();
    function GetAbsoluteRect(Frect&);
    function SetTextComplexMode(boolean);
    function GetClipperState();
    function SetClipRect(Frect);
    function SetTextX(number);
    function ResetPPMode();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function ClipperOff();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function DetachFromParent();
    function GetHeading();
    function GetFont();
    function SetText(string);
    function AdjustHeightToText();
    function SetStretchTexture(boolean);
    function SetFont(CGameFont*);
    function SetTextST(string);
    function IsAutoDelete();
    function ClipperOn();
    function GetSlideStage() const;
    function SetAutoDelete(boolean);
    function SetSlideTrack(number, number, number, number);
    function GetWndRect(Frect&);
    function GetTextY();
    function AttachChild(CUIWindow*);
    function SetTextColor(number, number, number, number);
    function GetStretchTexture();
    function AdjustWidthToText();
    function GetTextAlign();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function Init(string);
    function SetWndPos(number, number);
    function WindowName();
    function SetTextureOffset(number, number);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetHeading(number);
    function SetOriginalRect(number, number, number, number);
    function InitTexture(string);
    function GetWidth() const;
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function SetColor(number);
};

C++ class CUIMessageBoxEx : CUIDialogWnd {
    CUIMessageBoxEx ();
    
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function SetHolder(CDialogHolder*);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function GetPassword();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string);
    function GetHost();
    function WindowName();
    function SetText(string);
    function GetHolder();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetAbsoluteRect(Frect&);
    function SetFont(CGameFont*);
    function ResetPPMode();
    function SetHeight(number);
    function SetWndSize(number, number);
    function GetCarBodyWnd(CUIDialogWnd*);
    function IsAutoDelete();
};

C++ class COptionsManager {
    COptionsManager ();
    
    function SendMessage2Group(string, string);
    function SaveBackupValues(string);
    function IsGroupChanged(string);
    function SaveValues(string);
    function SetCurrentValues(string);
    function UndoGroup(string);
    function OptionsPostAccept();
};

C++ class CUIProgressBar : CUIWindow {
    CUIProgressBar ();
    
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function GetRange_max();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function SetProgressPos(number);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetRange_min();
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function WindowName();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetProgressPos();
    function DetachFromParent();
    function IsAutoDelete();
    function ResetPPMode();
    function SetWndSize(number, number);
    function SetFont(CGameFont*);
    function GetAbsoluteRect(Frect&);
};

C++ class CUIPropertiesBox : CUIFrameWindow {
    CUIPropertiesBox ();
    
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function GetWidth() const;
    function Hide();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function Show(number, number);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function AutoUpdateSize();
    function SetWndPos(number, number);
    function AddItem(string);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function RemoveAll();
    function WindowName();
    function RemoveItem(number);
    function GetAbsoluteRect(Frect&);
    function GetTitleStatic();
    function ResetPPMode();
    function SetHeight(number);
    function IsAutoDelete();
    function SetFont(CGameFont*);
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetColor(number);
};

C++ class CUIScrollView : CUIWindow {
    CUIScrollView ();
    
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function RemoveWindow(CUIWindow*);
    function ScrollToBegin();
    function GetMousePosX() const;
    function AddWindow(CUIWindow*, boolean);
    function GetWidth() const;
    function Clear();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetFont();
    function GetCurrentScrollPos();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function ScrollToEnd();
    function Init(number, number, number, number);
    function Init(Frect*);
    function WindowName();
    function GetMinScrollPos();
    function GetMaxScrollPos();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetScrollPos(number);
    function DetachFromParent();
    function IsAutoDelete();
    function ResetPPMode();
    function SetWndSize(number, number);
    function SetFont(CGameFont*);
    function GetAbsoluteRect(Frect&);
};

C++ class CUISpinFlt : CUICustomSpin {
    CUISpinFlt ();
    
    function GetFont();
    function GetAbsoluteRect(Frect&);
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function ResetPPMode();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosY() const;
    function GetText();
    function GetMousePosX() const;
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function GetWidth() const;
    function SetFont(CGameFont*);
    function SetWndPos(number, number);
    function GetParent() const;
    function Show(boolean);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function DetachFromParent();
    function IsEnabled();
    function SetWndSize(number, number);
    function IsChild(CUIWindow*) const;
    function IsAutoDelete();
};

C++ class CUISpinNum : CUICustomSpin {
    CUISpinNum ();
    
    function GetFont();
    function GetAbsoluteRect(Frect&);
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function ResetPPMode();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosY() const;
    function GetText();
    function GetMousePosX() const;
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function GetWidth() const;
    function SetFont(CGameFont*);
    function SetWndPos(number, number);
    function GetParent() const;
    function Show(boolean);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function DetachFromParent();
    function IsEnabled();
    function SetWndSize(number, number);
    function IsChild(CUIWindow*) const;
    function IsAutoDelete();
};

C++ class CUISpinText : CUICustomSpin {
    CUISpinText ();
    
    function GetFont();
    function GetAbsoluteRect(Frect&);
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function ResetPPMode();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosY() const;
    function GetText();
    function GetMousePosX() const;
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function GetWidth() const;
    function SetFont(CGameFont*);
    function SetWndPos(number, number);
    function GetParent() const;
    function Show(boolean);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function DetachFromParent();
    function IsEnabled();
    function SetWndSize(number, number);
    function IsChild(CUIWindow*) const;
    function IsAutoDelete();
};

C++ class CUIStatic : CUIWindow {
    CUIStatic ();
    
    function StartSlide(number, number);
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetText();
    function GetMousePosX() const;
    function GetColor() const;
    function SetColor(number);
    function GetWidth() const;
    function SetTextX(number);
    function AdjustHeightToText();
    function SetTextComplexMode(boolean);
    function SetClipRect(Frect);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function GetClipperState();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function ClipperOff();
    function GetHeading();
    function GetFont();
    function SetOriginalRect(number, number, number, number);
    function SetHeading(number);
    function SetStretchTexture(boolean);
    function GetTextAlign();
    function SetFont(CGameFont*);
    function GetStretchTexture();
    function ClipperOn();
    function GetSlideStage() const;
    function SetAutoDelete(boolean);
    function SetSlideTrack(number, number, number, number);
    function GetWndRect(Frect&);
    function SetTextureOffset(number, number);
    function AttachChild(CUIWindow*);
    function IsAutoDelete();
    function SetWndPos(number, number);
    function SetTextColor(number, number, number, number);
    function AdjustWidthToText();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function GetTextY();
    function WindowName();
    function SetTextST(string);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetText(string);
    function DetachFromParent();
    function InitTexture(string);
    function ResetPPMode();
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function GetAbsoluteRect(Frect&);
};

C++ class CUITabButton : CUIButton {
    CUITabButton ();
    
    function StartSlide(number, number);
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function SetColor(number);
    function GetText();
    function GetMousePosX() const;
    function GetColor() const;
    function Show(boolean);
    function GetClipperState();
    function SetTextComplexMode(boolean);
    function SetTextX(number);
    function GetWidth() const;
    function GetFont();
    function SetOriginalRect(number, number, number, number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function SetHeading(number);
    function ClipperOff();
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function IsChild(CUIWindow*) const;
    function SetText(string);
    function GetHeading();
    function EnableTextHighlighting(boolean);
    function SetHighlightColor(number);
    function SetTextureOffset(number, number);
    function SetStretchTexture(boolean);
    function SetFont(CGameFont*);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function ClipperOn();
    function GetSlideStage() const;
    function SetAutoDelete(boolean);
    function SetSlideTrack(number, number, number, number);
    function GetWndRect(Frect&);
    function GetTextAlign();
    function AttachChild(CUIWindow*);
    function GetTextY();
    function GetStretchTexture();
    function SetTextColor(number, number, number, number);
    function AdjustWidthToText();
    function SetTextST(string);
    function IsAutoDelete();
    function WindowName();
    function AdjustHeightToText();
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetClipRect(Frect);
    function SetHeight(number);
    function InitTexture(string);
    function GetMousePosY() const;
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function GetAbsoluteRect(Frect&);
};

C++ class CUITabControl : CUIWindow {
    CUITabControl ();
    
    function SetWindowName(string, number);
    function Enable(boolean);
    function SetHeight(number);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function GetActiveIndex();
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetTabsCount() const;
    function GetFont();
    function SetAutoDelete(boolean);
    function GetWndRect(Frect&);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function GetButtonByIndex(number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetNewActiveTab(number);
    function WindowName();
    function RemoveAll();
    function RemoveItem(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function AddItem(CUITabButton*);
    function AddItem(string, string, number, number, number, number);
    function DetachFromParent();
    function IsAutoDelete();
    function ResetPPMode();
    function SetWndSize(number, number);
    function SetFont(CGameFont*);
    function GetAbsoluteRect(Frect&);
};

C++ class CUITrackBar : CUIWindow {
    CUITrackBar ();
    
    function SetHeight(number);
    function GetFont();
    function SetFont(CGameFont*);
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function IsAutoDelete();
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetMousePosX() const;
    function SetWndSize(number, number);
    function SetAutoDelete(boolean);
    function ResetPPMode();
    function GetWndRect(Frect&);
    function SetCheck(boolean);
    function GetWidth() const;
    function WindowName();
    function SetWndPos(number, number);
    function GetCheck();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function GetParent() const;
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function AttachChild(CUIWindow*);
    function IsEnabled();
    function GetMousePosY() const;
    function IsChild(CUIWindow*) const;
    function GetAbsoluteRect(Frect&);
};

C++ class CUIWindow {
    CUIWindow ();
    
    function GetFont();
    function SetWindowName(string, number);
    function Enable(boolean);
    function DetachFromParent();
    function GetAbsoluteRect(Frect&);
    function FindChild(CUIWindow*, string);
    function FindChild(string);
    function GetWidth() const;
    function GetMousePosY() const;
    function SetAutoDelete(boolean);
    function GetParent() const;
    function GetWndRect(Frect&);
    function GetMousePosX() const;
    function AttachChild(CUIWindow*);
    function ResetPPMode();
    function SetWndPos(number, number);
    function Show(boolean);
    function WindowName();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function SetHeight(number);
    function IsEnabled();
    function SetWndSize(number, number);
    function IsChild(CUIWindow*) const;
    function IsAutoDelete();
};

C++ class GameGraph__CVertex {
    function level_vertex_id() const;
    function game_point(const GameGraph__CVertex*);
    function level_id() const;
    function level_point(const GameGraph__CVertex*);
};

C++ class CWeapon : CInventoryItemObject {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			fire_dispersion_condition_factor(number);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function test_server_flag(number) const;
    function stop_fire();
    function start_fire2();
    function visible_in_slot(number);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class CWeaponAK74 : CWeaponMagazinedWGrenade {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			gren_mag_size            (number);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponAK74 ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function visible_in_slot(number);
    function start_fire();
    function test_server_flag(number) const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function getEnabled() const;
    function stop_fire2();
    function use(CGameObject*);
};

C++ class CWeaponAmmo : CInventoryItemObject {
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			current                  (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			size                     (number);
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    function Visual();
    function getEnabled() const;
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function _construct();
    function load_config(string);
    function set_schedule(ISheduled*, number, number);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponBM16 : CWeaponShotgun {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponBM16 ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function visible_in_slot(number);
    function start_fire();
    function test_server_flag(number) const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function getEnabled() const;
    function stop_fire2();
    function use(CGameObject*);
};

C++ class CWeaponBinoculars : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponBinoculars ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponFN2000 : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponFN2000 ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponFORT : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponFORT ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponGroza : CWeaponMagazinedWGrenade {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			gren_mag_size            (number);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponGroza ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function visible_in_slot(number);
    function start_fire();
    function test_server_flag(number) const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function getEnabled() const;
    function stop_fire2();
    function use(CGameObject*);
};

C++ class CWeaponHPSA : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponHPSA ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponHUD {
 property			fire_bone;
 property			fire_point;
 property			fire_point2;
 property			transform;
 property			visible;
 property			visual;
 property			zoom_offset              (vector);
 property			zoom_rotate_x            (number);
 property			zoom_rotate_y            (number);
    
};

C++ class CWeaponKnife : CWeapon {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			fire_dispersion_condition_factor(number);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponKnife ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function set_schedule(ISheduled*, number, number);
    function start_fire();
    function visible_in_slot(number);
    function test_server_flag(number) const;
    function stop_fire();
    function start_fire2();
    function getEnabled() const;
    function stop_fire2();
    function use(CGameObject*);
};

C++ class CWeaponLR300 : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponLR300 ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponMagazined : CWeapon {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function set_schedule(ISheduled*, number, number);
    function start_fire();
    function visible_in_slot(number);
    function test_server_flag(number) const;
    function stop_fire();
    function start_fire2();
    function getEnabled() const;
    function stop_fire2();
    function use(CGameObject*);
};

C++ class CWeaponMagazinedWGrenade : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			gren_mag_size            (number);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponPM : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponPM ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponRG6 : CWeaponShotgun {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponRG6 ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function visible_in_slot(number);
    function start_fire();
    function test_server_flag(number) const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function getEnabled() const;
    function stop_fire2();
    function use(CGameObject*);
};

C++ class CWeaponRPG7 : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponRPG7 ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponSVD : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponSVD ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponSVU : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponSVU ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponShotgun : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponShotgun ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponUSP45 : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponUSP45 ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponVal : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponVal ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponVintorez : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponVintorez ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CWeaponWalther : CWeaponMagazined {
 property			ammo_charged;
 property			ammo_elapsed             (number);
 property			ammo_mag_size            (number);
 property			cam_dispersion           (number);
 property			cam_dispersion_inc       (number);
 property			cam_dispertion_frac      (number);
 property			cam_max_angle            (number);
 property			cam_max_angle_horz       (number);
 property			cam_relax_speed          (number);
 property			cam_relax_speed_ai       (number);
 property			cam_step_angle_horz      (number);
 property			class_id;
 property			class_name;
 property			condition_shot_dec       (number);
 property			const_deviation;
 property			cost                     (number);
 property			cur_fire_mode            (number);
 property			fire_dispersion_condition_factor(number);
 property			fire_mode;
 property			fire_modes               (object);
 property			grenade_launcher_x       (number);
 property			grenade_launcher_y       (number);
 property			inv_weight               (number);
 property			ironsight_zoom_factor    (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			misfire;
 property			misfire_condition_k      (number);
 property			misfire_probability      (number);
 property			next_state;
 property			quest_item               (boolean);
 property			queue_size               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			scope_attached;
 property			scope_dynamic_zoom       (boolean);
 property			scope_mode;
 property			scope_name;
 property			scope_x                  (number);
 property			scope_y                  (number);
 property			scope_zoom_factor        (number);
 property			se_object;
 property			shoot_effector_start     (number);
 property			shot_num;
 property			silencer_x               (number);
 property			silencer_y               (number);
 property			slot                     (number);
 property			slots                    (object);
 property			state;
 property			updated_times            (number);
 property			zoom_enabled             (boolean);
 property			zoom_factor              (number);
 property			zoom_mode;
 property			zoom_rotate_time         (number);
    
    CWeaponWalther ();
    
    function stop_shoothing();
    function _construct();
    function get_ammo_type(CWeapon*, number);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function get_fire_point2();
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function net_Export(net_packet&);
    function get_ammo_current(boolean) const;
    function Visual();
    function get_particles_xform();
    function net_Import(net_packet&);
    function get_fire_point();
    function is_ammo_compat(CWeapon*, string);
    function stop_fire2();
    function start_fire();
    function getEnabled() const;
    function set_schedule(ISheduled*, number, number);
    function stop_fire();
    function start_fire2();
    function test_server_flag(number) const;
    function visible_in_slot(number);
    function use(CGameObject*);
};

C++ class CZombie : CGameObject {
 property			class_id;
 property			class_name;
 property			item_flags               (number);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			updated_times            (number);
    
    CZombie ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function set_schedule(ISheduled*, number, number);
    function load_config(string);
    function getEnabled() const;
    function net_Export(net_packet&);
    function test_server_flag(number) const;
    function use(CGameObject*);
};

C++ class CZudaArtefact : CArtefact {
 property			additional_inventory_weight(number);
 property			additional_inventory_weight2(number);
 property			bleeding_restore_speed   (number);
 property			can_spawn_zone           (boolean);
 property			class_id;
 property			class_name;
 property			cost                     (number);
 property			health_restore_speed     (number);
 property			inv_weight               (number);
 property			item_condition           (number);
 property			item_flags               (number);
 property			item_name;
 property			item_name_short;
 property			item_place;
 property			power_restore_speed      (number);
 property			properties_enabled       (boolean);
 property			quest_item               (boolean);
 property			radiation_accum_factor   (number);
 property			radiation_accum_limit    (number);
 property			radiation_restore_speed  (number);
 property			satiety_restore_speed    (number);
 property			schedule_max;
 property			schedule_min;
 property			se_object;
 property			slot                     (number);
 property			slots                    (object);
 property			updated_times            (number);
    
    CZudaArtefact ();
    
    function Visual();
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function getEnabled() const;
    function visible_in_slot(number);
    function load_config(string);
    function set_visible_in_slot(number, boolean);
    function test_server_flag(number) const;
    function net_Export(net_packet&);
    function set_schedule(ISheduled*, number, number);
    function use(CGameObject*);
};

C++ class ClientID {
    ClientID ();
    
    function value() const;
    operator ==(threadClientID&, ClientID);
    function set(number);
};

C++ class DLL_Pure {
    DLL_Pure ();
    
    function _construct();
};

C++ class FS_Path {
 property			m_Add;
 property			m_DefExt;
 property			m_FilterCaption;
 property			m_Path;
 property			m_Root;
    
    function need_rescan(FS_Path*);
};

C++ class FS_file_list {
    function Free();
    function GetAt(number);
    function Size();
};

C++ class FS_file_list_ex {
    function Sort(number);
    function GetAt(number);
    function Size();
};

C++ class ICollidable {
    ICollidable ();
    
};

C++ class IInventoryBox {
    function empty() const;
    function object_count() const;
    function object(number);
    function object(string);
};

C++ class ipure_schedulable_object {
};

C++ class ipure_server_object : ipure_alife_load_save_object {
};

C++ class reader {
    function r_advance(number);
    function r_u64(unsigned __int64&);
    function r_u64();
    function r_bool(reader*);
    function r_dir(vector&);
    function r_u8(number&);
    function r_u8();
    function r_eof(reader*);
    function r_float_q8(number, number);
    function r_vec3(reader*, vector*);
    function r_stringZ(reader*);
    function r_u16(number&);
    function r_u16();
    function r_float_q16(number, number);
    function r_angle16();
    function r_s64(__int64&);
    function r_s64();
    function r_float(number&);
    function r_float();
    function r_s32(number&);
    function r_s32();
    function r_elapsed() const;
    function r_sdir(vector&);
    function r_tell() const;
    function r_s8(signed char&);
    function r_s8();
    function r_s16(number&);
    function r_s16();
    function r_seek(number);
    function r_u32(number&);
    function r_u32();
    function r_angle8();
};

C++ class IRender_Light {
    function set_color(const fcolor&);
    function get_active();
    function set_virtual_size(number);
    function set_angle(number);
    function get_range();
    function get_angle();
    function set_texture(string);
    function set_range(number);
    function get_color();
    function set_active(boolean);
    function get_virtual_size();
};

C++ class IRender_Visual {
    IRender_Visual ();
    
    function dcast_PKinematicsAnimated();
    function configure(IRender_Visual*, string, string);
    function get_texture_name();
    function child(IRender_Visual*, number);
    function set_shader_name(IRender_Visual*, string);
    function set_texture_name(IRender_Visual*, string);
    function dcast_PKinematics();
    function get_texture(IRender_Visual*, number);
    function get_shader_name();
};

C++ class IRenderable {
};

C++ class ISheduled {
 property			schedule_max;
 property			schedule_min;
 property			updated_times            (number);
    
    function set_schedule(ISheduled*, number, number);
};

C++ class net_packet {
 property			length;
    
    net_packet ();
    
    function r_advance(number);
    function r_begin(number&);
    function w_chunk_open16(number&);
    function r_u32(number&);
    function r_u32();
    function w_begin(number);
    function w_u32(number);
    function r_u8(number&);
    function r_u8();
    function r_eof(net_packet*);
    function w_chunk_open8(number&);
    function r_vec3(vector&);
    function w_u8(number);
    function r_u16(number&);
    function r_u16();
    function w_u24(number);
    function r_angle16(number&);
    function r_s64(__int64&);
    function r_s64();
    function w_tell();
    function r_elapsed();
    function r_tell();
    function r_clientID(net_packet*);
    function r_s16(number&);
    function r_s16();
    function r_matrix(matrix&);
    function r_time(CTime&);
    function w_clientID(ClientID&);
    function r_stringZ(net_packet*);
    function r_u64(unsigned __int64&);
    function r_u64();
    function w_sdir(const vector&);
    function r_sdir(vector&);
    function r_dir(vector&);
    function w_u16(number);
    function r_float_q8(number&, number, number);
    function w_time(const CTime&);
    function r_float_q16(number&, number, number);
    function w_matrix(matrix&);
    function r_bool(net_packet*);
    function w_float_q8(number, number, number);
    function w_s64(__int64);
    function r_u24(number&);
    function r_u24();
    function w_bool(net_packet*, boolean);
    function w_dir(const vector&);
    function w_s32(number);
    function w_stringZ(string);
    function w_float_q16(number, number, number);
    function r_s8(signed char&);
    function r_s8();
    function w_angle8(number);
    function r_float(number&);
    function r_float();
    function w_angle16(number);
    function r_s32(number&);
    function r_s32();
    function w_float(number);
    function w_s16(number);
    function r_seek(number);
    function w_chunk_close8(number);
    function w_vec3(const vector&);
    function w_chunk_close16(number);
    function w_u64(unsigned __int64);
    function r_angle8(number&);
};

C++ class SGameTaskObjective {
 property			def_ml_enabled           (boolean);
    
    SGameTaskObjective (CGameTask*, number);
    
    function set_article_key(string);
    function add_on_complete_func(string);
    function set_map_hint(string);
    function add_on_fail_info(string);
    function add_complete_func(string);
    function add_fail_func(string);
    function get_state();
    function set_icon_name(string);
    function add_complete_info(string);
    function add_on_complete_info(string);
    function set_description(string);
    function get_idx();
    function get_description();
    function add_on_fail_func(string);
    function set_map_location(string);
    function set_object_id(number);
    function set_article_id(string);
    function add_fail_info(string);
};

C++ class SServerFilters {
 property			empty                    (boolean);
 property			full                     (boolean);
 property			listen_servers           (boolean);
 property			with_battleye            (boolean);
 property			with_pass                (boolean);
 property			without_ff               (boolean);
 property			without_pass             (boolean);
    
    SServerFilters ();
    
};

C++ class UIGame_custom_script : CUIGameCustom {
    UIGame_custom_script ();
    
    function AddCustomMessage(string, number, number, number, CGameFont*, number, number);
    function AddCustomMessage(string, number, number, number, CGameFont*, number, number, number);
    function SetClGame(game_cl_GameState*);
    function Init();
    function AddCustomStatic(string, boolean);
    function RemoveCustomMessage(string);
    function AddDialogToRender(CUIWindow*);
    function GetCustomStatic(string);
    function RemoveDialogToRender(CUIWindow*);
    function CustomMessageOut(string, string, number);
    function RemoveCustomStatic(string);
};

C++ class game_GameState : DLL_Pure {
 property			round;
 property			start_time;
 property			type                     (number);
    
    game_GameState ();
    
    function Type() const;
    function _construct();
    function Phase() const;
    function Round() const;
    function StartTime() const;
};

C++ class game_cl_GameState : game_GameState {
 property			local_player             (game_PlayerState*);
 property			local_svdpnid            (ClientID);
 property			round;
 property			start_time;
 property			type                     (number);
    
    function Type() const;
    function _construct();
    function Phase() const;
    function Round() const;
    function StartTime() const;
};

C++ class game_cl_mp : game_cl_GameState {
 property			local_player             (game_PlayerState*);
 property			local_svdpnid            (ClientID);
 property			round;
 property			start_time;
 property			type                     (number);
    
    function Type() const;
    function _construct();
    function Phase() const;
    function Round() const;
    function StartTime() const;
};

C++ class game_cl_mp_script : game_cl_mp {
 property			local_player             (game_PlayerState*);
 property			local_svdpnid            (ClientID);
 property			round;
 property			start_time;
 property			type                     (number);
    
    game_cl_mp_script ();
    
    function _construct();
    function EventSend(net_packet*);
    function shedule_Update(number);
    function GetPlayerByOrderID(number);
    function OnKeyboardRelease(number);
    function createGameUI();
    function GameEventGen(net_packet*, number);
    function GetLocalPlayer();
    function CommonMessageOut(string);
    function Round() const;
    function GetRoundTime();
    function OnKeyboardPress(number);
    function EventGen(net_packet*, number, number);
    function Type() const;
    function GetObjectByGameID(number);
    function Init();
    function Phase() const;
    function TranslateGameMessage(number, net_packet&);
    function FillMapEntities(class xr_vector<struct SZoneMapEntityData,class xalloc<struct SZoneMapEntityData> >&);
    function GetClientIDByOrderID(number);
    function net_import_state(net_packet&);
    function StartMenu(CUIDialogWnd*, boolean);
    function StopMenu(CUIDialogWnd*, boolean);
    function CanBeReady();
    function GetPlayersCount() const;
    function StartStopMenu(CUIDialogWnd*, boolean);
    function createPlayerState();
    function StartTime() const;
};

C++ class game_sv_Deathmatch : game_sv_GameState {
 property			round;
 property			start_time;
 property			type                     (number);
    
    game_sv_Deathmatch ();
    
    function get_id(ClientID);
    function _construct();
    function get_id_2_eid(ClientID);
    function GetTeamData(number);
    function getRPcount(number);
    function get_players_count();
    function get_it_2_id(number);
    function Round() const;
    function Type() const;
    function get_player_name_id(ClientID);
    function Phase() const;
    function type_name() const;
    function getRP(number, number);
    function StartTime() const;
    function get_name_it(number);
    function get_option_s(string, string, string);
    function get_name_id(ClientID);
    function get_eid(number);
    function u_EventSend(net_packet&, number);
    function get_it(number);
    function GenerateGameMessage(net_packet&);
    function get_option_i(string, string, number);
};

C++ class game_sv_GameState : game_GameState {
 property			round;
 property			start_time;
 property			type                     (number);
    
    function get_id(ClientID);
    function _construct();
    function get_id_2_eid(ClientID);
    function getRPcount(number);
    function get_players_count();
    function get_it_2_id(number);
    function Round() const;
    function Type() const;
    function get_player_name_id(ClientID);
    function Phase() const;
    function get_option_i(string, string, number);
    function getRP(number, number);
    function get_name_it(number);
    function get_option_s(string, string, string);
    function get_name_id(ClientID);
    function get_eid(number);
    function GenerateGameMessage(net_packet&);
    function get_it(number);
    function u_EventSend(net_packet&, number);
    function StartTime() const;
};

C++ class game_sv_mp : game_sv_GameState {
 property			round;
 property			start_time;
 property			type                     (number);
    
    game_sv_mp ();
    
    function get_id(ClientID);
    function _construct();
    function get_id_2_eid(ClientID);
    function KillPlayer(ClientID, number);
    function getRPcount(number);
    function get_players_count();
    function get_it_2_id(number);
    function Round() const;
    function SpawnWeaponForActor(number, string, boolean, boolean, boolean);
    function Type() const;
    function get_player_name_id(ClientID);
    function signal_Syncronize();
    function Phase() const;
    function SendPlayerKilledMessage(number, enum KILL_TYPE, number, number, enum SPECIAL_KILL_TYPE);
    function getRP(number, number);
    function StartTime() const;
    function get_name_it(number);
    function get_option_s(string, string, string);
    function get_name_id(ClientID);
    function get_eid(number);
    function u_EventSend(net_packet&, number);
    function get_it(number);
    function GenerateGameMessage(net_packet&);
    function get_option_i(string, string, number);
};

C++ class game_sv_mp_script : game_sv_mp {
 property			round;
 property			start_time;
 property			type                     (number);
    
    game_sv_mp_script ();
    
    function get_id(ClientID);
    function _construct();
    function switch_Phase(number);
    function getRPcount(number);
    function get_players_count();
    function get_it_2_id(number);
    function SpawnPlayer(ClientID, string, string, RPoint);
    function Type() const;
    function get_player_name_id(ClientID);
    function Phase() const;
    function OnPlayerHitPlayer(number, number, net_packet&);
    function Create(string);
    function get_name_it(number);
    function SendPlayerKilledMessage(number, enum KILL_TYPE, number, number, enum SPECIAL_KILL_TYPE);
    function get_eid(number);
    function net_Export_State(net_packet&, ClientID);
    function get_it(number);
    function createPlayerState();
    function u_EventSend(net_packet&, number);
    function KillPlayer(ClientID, number);
    function Update();
    function GetTeamData(number);
    function GetHitParamsPower(net_packet*);
    function GenerateGameMessage(net_packet&);
    function signal_Syncronize();
    function StartTime() const;
    function SpawnWeaponForActor(number, string, boolean, boolean, boolean);
    function OnRoundEnd();
    function SetHitParams(net_packet*, number, number);
    function getRP(number, number);
    function OnEvent(net_packet&, number, number, ClientID);
    function OnRoundStart();
    function get_option_s(string, string, string);
    function get_name_id(ClientID);
    function GetHitParamsImpulse(net_packet*);
    function type_name() const;
    function get_id_2_eid(ClientID);
    function Round() const;
    function get_option_i(string, string, number);
};

C++ class CTime {
    const DateToDay = 0;
    const DateToMonth = 1;
    const DateToYear = 2;
    const TimeToHours = 0;
    const TimeToMilisecs = 3;
    const TimeToMinutes = 1;
    const TimeToSeconds = 2;
    
    CTime ();
    CTime (const CTime&);
    
    operator ==(threadconst CTime&, CTime);
    function setHMSms(number, number, number, number);
    function updHMS(number, number, number);
    function timeToString(number);
    operator <=(threadconst CTime&, CTime);
    function sub(CTime*);
    function updHMSms(number, number, number, number);
    function dateToString(number);
    function get(number&, number&, number&, number&, number&, number&, number&);
    function set(number, number, number, number, number, number, number);
    operator >=(threadconst CTime&, CTime);
    function diffSec(CTime*);
    operator <(threadconst CTime&, CTime);
    function setHMS(number, number, number);
    operator >(threadconst CTime&, CTime);
    operator +(threadCTime&, CTime);
    operator -(threadCTime&, CTime);
    function add(CTime*);
};

End of list of the classes exported to LUA


List of the namespaces exported to LUA


 namespace  {
     function game_ini();
     function vars_table_dump(lua_State*);
     function get_object_info(lua_State*);
     function fatal_error(string);
     function alife();
     function get_stored_vars(lua_State*);
     function GetFontGraffiti32Russian();
     function texture_find(string);
     function device();
     function vars_table_import(lua_State*);
     function IsGameTypeSingle();
     function GetTextureInfo(string, string);
     function bit_not(number);
     function texture_get_name(CTexture*);
     function prefetch(threadstring);
     function get_global_fov(number);
     function dik_to_bind(number);
     function render_get_dx_level();
     function GetFontGraffiti19Russian();
     function engine_object(lua_State*);
     function editor();
     function cast_ptr_CTexture(lua_State*);
     function sell_condition(CScriptIniFile*, string);
     function sell_condition(number, number);
     function buy_condition(CScriptIniFile*, string);
     function buy_condition(number, number);
     function find_effector_zi();
     function create_ini_file(string);
     function get_application();
     function xrRender_test_r2_hw();
     function get_hud();
     function GetFontSmall();
     function error_log(string);
     function GetFontLetterica18Russian();
     function last_dialog_dstr();
     function command_line();
     function get_actor_obj();
     function get_hud_fov(number);
     function getFS();
     function valid_saved_game(string);
     function get_console();
     function GetFontGraffiti50Russian();
     function app_ready();
     function texture_to_visual(IRender_Visual*, string);
     function script_server_object_version();
     function GetTextureName(string);
     function ef_storage();
     function texture_delete(CTexture*);
     function GetFontDI();
     function GetFontLetterica16Russian();
     function log(string);
     function object_by_id(lua_State*);
     function system_ini();
     function show_condition(CScriptIniFile*, string);
     function get_main_window();
     function ini_file(string);
     function texture_to_object(game_object*, number, string);
     function bit_xor(number, number);
     function get_resource_manager();
     function switch_zoom_osc(boolean);
     function cse_get_restrictor_type(cse_alife_dynamic_object*);
     function texture_unload(CTexture*);
     function setup_game_icon(number, number, number, number);
     function bind_to_dik(enum EGameActions);
     function GetFontLetterica25();
     function log1(string);
     function script_object_class_name(lua_State*);
     function user_name();
     function vars_table_assign(lua_State*);
     function GetFontMedium();
     function texture_from_object(game_object*, number, number);
     function set_hud_fov(number);
     function reset_interactive(number);
     function flush();
     function texture_create(string);
     function vars_table_create(lua_State*);
     function get_torch_obj(game_object*);
     function GetFontGraffiti22Russian();
     function set_global_fov(number);
     function vars_table_export(lua_State*);
     function texture_set_name(CTexture*, string);
     function texture_from_visual(IRender_Visual*, number);
     function game_graph();
     function actor_camera(number);
     function time_global();
     function verify_if_thread_is_running();
     function GetARGB(number, number, number, number);
     function GetTextureRect(string);
     function texture_load(CTexture*);
WARNING: incomplete list of the namespaces exported to LUA

