----------------------------------------------------------------------------------------------------------------------
--'	Схема помощи раненым
--'	автор: Диденко Руслан (Stohe)
--'	AI Additions
--'	Rulix aka Bak
----------------------------------------------------------------------------------------------------------------------
local hw_ini = ini_file([[misc\rx_help_wounded.ltx]])
ASSERTX(hw_ini:section_exist("main"),"no hw_ini")
local excluded_npcs = rx_utils.collect_sections(hw_ini,{"excluded_npcs"})
local excluded_communities = rx_utils.parse_list(hw_ini,"main","excluded_communities",true)
local forbidden_patients = rx_utils.collect_sections(hw_ini,{"forbidden_patients"})
local help_distance = rx_utils.read_from_ini(hw_ini,'main',"help_distance")^2
local help_distance_story = rx_utils.read_from_ini(hw_ini,'main',"help_distance_story")^2

----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------
class "evaluator_wounded_exist" (property_evaluator)
function evaluator_wounded_exist:__init(name, storage, npc) super (nil, name)
	self.a = storage
	self.a.dtimer = 0
end
function evaluator_wounded_exist:evaluate()
	local npc = self.object
	if not npc:alive() or self.a.help_wounded_enabled == false or xr_wounded.is_wounded(npc) then
		self.a.active = nil
		return false
	end
	if npc:best_enemy() and not xr_wounded.is_wounded(npc:best_enemy()) then
		self.a.active = nil
		return false
	end
	local npc_id = npc:id()
	if self.a.active and self.a.selected_id then
		local patient = level.object_by_id(self.a.selected_id)
		if patient and patient:alive() and xr_wounded.is_wounded(patient) and (db.storage[self.a.selected_id].wounded_already_selected == nil or db.storage[self.a.selected_id].wounded_already_selected == npc_id) and db.storage[self.a.selected_id].wounded_processor == nil then
			if patient:position():distance_to_sqr(self.a.vertex_position) > 20 then
				self.a.active = nil
				return false
			end
			return true
		else
			self.a.active = nil
			return false
		end
	end
	local tg = time_global()
	if self.a.dtimer > tg then
		return false
	end
	self.a.dtimer = tg+math.random(3000,6000)
	local nearest_dist = rx_utils.is_story_object(npc) and help_distance_story or help_distance
	local nearest_vertex
	local nearest_position
	local selected_id
	local npc_position = npc:position()
	for v in npc:memory_sound_objects() do
		local vo = v:object()
		if vo:alive() and IsStalker(vo) and xr_wounded.is_wounded(vo) and npc:relation(vo) ~= game_object.enemy then
			local id = vo:id()
			if db.storage[id].wounded_already_selected == nil and not forbidden_patients[vo:name()] and db.storage[id].wounded_processor == nil then
				local vo_position = vo:position()
				local dist = npc_position:distance_to_sqr(vo_position)
				if npc:relation(vo) == game_object.friend then
					dist = dist/2
				end
				if dist < nearest_dist then
					local vertex = vo:level_vertex_id() --level.vertex_id(vo_position)
					if npc:accessible(vertex) and level.vertex_position(vertex):distance_to_sqr(vo_position) <= 20 then
						nearest_dist = dist
						nearest_vertex = vertex
						nearest_position = level.vertex_position(vertex)
						selected_id = id
					end
				end
			end
		end
	end
	if nearest_vertex ~= nil then
		self.a.vertex_id = nearest_vertex
		self.a.vertex_position = nearest_position
		self.a.selected_id = selected_id
		self.a.active = true
		return true
	end
	return false
end


----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
class "action_help_wounded" (action_base)
function action_help_wounded:__init (npc_name,action_name, storage) super (nil, action_name)
	self.a = storage
end
function action_help_wounded:initialize()
	action_base.initialize(self)
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_path_type(game_object.level_path)
	npc:set_dest_level_vertex_id(self.a.vertex_id)
	local danger = npc:best_enemy() or db.storage[npc:id()].danger_flag
	if danger then
		state_mgr.set_state(npc,"rush")
	else
		local patient = level.object_by_id(self.a.selected_id)
		if (patient and npc:relation(patient) == game_object.friend) or npc:position():distance_to(self.a.vertex_position) > 15 then
			state_mgr.set_state(npc,"run")
		else
			state_mgr.set_state(npc,"walk")
		end
	end
	db.storage[self.a.selected_id].wounded_already_selected = npc:id()
	self.timer = time_global()+60000
end
function action_help_wounded:execute()
	action_base.execute(self)
	local npc = self.object
	if self.timer < time_global() then
		help_wounded(npc) -- fix
		return
	end
	if npc:position():distance_to(self.a.vertex_position) < 1.3 then
		rx_sound.set_sound_play(npc:id(),"wounded_medkit")
		local look_pos = self.a.vertex_position
		local patient = level.object_by_id(self.a.selected_id)
		if patient then
			look_pos = patient:bone_position("bip01_spine")
		end
		state_mgr.set_state(npc,"help_wounded",nil,nil,{look_position = look_pos})
		npc:set_movement_type(move.stand)
	else
		if state_mgr.get_state(npc) == "help_wounded" then
			state_mgr.set_state(npc,"rush",nil,nil,nil,{animation = true})
		end
		npc:set_dest_level_vertex_id(self.a.vertex_id)
	end
end
function action_help_wounded:finalize()
	action_base.finalize(self)
	if db.storage[self.a.selected_id] then
		db.storage[self.a.selected_id].wounded_already_selected = nil
	end
	self.a.selected_id = nil
	self.a.active = nil
	self.object:set_movement_type(move.walk)
	self.object:movement_enabled(true)
	state_mgr.set_state(self.object,"idle",nil,nil,nil,{animation = true})
end

function help_wounded(npc)
	local id = npc:id()
	db.storage[id].help_wounded.active = nil
	db.storage[id].help_wounded.dtimer = time_global()+2000
	local selected_id = db.storage[id].help_wounded.selected_id
	if not selected_id then
		return
	end
	local selected_npc = level.object_by_id(selected_id)
	if not (selected_npc and selected_npc:alive()) then
		return
	end
	local medlist = rx_bandage and rx_bandage.bandage_sets.medkits or {"medkit","medkit_army","medkit_scientic"}
	local medkit
	-- ищем аптечку у пациента
	for k,v in ipairs(medlist) do
		medkit = selected_npc:object(v)
		if medkit then
			break
		end
	end
	-- ищем аптечку у лекаря
	if not medkit then
		for k,v in ipairs(medlist) do
			medkit = npc:object(v)
			if medkit then
				npc:transfer_item(medkit,selected_npc)
				break
			end
		end
	end
	-- создаём новую аптечку
	if not medkit then
		local sec = "medkit"
		local bst = db.storage[selected_id].bandage
		if bst then
			sec = medlist[rx_bandage.bandage_sets.spawn_rnd and math.random(#medlist) or 1]
			if bst.spawn_time_m then
				bst.spawn_time_m = time_global()+rx_bandage.bandage_sets.spawn_mt
			end
		end
		alife():create(sec,selected_npc:position(),selected_npc:level_vertex_id(),selected_npc:game_vertex_id(),selected_id)
	end
	xr_wounded.unlock_medkit(selected_npc)
	rx_sound.set_sound_play(selected_id,"help_thanks")
	npc:set_character_rank(npc:character_rank()+20)
	npc:change_character_reputation(10)
end

----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
evid_wounded_exist = 17713
actid_wounded_exist = evid_wounded_exist

--rx_ai.no_talk_actions[actid_wounded_exist] = true
--rx_ai.death_disable_evas[evid_wounded_exist] = false

function add_to_binder(npc, char_ini, scheme, section, st)
	local manager = npc:motivation_action_manager()

	-- Evaluators
	if excluded_communities[npc:character_community()] or excluded_npcs[npc:name()] or excluded_npcs[npc:profile_name()] or not npc:alive() then
		manager:add_evaluator (evid_wounded_exist,property_evaluator_const(false))
		return
	end
	manager:add_evaluator (evid_wounded_exist, 		evaluator_wounded_exist("wounded_exist", st))

	-- Actions
	local action = action_help_wounded (npc:name(),"action_help_wounded", st)
	action:add_precondition		(world_property(stalker_ids.property_alive, true))
--	action:add_precondition		(world_property(stalker_ids.property_enemy,	false))
--	action:add_precondition		(world_property(stalker_ids.property_danger,false))
--	action:add_precondition		(world_property(stalker_ids.property_anomaly,false))
	action:add_precondition		(world_property(xr_evaluators_id.sidor_wounded_base, false))
	action:add_precondition		(world_property(evid_wounded_exist,	true))
	action:add_effect (world_property(evid_wounded_exist, 			false))
	manager:add_action (actid_wounded_exist, action)

	action = manager:action (xr_actions_id.alife)
	action:add_precondition		(world_property(evid_wounded_exist,		false))

--	action = manager:action (xr_actions_id.state_mgr + 2)
--	action:add_precondition		(world_property(evid_wounded_exist,		false))

--	action = manager:action (xr_actions_id.state_mgr + 1)
--	action:add_precondition		(world_property(evid_wounded_exist,		false))	--????

	action = manager:action (stalker_ids.action_danger_planner)
	action:add_precondition		(world_property(evid_wounded_exist,		false))

	action = manager:action (stalker_ids.action_combat_planner)
	action:add_precondition		(world_property(evid_wounded_exist,		false))
	
	action = manager:action (xr_actions_id.stohe_meet_base+1)
	action:add_precondition		(world_property(evid_wounded_exist,		false))
end

function set_help_wounded(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.help_wounded_enabled = true
end

function reset_help_wounded(npc, scheme, st, section)
	st.help_wounded.help_wounded_enabled = utils.cfg_get_bool(st.ini, section, "help_wounded_enabled", npc, false, true)
end

function is_under_help_wounded(npc)
	local mgr = npc:motivation_action_manager()
	return mgr:initialized() and mgr:current_action_id() == actid_wounded_exist
end
