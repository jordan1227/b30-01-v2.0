-----------------------------------------------------------------------------------
-- Monster binding
-----------------------------------------------------------------------------------
dog_shield            = 1
count_spawns          = 0
local particles       = {}
local mask_k          = 1
local bal_tbl         = { "af_baloon", "af_baloon_dyn4d", "af_baloon_dyn5d" }
local game_difficulty = tonumber( level.get_game_difficulty() )
local DogNum, BurerNum
local DogTimer, BurerTimer, GigantTimer = 0, 0, 0
local psevda_snd = nil

function bind( obj )
    local new_binder = generic_object_binder( obj )
    obj:bind_object( new_binder )
end

----------------------------------------------------------------------------------

class "generic_object_binder"( object_binder )

function generic_object_binder:__init( obj ) super( obj )
	self.loaded      = false
	self.chtime      = 0
	self.last_update = 0
	self.upd_count   = 0
	self.particles   = {}
	self.last_pos    = vector()
	self.move_events = 0
	--------- added by DSH for  OGSE Signal Manager -----
	self.am = ogse_signals.get_mgr()
	self.am:call( "on_monster_init", obj, self )
	-------------------------------------------------	
end 

function bind( obj )
	local new_binder = generic_object_binder( obj )
	obj:bind_object( new_binder )
end

function generic_object_binder:reload( section )
    object_binder.reload( self, section )
end

function generic_object_binder:reinit()
    object_binder.reinit( self )
    if self.object:clsid() ~= CLID_TRADER then
        self.object:set_patrol_extrapolate_callback(
            generic_object_binder.extrapolate_callback, self
        )
    end
    db.storage[ self.object:id() ] = {}
    self.st = db.storage[ self.object:id() ]
    self.object:set_callback( callback.patrol_path_in_point, self.waypoint_callback, self )
    self.object:set_callback( callback.hit,                  self.hit_callback,      self )
    self.object:set_callback( callback.death,                self.death_callback,    self )
    self.object:set_callback( callback.use_object,           self.use_callback,      self )
end

prevent_gulag_registration_for_id = 0
local step, step2 = 1, 1

function generic_object_binder:on_move( dist )
    self.move_events = self.move_events + 1
    if ( dist > 0.1 ) and ( self.object:alive() ) then -- обработка перемещения живых мобов
        -- self:anomaly_evade()
        local obj = engine_object( self.object:id() )
        if obj then
            obj:set_schedule( 50, 200 ) -- чтобы почаще обновлялся
        end
    end
end

function generic_object_binder:update( delta )
    object_binder.update( self, delta )
    local classid = self.object:clsid()
    local sfobj   = self.object
    local sfpos   = sfobj:position()
    local actor   = db.actor
    if nil == actor then abort( " db.actor == nil" ) end
	-- added for OGES Anomaly Evader --------------
	self.am:call( "on_monster_update", self.object, delta )
	self.am:call( "on_monster_update." .. self.object:id(), self.object, delta )
	-----------------------------------------------	
    local dist_to_actor = actor:position():distance_to( sfpos )
    local dist          = sfpos:distance_to( self.last_pos )
    if vergas_masks.get_flag_mask() then mask_k = 0.6 end
    if math.abs( dist ) > 0.05 then  -- оптимизация обработки перемещений
        self:on_move( dist )
        self.last_pos:set( sfpos )
    end
    if
        dist_to_actor < 10
        and bind_stalker.binder_loops < 100
        and not sfobj:is_stalker()
	    and sfobj:section() ~= "m_trader" 
    then
        wprintf(
            "[~T].~C0C #WARN:~C07 на переходе застрял монстр ~C0A %s~C07 - отправляется в оффлайн",
            sfobj:name()
        )
        misc.force_offline( sfobj:id() )
    end
    if
        particles[ sfobj:id() ]
        and table.getn( particles[ sfobj:id() ] ) > 0
    then
        for kk, vv in pairs( particles[ sfobj:id() ] ) do
            table.insert( self.particles, amk_particle.amk_particle( vv ) )
            --table.remove(particles[sfobj:id()],kk)
            particles[ sfobj:id() ][ kk ] = nil
        end
    end
    if table.getn( self.particles ) > 0 then
        for kk, vv in pairs( self.particles ) do
            if vv:is_finished() then
                self.particles[ kk ] = nil
            else
                vv:update( delta )
                if vv.give_dmg and vv.target then
                    if vv:get_pos():distance_to( vv.target:bone_position( "bip01_spine" ) ) < 1 then
                        local h     = hit()
                        h.impulse   = 0
                        h.draftsman = vv.target
                        h.direction = vv.dir
                        h:bone( "bip01_spine" )
                        h.power     = lua_random( 10, 50 ) / 100
                        h.type      = hit.strike
                        vv.target:hit( h )
                        h.power     = lua_random( 10, 50 ) / 100
                        h.type      = hit.chemical_burn
                        vv.target:hit( h )
                        vv:stop()
                    end
                end
            end
        end
    end
    if classid == CLID_TRADER then trade_manager.update( sfobj ) end
    if sfobj:alive() then
        if sfobj:is_talk_enabled() then
            sfobj:set_tip_text( "character_use" )
        else
            sfobj:set_tip_text( "" )
        end
    else -- dead body usage
        local disable = true
        if actor:active_slot() == 0 then
            local sc = actor:item_in_slot( 0 ):section()
            if strpos( sc, "knife" ) then disable = false end
        end
        if disable then
            sfobj:set_tip_text( "knife_need" )
        else
            if  sfobj:object_count() == 0 then
                sfobj:set_tip_text( "badly_damaged" )
            else
                sfobj:set_tip_text( "cut_off_part" )
            end
        end
        --sfobj:set_tip_text_default()
    end
    --local act_scheme = db.storage[ sfobj:id() ].active_section or ""
    --local is_fake    = string.find( act_scheme, "mob_fake_death", 1, true ) or false
    if balance.monsters == nil then balance.load_config() end
    local bconf = balance.monsters -- table balance configuration
    if bconf == nil then return end
    ---------------------------------  ТУШКАН  ----------------------------------
    if classid == CLID_TUSHKANO and sfobj:alive() then
        local posit = sfobj:position()
        local enemy = sfobj:best_enemy()
        if not enemy then return end
        local posit = posit:distance_to( enemy:position() )
        if posit < bconf.tushkano_dist_attack and sfobj:see( enemy ) then
            if
                lua_random() < 0.22
                and not string.find( sfobj:section(), "rat_", 1, true )
                and not string.find( sfobj:section(), "electro_", 1, true )
            then
                local h     = hit()
                h.type      = hit.chemical_burn
                h.direction = vector():set( 0, 0, 0 )
                h.power     = 0.03 + ( 0.012 * game_difficulty )
                h.impulse   = 0
                h.draftsman = enemy
                enemy:hit( h )
            end
        end
    end
    ---------------------------------  ПОЛТЕР  ----------------------------------
    if classid == CLID_POLTERGEIST and sfobj:alive() then
        local posit = sfobj:position()
        local enemy = sfobj:best_enemy()
        if
            enemy
            and posit:distance_to( enemy:position() ) < 10       -- было 3м
            and sfobj:see( enemy )
        then
            if not strposx( sfobj:section(), "flame" ) then
                charge_tushkano( sfobj )    -- разряд, как от электротушканчика
                test.fuckup_gg_batteries()  -- уничтожение батареек в рюкзаке
                local aaa = lua_random( 1, 100 ) / 100
                -- шанс поломки ПДА при каждом разряде 2%, только если целый ПДА
                if aaa <= 0.02 and not actor:has_info( "pda_is_broken" ) then
                    -- если нет "изолятора" на поясе
                    if not (
                        sak.arts_operate == true
                        and sak_inventory.belt_items[ "af_dummy_dummy_new" ]
                    ) then
                        if not actor:has_info( "pda_will_be_broken" ) then
                            actor:give_info_portion( "pda_will_be_broken" )
                            nlc_vars.who_broke_pda = nil
                            nlc_vars.who_broke_pda = {
                                "Полтергейст",
                                game.translate_string( level.name() ),
                                "шанс: ".. tostring( aaa )
                            }
                        end
                    end
                end
            end
        end
    end
    ----------------------------  Пузырёк от собак  ------------------------------
    if classid == CLID_DOG and sfobj:alive() and sfobj.health > 0.05 then
        local npc = sfobj:get_enemy()
        if npc and npc:id() == actor:id() then
            if sfobj:see( npc ) then
                if
                    art_is_active( "af_dummy_fire" )
                    and dist_to_actor < bconf.dog_dist_panic
                then
                    sfobj:set_custom_panic_threshold( 1 )
                else
                    sfobj:set_custom_panic_threshold( 0.1 )
                end
            end
        end
    end
    -----------------------------  Баллончик от крова  ------------------------------
    if classid == CLID_BLOODSUCKER and sfobj:alive() and sfobj.health > 0.05 then
        local npc           = sfobj:get_enemy()
        local active_baloon = baloon_on_belt()
        if npc and npc:id() == actor:id() then
            if sfobj:see( npc ) then
                if
                    sak.arts_operate == true
                    and active_baloon ~= "none"
                    and npc:see( sfobj )
                    and dist_to_actor < 8
                then
                    sfobj:set_custom_panic_threshold( 1 )
                    arc_arts.discharge_art_on_belt( active_baloon, 0.001 )
                else
                    sfobj:set_custom_panic_threshold( 0 )
                end
            end
        end
    end
    ------------------------------  ПСЕВДОСОБАКА  -------------------------------
    if classid == CLID_PSEUDODOG and sfobj:alive() and sfobj.health > 0.05 then
        local npc = sfobj:get_enemy()
        if npc and npc:id() == actor:id() then
            -- пусть пузырёк пугает и псевдособак тоже
            if
                art_is_active( "af_dummy_fire" )
                and dist_to_actor < bconf.dog_dist_panic
            then
                sfobj:set_custom_panic_threshold( 1 )
            else
                sfobj:set_custom_panic_threshold( 0.1 )
            end
            -- вероятность сбивания прицела 40%, в случае если ГГ целит конкретно в эту собаку
            if
                sfobj:see( npc )
                and lua_random() < bconf.psevdodog_divert_prob
                and wpn_params.get_zie_obj()
                and actor:see( sfobj )
                and not nlc_vars.vodka_psi_block     -- если бахнул водки, то не сбивает прицел!!
            then
                level.add_pp_effector( "zevok.ppe", 2021, false )
                local dir    = device().cam_dir
                local coor_x = dir.x - ( ( 0.5 - lua_random() ) / 5 )
                local coor_y = dir.y - ( ( 0.5 - lua_random() ) / 7 )
                local coor_z = dir.z - ( ( 0.5 - lua_random() ) / 5 )
                params.set_direction( coor_x, coor_y, coor_z )
                return
            end
            -- Атака псевдособаки из билда 1935 (Автор: Charsi)
            if DogTimer < time_global() then
                local v1, v2 = sfobj:direction(), actor:direction()
                if
                    ( v1.x * v2.x ) + ( v1.z * v2.z ) < -0.6
                    and sfobj:see( actor )
                    and sfobj:position():distance_to( actor:position() ) < 20
					and lua_random() < 0.5
                then
                    DogNum = 1
                    level.add_cam_effector( "camera_effects\\pseudodog_effect.anm", 396, false, "" )
                    level.add_pp_effector ( "psy_antenna.ppe", 395, false )
                    --level.add_pp_effector ( "duality_circle.ppe", 397, false )
                    local h     = hit()
                    h.draftsman = sfobj
                    h.type      = hit.telepatic
                    h:bone( "bip01_spine" )
                    h.direction = vector():set( 0, 0, 0 )
                    h.power     = ( 0.015 + 0.01 * sak.dog_psy ) * mask_k
                    if nlc_vars.vodka_psi_block then h.power = h.power * 0.3 end -- если бахнул водки, то половина пси-удара
                    h.impulse   = 0.0
                    actor:hit( h )
                    local rnd_s = lua_random( 1, 8 )
                    if psevda_snd and psevda_snd:playing() then psevda_snd:stop() end
                    psevda_snd = xr_sound.get_safe_sound_object(
                        "ambient\\katakomb\\ambient_katakomb_" .. rnd_s,
                        sound_object.s2d ):play_at_pos( actor, actor:position()
                    )
                    if not string.find( sfobj:section(), "_weak", 1, true ) then
                        panic_item_drop( 0.09 )
                    end
                    DogTimer = time_global() + 3000 * ( 1 + math.random( -0.2, 0.2 ) ) + 700
                end
            elseif DogNum and DogTimer < time_global() + 3000 then
                level.remove_pp_effector( 395 )
                DogNum = nil
            end
        end
    end
    ---------------------------------  БЮРЕР  ----------------------------------
    -- Атака бюрера из Зова Припяти (Авторы: Shadows and Charsi)
    if classid == CLID_BURER and BurerTimer < time_global() then
        local attack_dist = 40
        local dist        = sfobj:position():distance_to( actor:position() )
        if dist > attack_dist  then return end
        if sfobj.health < 0.05 then return end
        local oTarget = sfobj:get_enemy()
        if
            not ( oTarget and oTarget:id() == actor:id() and sfobj:see( oTarget ))
        then
            return
        end
        local v1, v2   = sfobj:direction(), actor:direction()
        local bur_chns = 0.433
        if nlc_vars.vodka_psi_block then bur_chns = bur_chns * 0.3 end  -- если бахнул водки, то половина шанса
        if ( v1.x * v2.x ) + ( v1.z * v2.z ) < -0.6 then
            if lua_random() < bur_chns then actor.power = -1.0 end
            panic_item_drop( bur_chns )
            BurerNum   = 1
            BurerTimer = time_global() + 6000 * ( 1 + math.random( -0.2, 0.2 ) )
        end
    elseif BurerNum and BurerTimer < time_global() + 6000 then
        BurerNum = nil
    end
    ---------------------------------  КАБАН  ----------------------------------
    if classid == CLID_BOAR then
        if step == 1 then
            if actor and dist_to_actor < bconf.boar_radiation_dist then
                local snd_rand = lua_random( 1, 4 )
                sak.snd_rand_geiger( snd_rand )
                local h     = hit()
                h.type      = hit.radiation
                h.power     = 0.0003 + ( 0.0002 * game_difficulty ) + 0.008 * ( sak.dog_psy )
                h.impulse   = 0.0
                h:bone( "bip_none" )
                h.draftsman = sfobj
                h.direction = sfobj:direction()
                actor:hit(h)
            end
            step = 2
        else
            step = 1
        end
        return
    end
    ---------------------------------  ГИГАНТ  ---------------------------------
    if classid == CLID_GIGANT then
        if step2 == 1 then
            if  actor
                and dist_to_actor < 60
                and sfobj:alive()
                --and vergas_masks.get_flag_mask()
                and time_global() > GigantTimer + 6000
            then
                -- if lua_random() < 0.2 then actor.power = -1.0 end
                panic_item_drop()
                GigantTimer = time_global()
            end
            if actor and dist_to_actor < bconf.gigant_radiation_dist and level.name() ~= "l04u_labx18" then
                local snd_rand = lua_random( 1, 4 )
                sak.snd_rand_geiger( snd_rand )
                local h     = hit()
                h.type      = hit.radiation
                h.power     = 0.002 + ( 0.003 * game_difficulty ) + 0.008 * ( sak.dog_psy )
                h.impulse   = 0.0
                h:bone( "bip_none" )
                h.draftsman = sfobj
                h.direction = sfobj:direction()
                actor:hit( h )
            end
            step2 = 2
        else
            step2 = 1
        end
        return
    end
    ----------------------  ЗВЕРУШКИ ПОД ВЫБРОСОМ  ------------------------
    local blowout = amk_vars.blowout or 0
    if blowout == 3 and ( not self.control_override ) then
        if not sfobj:action() then
            xr_logic.mob_capture( sfobj, true )
            self.control_override = true
        end
    elseif self.control_override and blowout == 3 then
        if not sfobj:action() then
            local snds = { sound.take_damage, sound.panic, sound.idle }
            local  snd = snds[ lua_random( 1, table.getn( snds ) ) ]
            action( sfobj, anim( anim.lie_idle, 0 ), sound( snd ), cond( cond.sound_end ) )
        end
    elseif self.control_override and blowout ~= 3 then
        self.control_override = nil
        xr_logic.mob_release( sfobj )
    elseif self.st.active_section ~= nil then
        xr_logic.issue_event( sfobj, self.st[ self.st.active_scheme ], "update", delta )
    end
    ---------------------  АПДЕЙТ НА ПОЛТОРЫ СЕКУНДЫ?  ---------------------
    if self.chtime < time_global() then
        self.chtime = time_global() + 1513
        ------------------------  СОБАКА-ПСИ-АТАКА  --------------------------
        if classid == CLID_DOG and sfobj:alive() and sfobj.health > 0.05 then
            local npc = sfobj:get_enemy()
            if npc and npc:id() == actor:id() then
                if sfobj:see( npc ) then
                    if lua_random() < sak.dog_psy and dist_to_actor < bconf.dog_dist_attack then
                        level.add_pp_effector( "radiation.ppe", 2012, false )
                        local h     = hit()
                        h.type      = hit.telepatic
                        h.power     = ( 0.01 + 0.014 * sak.dog_psy ) * mask_k
                        if nlc_vars.vodka_psi_block then h.power = h.power * 0.3 end  -- от водки половина пси
                        h.impulse   = 0.0
                        h:bone( "bip01_spine" )
                        h.draftsman = sfobj
                        h.direction = sfobj:direction()
                        npc:hit( h )
                        panic_item_drop( 0.05 )
                    end
                    return
                end
            end
        end
        ---------------------------  ЭЛЕКТРОТУШКАН  ---------------------------
        if classid == CLID_TUSHKANO and sfobj:alive() then
            local posit = sfobj:position()
            local enemy = sfobj:best_enemy()
            if not enemy then return end
            local posit = posit:distance_to( enemy:position() )
            if posit < 2 and sfobj:see( enemy ) then
                if sfobj:section() == "electro_tushkano_normal" then charge_tushkano( sfobj ) end
                return
            end
        end
        -----------------------------  КОНТРОЛЁР  -----------------------------
        if classid == CLID_CONTROLLER and sfobj:alive() then
            local dist_mod = 0
            if math.fmod( sfobj:id(), 3 ) == 0 then dist_mod = 20 end
            if
                wpn_params.get_zie_obj()
                and actor:see( sfobj )
                and lua_random() < 0.6
                and not nlc_vars.vodka_psi_block  -- если бахнул водки, то не сбивает прицел
            then
                --level.add_pp_effector( "zevok.ppe", 2021, false )
                local dir    = device().cam_dir
                local coor_x = dir.x - ( ( 0.5 - lua_random() ) / 5 )
                local coor_y = dir.y - ( ( 0.5 - lua_random() ) / 7 )
                local coor_z = dir.z - ( ( 0.5 - lua_random() ) / 5 )
                params.set_direction( coor_x, coor_y, coor_z )
                return
            end
            if dist_to_actor < ( 80 + dist_mod ) then
                local  byaka = lua_random()
                --if nlc_vars.vodka_psi_block then byaka = byaka / 2 end  -- под водкой только развороты и дроп пухи
                if     byaka < 0.2 then -- дроп пухи
                    --local dir2 = vector_rotate_y( actor:direction(), ( 240 - 20 * lua_random( 1, 6 ) ) )
                    --phantom_manager.spawn_phantom( actor:position():add( vector():set( dir2.x * 10, 2, dir2.z * 10 ) ) )
                    panic_item_drop()
                    return
                elseif byaka < 0.45 then -- разворот
                    --level.add_pp_effector("zevok.ppe", 2021, false)
                    local dir    = device().cam_dir
                    local coor_x = dir.x - ( 1.5 - 3 * lua_random() )
                    local coor_y = dir.y
                    local coor_z = dir.z - ( 1.5 - 3 * lua_random() )
                    params.set_direction( coor_x, coor_y, coor_z )
                    return
                elseif byaka < 0.6 then -- самовольное снятие маски
                    if vergas_masks.get_flag_mask() == true then vergas_masks.on_off_mask() end
                    return
                elseif byaka < 0.75 then -- обездвиживание ГГ
                    actor.power = -1.0
                    return
                elseif byaka <= 1  then -- самовольная стрельба
                    sak.start_fire()
                    return
                end
            end
        end
        -----------------------------  КОТЕЙКО  -------------------------------
        if classid == CLID_CAT and sfobj:alive() and sfobj.health > 0.05 then
            local npc      = sfobj:get_enemy()
            local prot_k   = 1
            local cat_dist = 25
            if npc and npc:id() == actor:id() then
                if art_is_active( "af_medus_new" ) then
                    prot_k   = 2
                    cat_dist = 15
                end
                if sfobj:see( npc ) then
                    if
                        ( lua_random() * prot_k < bconf.cat_attack_prob + ( 0.05 * game_difficulty ) )
                        and dist_to_actor < cat_dist
                    then
                        level.add_pp_effector( "black_cats.ppe", 2015, false )
                        sleep_manager.zevota()
                        if
                            art_is_active( "af_medus_new" )
                        then
                            sleep_manager.add_sleepiness( 6 )
                            arc_arts.discharge_art_on_belt( "af_medus_new", 0.005 )
                        else
                            sleep_manager.add_sleepiness( 17 )
                        end
                        return
                    end
                end
            end
        end
        -------------------------  ГОЛОДНЫЙ ЗОМБИ  ----------------------------
        if classid == CLID_ZOMBIE and sfobj:alive() and sfobj.health > 0.05 then
            local npc = sfobj:get_enemy()
            if npc and npc:id() == actor:id() then
                if
                    sfobj:see( npc )
                    and dist_to_actor < bconf.starv_dist_attack
                    and lua_random() < 0.2 + ( 0.1 * game_difficulty )
                then
                    if lua_random() < 0.4 then
                        local snd_obj
                        local sound = "monsters\\zombie\\zombi_attack2"
                        snd_obj     = xr_sound.get_safe_sound_object( sound )
                        snd_obj:play_no_feedback( npc, sound_object.s2d, 0, vector(), 5.0 )
                        local level_vol = 0.1
                        level.set_snd_volume( level_vol )
                    end
                    params.satiety_add( -0.1 )
                    if sak.arts_operate == true then
                        if sak_inventory.belt_items[ "af_flower_new" ] then
                            if db.actor.satiety < 0.2 then
                                --actor_params.cond_prop( "satiety", 0.2 )
                                --arc_arts.discharge_art_on_belt( "af_flower_new", 0.001 )
                            end
                        else
                            arc_arts.discharge_all_arts_on_belt( 0.01 )
                        end
                    end
                    return
                end
            end
        end
        ---------------------------  КРОВОСОС  -----------------------------
        if classid == CLID_BLOODSUCKER and sfobj:alive() and sfobj.health > 0.05 then
            local npc  = sfobj:get_enemy()
            local chns = 0.40
            if actor_in_monolith_outfit() then chns = chns / 2 end
            if npc and npc:id() == actor:id() then
                if
                    sfobj:see( npc )
                    and dist_to_actor < 15
                    and lua_random() < chns
                then
                    local snd_obj
                    local sound = "monsters\\bloodsucker\\bloodsucker_attack"
                    snd_obj = xr_sound.get_safe_sound_object( sound )
                    snd_obj:play_no_feedback( npc, sound_object.s2d, 0, vector(), 5.0 )
                    local h     = hit()
                    h.type      = 7
                    h.direction = vector():set( 0, 0, 0 )
                    h.power     = 0.05 + ( 0.02 * game_difficulty )
                    h.impulse   = 0
                    h.draftsman = npc
                    npc:hit( h )
                    h.type      = 3
                    npc:hit( h )
                    return
                end
            end
        end
        ----------------------------  ХИМЕРА  ------------------------------
        if classid == CLID_CHIMERA and sfobj:alive() and sfobj.health > 0.3 then
            local ch_dist, ch_chns = 16, 0.5
            if sfobj:section() == "electro_chimera" then
                ch_dist = 20
                ch_chns = 0.65
            end
            if actor_in_monolith_outfit() then ch_chns = ch_chns / 2 end
            local npc = sfobj:get_enemy()
            if npc and npc:id() == actor:id() then
                if sfobj:see( npc ) and dist_to_actor < ch_dist and lua_random() < ch_chns then
                    if
                        art_is_active( "af_star_new" )
                    then
                        arc_arts.discharge_art_on_belt( "af_star_new", 0.005 )
                    else
                        local snd_obj
                        local sound = "monsters\\chimera\\attack_2"
                        snd_obj = xr_sound.get_safe_sound_object( sound )
                        snd_obj:play_no_feedback( npc, sound_object.s2d, 0, vector(), 5.0 )
                        params.power_health_add( 0.05 )
                    end
                    return
                end
            end
        end
    end
end

function generic_object_binder:anomaly_evade()
    local npc = self.object
    local sid = npc:story_id()
    if sid == 29 or sid == 3 or sid == 9530 then return end
    if not self.prev_pos then
        self.prev_pos  = vector():set(0, 5000, 0)
        self.prev_dist = 0
    end
    local pos  = npc:position()
    local dist = self.prev_pos:distance_to( pos )
    if dist > 15 then -- объект перешел в новую область, надо обновить ему аномальные рестрикторы
        self.prev_pos:set( pos )
        local list  = amk_anoms.get_anomaly_list( npc, 40 )
        local count = 0
        local dump  = " "
        for i, o in ipairs( list ) do
            amk_anoms.add_restriction( npc ,o.id, o.name )
            dump = dump .. DumpVar( o.name ) .. " "
            count = count + 1
        end
    elseif dist ~= self.prv_dist and dist < 20 then
        self.prv_dist = dist
        -- wprintf(" ~C0A %-35s~C07 dist to previuos position = ~C0D %.3f ~C07", npc:name(), dist)
    end
    if amk_anoms.have_pending_sync( npc ) then
        amk_anoms.synchronize( npc )
    end
end

function generic_object_binder:extrapolate_callback()
    if self.object == nil then return false end
    local cur_pt = self.object:get_current_point_index()
    if self.object:get_script() == false then return false end
    if patrol( self.object:patrol() ):flags( cur_pt ):get() == 0 then return true end
    return false
end

function generic_object_binder:waypoint_callback( obj, action_type, index )
    if self.st.active_section ~= nil then
        xr_logic.issue_event(
            self.object, self.st[ self.st.active_scheme ],
            "waypoint_callback", obj, action_type, index
        )
    end
end

function generic_object_binder:death_callback( victim, who )
	--------------добавлено для изменения работы  xr_combat_ignore.script-----------
	self:clear_callbacks()
	--------------------------------------------------------------------------------	
    if self.object == nil then return end
    if who:id() == db.actor:id() then
        xr_statistic.addKillCount( self.object )
        local section = victim:section()
        -------------------  НАПОЛНЕНИЕ ЗВЕРЕЙ УНИКАЛЬНЫМ ХАБАРОМ  -------------------
        if string.find( section, "controller",   1, true ) then
            arc_diary.monster_killed( victim, who )
        end
        if string.find( section, "burer_",       1, true ) then
            sak_dialog.on_burer_kill( victim, who )
        end
        if string.find( section, "flesh_strong", 1, true ) then
            sak_dialog.on_flesh_strong_kill( victim, who )
        end
        if string.find( section, "boar_",        1, true ) then
            sak_dialog.on_boar_kill( victim, who )
        end
        if string.find( section, "chimera_",     1, true ) then
            sak_dialog.on_chimera_kill( victim, who )
        end
    end
    if self.st.mob_death then
        xr_logic.issue_event(
            self.object, self.st.mob_death,
            "death_callback", victim, who
        )
    end
    if self.st.active_section then
        xr_logic.issue_event(
            self.object, self.st[ self.st.active_scheme ],
            "death_callback", victim, who
        )
    end
    smart_terrain.on_death( self.object:id() )
    local h     = hit()
    h.draftsman = self.object
    h.type      = hit.fire_wound
    h.direction = db.actor:position():sub( self.object:position() )
    h:bone( "pelvis" )
    h.power     = 1
    h.impulse   = 10
    self.object:hit( h )
    if table.getn( self.particles ) > 0 then
        for kk, vv in pairs( self.particles ) do vv:on_death() end
    end
    amk.on_death( victim, who )
    if rx_ai then rx_ai.monster_death( victim, who ) end
    -- для xr_kamp от ДиШа ----------------------------------
    xr_kamp.on_death( victim, who )
    --- удаление запчастей, если не ГГ убил зверушку---------
    if IsMonster( victim ) then
        test.on_monster_kill_check_parts( victim, who )
    end
end

function generic_object_binder:hit_callback( obj, amount, local_direction, who, bone_index )
    local actor = db.actor
    if amount < 0.015 then return end
    amk.on_monster_hit( obj, amount, local_direction, who, bone_index )
    if self.st.active_section then
        xr_logic.issue_event(
            self.object, self.st[ self.st.active_scheme ],
            "hit_callback", obj, amount, local_direction, who, bone_index
        )
    end
    if self.st.hit then
        xr_logic.issue_event(
            self.object, self.st.hit,
            "hit_callback", obj, amount, local_direction, who, bone_index
        )
    end
    -----------------  Добавление зрячести мобу при выстреле по нему   ---------------
    ----------------- и попытка назначить ГГ его врагом по рецепту dsh ---------------
    if obj:alive() then
        local chk_dist = obj:position():distance_to( who:position() )
        if chk_dist > obj:range() then
            obj:set_range( chk_dist * 1.1 )
        end
        obj:make_object_visible_somewhen( who )
    end
    ----------------- Убиваем гиганта из РПГ ---------------
    if
        string.find( obj:section(), "gigant", 1, true )
        and not strposx( obj:section(), "marsh" )
        and obj:alive()
    then
        if actor then
            local active_item = actor:active_item()
            if active_item and active_item:section() == "wpn_rpg7" then
                obj:kill( actor )
            end
        end
    end
    ------------------- ХЕДШОТ КРОВОСОСУ? ------------------
    if
        bone_index == 14
        and string.find( obj:section(), "bloodsucker", 1, true )
        and lua_random() < 0.6
    then
        local c_wpn = db.actor:active_item():clsid()
        if c_wpn == WP_WALTH or c_wpn == WP_PM or c_wpn == WP_USP45 then return end
        local h     = hit()
        h.type      = hit.fire_wound
        h.power     = 100 * local_direction.x * local_direction.x * local_direction.x * local_direction.x
        h.impulse   = h.power
        h.draftsman = who
        h.direction = vector():set( 0, -1, 0 )
        obj:hit( h )
    end
    ------------------ РАЗРЯД ЭЛЕКТРОХИМЕРЫ ----------------
    if
        obj:section() == "electro_chimera"
        and time_global() > ( self.charge_time or 0 ) + 3000
    then
        amk_particle.amk_particle({
            particle = "anomaly2\\electra2_blast",
            pos      = obj:bone_position( "bip01_spine" ),
            sound    = "anomaly\\electra_blast1"
        })
        local dist = db.actor:position():distance_to( obj:bone_position( "bip01_spine" ) )
        if dist < 10 then
            local h     = hit()
            h.impulse   = 0
            h.draftsman = db.actor
            h.direction = vector():set( 0, 0, 0 )
            h.power     = 0.5 / dist
            h.type      = hit.strike
            db.actor:hit( h )
            h.power     = 2 / dist
            h.type      = hit.shock
            db.actor:hit( h )
        end
        self.charge_time = time_global()
    end
	--------- added for  OGSE Signal Manager - to work monster's script attack ----
	self.am:call( "on_monster_hit", obj, amount, local_direction, who, bone_index )
	-------------------------------------------------------------------------------	
end

function generic_object_binder:use_callback( obj, who )
    if self.object == nil then return end
    if not self.object:alive() then
        if who:id() == 0 then
            local actor = db.actor
            if
                actor:active_slot() ~= 0
                or not strpos( actor:item_in_slot( 0 ):section(), "knife" )
            then
                params.set_obj_usable( obj:id(), false )
            else
                params.set_obj_usable( obj:id(), true  )
                monster_parts.on_monster_use( obj, who )
            end
        end
    end
end

--------------добавлено для изменения работы  xr_combat_ignore.script-----------
function generic_object_binder:enemy_callback( obj, enemy_st )
	if not obj:alive() then return false end
	local valid, enemy = validate_enemy_object( enemy_st )
	if valid then
		local result = {}
		if enemy:alive() then
			self.am:call( "on_monster_enemy_callback", obj, enemy, result )
		else
			table.insert( result, false )
		end
		for _, v in ipairs( result ) do
			if not v then
				obj:enable_memory_object( enemy, false )
				return false
			end
		end
	end
	return true
end
--------------------------------------------------------------------------------

function generic_object_binder:net_spawn( sobject )
    if not object_binder.net_spawn( self, sobject ) then return false end
    count_spawns = count_spawns + 1
    if count_spawns % 1000 == 0 then
        level.set_load_title( sprintf( "count_spawns = %d", count_spawns ) )
    end
    db.add_obj( self.object )
    xr_gulag.setup_gulag_and_logic_on_spawn(
        self.object, self.st, sobject, modules.stype_mobile, self.loaded
    )
    amk.on_net_spawn( self.object )
	--------------добавлено для изменения работы  xr_combat_ignore.script-----------
	if self.object:alive() then
		self.object:set_enemy_callback( self.enemy_callback, self )
	end
	--------------------------------------------------------------------------------	
    local particle_param = utils.cfg_get_string(
        system_ini(), self.object:section(),
        "bones_particles", null, false, false, nil
    )
    if particle_param and system_ini():section_exist( particle_param ) then
        local tmp = amk.parse_ini_section_to_array( system_ini(), particle_param )
        for k, v in pairs( tmp ) do
            local t = amk.parse_ini_section_to_array( system_ini(), v )
            t.obj = self.object
            if not t.stop_on_death or self.object:alive() then
                play_particle( self.object, t )
            end
        end
    end
	-- added by DSH for xr_kamp ---
	self.am:call( "on_monster_spawn", self.object, self )
	--------------------------------	
    return true
end

function generic_object_binder:clear_callbacks()
	self.object:set_enemy_callback()
end

function generic_object_binder:net_destroy()
	--------------добавлено для изменения работы  xr_combat_ignore.script-----------
		self:clear_callbacks()
	--------------------------------------------------------------------------------
    if table.getn( self.particles ) > 0 then
        for kk, vv in pairs( self.particles ) do
            if not vv:is_finished() then
                vv:stop()
                self.particles[ kk ] = nil
            end
        end
    end
    amk.on_monster_go_offline( self.object )
    self.object:set_callback( callback.death,                nil )
    self.object:set_callback( callback.patrol_path_in_point, nil )
    self.object:set_callback( callback.hit,                  nil )
    local st = db.storage[ self.object:id() ]
    if st and st.active_scheme then
        xr_logic.issue_event( self.object, st[ st.active_scheme ], "net_destroy" )
    end
    db.del_obj( self.object )
    db.storage[ self.object:id() ] = nil
	------added for OGSE Anomaly Evader --------------
	self.am:call( "on_monster_net_destroy", self.object, self )
	self.am:cleanup_signal_subs( "on_monster_update." .. self.object:id() )
	--------------------------------------------------	
    local id = self.object:id()
    object_binder.net_destroy( self )
    local sobj = alife():object( id )
    if sobj and IsMonster( sobj ) then
        local pk   = get_netpk( sobj )
        local data = pk:get()
        data.dynamic_in_restrictions = {}
        pk:set( data )
    end
end

function generic_object_binder:reload( section )
    object_binder.reload( self, section )
end

function generic_object_binder:net_save_relevant()
    return true
end

function generic_object_binder:save( packet )
    object_binder.save( self, packet )
    xr_logic.save_obj( self.object, packet )
    if self.object:clsid() == CLID_TRADER then
        trade_manager.save( self.object, packet )
    end
end

function generic_object_binder:load( reader )
    self.loaded = true
    object_binder.load( self, reader )
    --[[if reader:r_eof() then
    abort("SAVE FILE IS CORRUPT "..self.object:name())
    end--]]
    xr_logic.load_obj( self.object, reader )
    if self.object:clsid() == CLID_TRADER then
        trade_manager.load( self.object, reader )
    end
end

-----------------------------------------------------------------------------------------

function play_particle( obj,params )
    if not particles[ obj:id() ] then
        particles[ obj:id() ] = {}
    end
    table.insert( particles[ obj:id() ],params )
end

local tushkano_particle = particles_object( "anomaly2\\electra_entrance_big" )
local tushkano_sound    = sound_object( [[monsters\tushkano\tushkano_spark]] )

function charge_tushkano( p_obj )
    if p_obj then
        local posit = p_obj:position()
        local enemy = p_obj:best_enemy()
        if not tushkano_particle:playing() then
            tushkano_particle:play_at_pos( posit )
        end
        if not tushkano_sound:playing() then
            tushkano_sound:play_at_pos( p_obj, posit, 0 )
            local zh     = hit()
            zh.draftsman = enemy
            zh.type      = hit.shock
            zh.direction = posit:sub( enemy:position() )
            zh:bone( "pelvis" )
            zh.power     = 0.075 + ( 0.025 * game_difficulty )
            zh.impulse   = 0.05
            enemy:hit( zh )
        end
    end
end

-- Выбивание оружия собаками и прочими бюрерами
function panic_item_drop( coeff )
    local actor    = db.actor
    local slot_k   = 1
    local e_shield = test.e_drink_shield or 1
    local sleep_k, sleep_curr = 0, sleep_manager.get_sleepiness()
    if     sleep_curr > 180 then sleep_k = 0.05
    elseif sleep_curr > 120 then sleep_k = 0.02
    elseif sleep_curr <= 70 then sleep_k = -0.05
    end
    if coeff == nil then coeff = 0.05 end
    local active_slot = actor:active_slot()
    if active_slot == 1 or active_slot == 4 then
        slot_k = 0.7
    else
        slot_k = 1
    end
    if actor_in_monolith_outfit() then slot_k = slot_k * 0.7 end
    if actor_in_exoskeleton() then slot_k = slot_k * 0.7 end
    local drop = ( coeff + sleep_k + ( 0.03 * game_difficulty ) ) * dog_shield * slot_k * e_shield
    local lll = lua_random()
    wprintf("--------------      DROP: " .. drop .. ",  RANDOM: " .. lll.. " ----------")
    if lll < drop then
        local active_item = actor:active_item()
        local resurs = math.ceil( 1 / utils.cfg_get_number( system_ini(), active_item:section(), "condition_shot_dec", nil, false, 0.0003 ))
        local damage = ( lua_random( 1, 3 ) / 100 )
        local kk = 0

        if     resurs < 1990 then kk = 1   elseif resurs <  3900 then kk = 2
        elseif resurs < 5800 then kk = 3   elseif resurs >= 5800 then kk = 4
        end
        log2("------ KK = %.2f", kk)

        if lua_random( 0, 6 ) < kk then damage = 0 end
        if active_item and active_item:section() ~= "bolt" then

            local tmp_cond = active_item:condition()

            local new_condition = active_item:condition() - damage
            params.upd_condition( active_item, new_condition )

            log2("--- DROP WEAPON %s CONDITION CHANGE: from: %.2f to: %.2f", active_item:section(), tmp_cond, active_item:condition() )

            local dpos = test.pos_in_front_of_actor() or db.actor:position()
            actor:drop_item_and_teleport( active_item, dpos )

            --actor:drop_item( active_item )
            --wprintf("--------------------------    SLOT_K WAS: " .. slot_k .. "  --------------------------")
            --wprintf("--------------------------   SLEEP_K WAS: " .. sleep_k .. "  --------------------------")
        end
    end
end

function baloon_on_belt()
    for _, v in ipairs( bal_tbl ) do
        if sak_inventory.belt_items[ v ] then
            return v
        end
    end
    return "none"
end

function actor_has_knife()
    local active_item = db.actor:active_item()
    return (
        active_item and db.actor:active_slot() == 0
        and strposx( active_item:section(), "knife" )
    )
end

function actor_in_monolith_outfit()
    local armor = db.actor:item_in_slot( 6 )
    if armor and strposx( armor:section(), "monolit" ) then return true end
    return false
end

function actor_in_exoskeleton()
    local armor = db.actor:item_in_slot( 6 )
    if armor and strposx( armor:section(), "exo" ) then return true end
    return false
end

function art_is_active( art )
    if
        sak.arts_operate == true
        and sak_inventory.belt_items[ art ]
    then
        return true
    end
    return false
end