basic_main_ofs = 1388 -- 1280 for 1.0004
condition_main_ofs = 144 -- for 1.0004 = 140
jump_main_ofs = 784
inv_main_ofs = 80
ph_main_ofs  = 224


basic_params = {
  pickup_info_radius        = 0032,   -- "$520" in 2945, "$58C" in 1.0006
  walk_accel                = 0052,   -- "$534" in 2945, "$5A0" in 1.0006
  run_coef                  = 0060,   -- "$53C",
  run_back_coef             = 0064,   -- "$540",
  walk_back_coef            = 0068,   -- "$544",
  crouch_coef               = 0072,   -- "$548",
  climb_coef                = 0076,   -- "$54C",
  sprint_koef               = 0080,   -- "$550",
  
  disp_vel_factor           = 0104,   -- "$568",
  disp_accel_factor         = 0108,   -- "$56C",
  disp_crouch_no_acc_factor = 0116,   -- "$574",
  missile_throw_offset      = 0120,   -- "$578"      -- три значения float подряд!
  unk_max_offset            = 0124
}
--

condition_params = {
  radiation_v            = 0000,
  psy_health_v           = 0004,
  unk01                  = 0008,
  morale_v               = 0012,
  radiation_health_v     = 0016,
  bleeding_v             = 0020,
  wound_incarnation_v    = 0024,
  unk02                  = 0028,
  min_wound_size         = 0032,
  unk03                  = 0036,
  health_hit_part        = 0040,
  power_hit_part         = 0044,
  unk04                  = 0048,
  unk05                  = 0052,
  unk06                  = 0056,
  unk07                  = 0060,
  unk08                  = 0064,
  unk09                  = 0068,
  unk0A                  = 0072,
  unk0B                  = 0076,
  untst                  = 0080,
  unk0C                  = 0084,
  unk0D                  = 0088,
  unk0E                  = 0092,
  unk0F                  = 0096,
  unk10                  = 0100,
  alcohol_v              = 0108,
  unk11                  = 0112,
  satiety_v              = 0116,
  satiety_power_v        = 0120,
  satiety_health_v       = 0124,
  max_power_leak_speed   = 0124,
  jump_power             = 0132,
  stand_power            = 0136,
  walk_power             = 0140,
  jump_weight_power      = 0144,
  walk_weight_power      = 0148,
  overweight_walk_k      = 0152,
  overweight_jump_k      = 0156,
  accel_k                = 0160,
  sprint_k               = 0164,
  max_walk_weight        = 0168,
  unk12                  = 0172,
  limping_power_begin    = 0176,
  limping_power_end      = 0180,
  cant_walk_power_begin  = 0184,
  cant_walk_power_end    = 0188,
  cant_spint_power_begin = 0192,
  cant_spint_power_end   = 0196,
  limping_health_begin   = 0200,
  limping_health_end     = 0204,
  unk_max_offset         = 0208
}

jump_params = {
  jump_speed                = 12,
  air_control_param         = 24,
  unk_max_offset            = 28
}

inv_params = {
  max_weight                = 24,
  unk_max_offset            = 28
}

ph_params = {
  ph_mass                   = 20,
  crash_speed_min           = 24,
  crash_speed_max           = 28,
  unk_max_offset            = 32
}

function find_tables()

 local result = { btab = nil, ctab = nil, jtab = nil, ptab = nil, itab = nil }

 result.btab = xray_dma.get_CObject (0)
 -- таблица actor_condition
 -- таблица jump_speed & air_control_param
 -- таблица физ. параметров типа ph_crash_speed_m**
 
 
 if result.btab ~= nil then
    result.ctab = ReadDMA(result.btab, "$1B8", "safe_ptr")  -- actor_condition = $1B0 for 1.0004, $1B8 for 1.0006
    result.itab = ReadDMA(result.btab, 628 + 36, "safe_ptr") -- CInventoryOwner = CActor + 0274h, ?Inventory = [CInventoryOwner + 0024h]
 end

 local skeleton = ReadDMA(result.btab,  "$3A8", "safe_ptr")  -- $3A4 for 2945, $3A8 for 1.0006
 if skeleton ~= nil then 
    result.ptab = ReadDMA(skeleton, "$0B0", "safe_ptr") -- $0B0 for 2945, $0A4 for 1.0004, $0B0h for 1.0006
    if result.ptab ~= nil then
       result.jtab = ReadDMA(result.ptab,  "$01C", "safe_ptr") -- CPHActorCharacter object, $01C for 2495, $018 for 1.0004
    end
 end -- if 0
 return result
end

function cmp_offset(a, b)

 ODS(" comparing "..tostring(a).." vs "..tostring(b))

 if a > b then
    return true
 else
    return false
 end
end

function dump_table(name, ptr_table, offsets, ofs_main)

 local ofs_table = {}


 -- превращение значений в ключи и наоборот
 for key,ofs in pairs(offsets) do
   local kofs = tostring(ofs)
   ofs_table[kofs] = key
 end -- for
 


 ODS("#DBG: dump_table mod~C0A 05.04.2011 17:04~C07")
 if (ptr_table ~= nil) and (ofs_table ~= nil) then
    ODS("#~C0F #DBG: params("..tostring(table.getn(ofs_table))..") for~C0A ".. name.."~C0F at "..FormatPtr(ptr_table).. ":~C07")
 
    local max_ofs = offsets.unk_max_offset
    
    
    for ofs = 0, max_ofs, 4 do

        local kofs = tostring(ofs)
        local key = ofs_table[kofs]
        
        if ( key ~= nil ) and ( string.find(key, "unk") == nil ) then
           local val = ReadDMA(ptr_table, ofs  + ofs_main, "float")
           if val ~= nil then
              ODS( string.format ("    ~C0F %-20s~C0B at ~C0F %5d~C0B =~C0D %.10f~C07", key, ofs, val) )
           end -- if val
        end -- if not unk
        

    end -- for
    
 end -- if

end



function test()                                                   ------------------------ ОТЛАДОЧНЫЙ ВЫВОД ВСЕХ ТАБЛИЦ АКТОРА
 local tabs = find_tables()

 -- вывод базовых параметров
 dump_table("actor basic params",     tabs.btab,       basic_params,     basic_main_ofs)
 dump_table("actor condition params", tabs.ctab,       condition_params, condition_main_ofs) -- вывод параметров состояния актора
 dump_table("jump params",            tabs.jtab,       jump_params,      jump_main_ofs)
 dump_table("phys params",            tabs.ptab,       ph_params,        ph_main_ofs)
 dump_table("inv  params",            tabs.itab,       inv_params,       inv_main_ofs)
 
end


function calc_ofs(id, ofs_table, ofs_main)
 if ofs_table == nil then return nil end
 local ofs = ofs_table[id]
 if ofs == nil then return nil end
 -- ODS(" universal ofs for id ~C0A" ..id.."~C07 =~C0F "..tostring(ofs).."~C07")
 return tonumber(ofs) + ofs_main
end -- calc_ofs

function write_param(id, ptr_table, ofs_table, ofs_main, newval)

 local ofs = calc_ofs (id, ofs_table, ofs_main)
 if (ptr_table == nil) then return end
 if (ofs == nil) then return end
 

 local val = ReadDMA(ptr_table, ofs, "float")
 if val ~= nil then
     local res = WriteDMA(ptr_table, ofs, tonumber(newval), "float")
     -- отладочная проверка
     ODS( string.format ("#DBG(write_param): offset =~C0D %d~C07, current~C0A %s~C07 =~C0D %.5f~C07, new =~C0D %s~C07, res =~C0A %s ~C07", ofs, id, val, tostring(newval), res) )
 end
 
end -- write_param

function setp(id, newval)
 local tabs = find_tables()
 
 write_param(id, tabs.btab, basic_params,     basic_main_ofs,         newval)
 write_param(id, tabs.ctab, condition_params, condition_main_ofs,     newval)
 write_param(id, tabs.jtab, jump_params,      jump_main_ofs,          newval)
 write_param(id, tabs.itab, inv_params,       inv_main_ofs,           newval)
 write_param(id, tabs.ptab, ph_params,        ph_main_ofs,            newval)
end